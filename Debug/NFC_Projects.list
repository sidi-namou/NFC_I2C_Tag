
NFC_Projects.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000454c  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000098  080046d4  080046d4  000146d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800476c  0800476c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  0800476c  0800476c  0001476c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004774  08004774  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004774  08004774  00014774  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004778  08004778  00014778  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  0800477c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000ec  2000000c  08004788  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000f8  08004788  000200f8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000df28  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001ccd  00000000  00000000  0002df64  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000c38  00000000  00000000  0002fc38  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000b40  00000000  00000000  00030870  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002565d  00000000  00000000  000313b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00009faf  00000000  00000000  00056a0d  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000e6167  00000000  00000000  000609bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00146b23  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000031e8  00000000  00000000  00146ba0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080046bc 	.word	0x080046bc

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	080046bc 	.word	0x080046bc

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b972 	b.w	80004c4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9e08      	ldr	r6, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	4688      	mov	r8, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14b      	bne.n	800029e <__udivmoddi4+0xa6>
 8000206:	428a      	cmp	r2, r1
 8000208:	4615      	mov	r5, r2
 800020a:	d967      	bls.n	80002dc <__udivmoddi4+0xe4>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b14a      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000212:	f1c2 0720 	rsb	r7, r2, #32
 8000216:	fa01 f302 	lsl.w	r3, r1, r2
 800021a:	fa20 f707 	lsr.w	r7, r0, r7
 800021e:	4095      	lsls	r5, r2
 8000220:	ea47 0803 	orr.w	r8, r7, r3
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000230:	fa1f fc85 	uxth.w	ip, r5
 8000234:	fb0e 8817 	mls	r8, lr, r7, r8
 8000238:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800023c:	fb07 f10c 	mul.w	r1, r7, ip
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18eb      	adds	r3, r5, r3
 8000246:	f107 30ff 	add.w	r0, r7, #4294967295
 800024a:	f080 811b 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8118 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000254:	3f02      	subs	r7, #2
 8000256:	442b      	add	r3, r5
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000260:	fb0e 3310 	mls	r3, lr, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fc0c 	mul.w	ip, r0, ip
 800026c:	45a4      	cmp	ip, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	192c      	adds	r4, r5, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295
 8000276:	f080 8107 	bcs.w	8000488 <__udivmoddi4+0x290>
 800027a:	45a4      	cmp	ip, r4
 800027c:	f240 8104 	bls.w	8000488 <__udivmoddi4+0x290>
 8000280:	3802      	subs	r0, #2
 8000282:	442c      	add	r4, r5
 8000284:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000288:	eba4 040c 	sub.w	r4, r4, ip
 800028c:	2700      	movs	r7, #0
 800028e:	b11e      	cbz	r6, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c6 4300 	strd	r4, r3, [r6]
 8000298:	4639      	mov	r1, r7
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d909      	bls.n	80002b6 <__udivmoddi4+0xbe>
 80002a2:	2e00      	cmp	r6, #0
 80002a4:	f000 80eb 	beq.w	800047e <__udivmoddi4+0x286>
 80002a8:	2700      	movs	r7, #0
 80002aa:	e9c6 0100 	strd	r0, r1, [r6]
 80002ae:	4638      	mov	r0, r7
 80002b0:	4639      	mov	r1, r7
 80002b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b6:	fab3 f783 	clz	r7, r3
 80002ba:	2f00      	cmp	r7, #0
 80002bc:	d147      	bne.n	800034e <__udivmoddi4+0x156>
 80002be:	428b      	cmp	r3, r1
 80002c0:	d302      	bcc.n	80002c8 <__udivmoddi4+0xd0>
 80002c2:	4282      	cmp	r2, r0
 80002c4:	f200 80fa 	bhi.w	80004bc <__udivmoddi4+0x2c4>
 80002c8:	1a84      	subs	r4, r0, r2
 80002ca:	eb61 0303 	sbc.w	r3, r1, r3
 80002ce:	2001      	movs	r0, #1
 80002d0:	4698      	mov	r8, r3
 80002d2:	2e00      	cmp	r6, #0
 80002d4:	d0e0      	beq.n	8000298 <__udivmoddi4+0xa0>
 80002d6:	e9c6 4800 	strd	r4, r8, [r6]
 80002da:	e7dd      	b.n	8000298 <__udivmoddi4+0xa0>
 80002dc:	b902      	cbnz	r2, 80002e0 <__udivmoddi4+0xe8>
 80002de:	deff      	udf	#255	; 0xff
 80002e0:	fab2 f282 	clz	r2, r2
 80002e4:	2a00      	cmp	r2, #0
 80002e6:	f040 808f 	bne.w	8000408 <__udivmoddi4+0x210>
 80002ea:	1b49      	subs	r1, r1, r5
 80002ec:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002f0:	fa1f f885 	uxth.w	r8, r5
 80002f4:	2701      	movs	r7, #1
 80002f6:	fbb1 fcfe 	udiv	ip, r1, lr
 80002fa:	0c23      	lsrs	r3, r4, #16
 80002fc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000300:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000304:	fb08 f10c 	mul.w	r1, r8, ip
 8000308:	4299      	cmp	r1, r3
 800030a:	d907      	bls.n	800031c <__udivmoddi4+0x124>
 800030c:	18eb      	adds	r3, r5, r3
 800030e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x122>
 8000314:	4299      	cmp	r1, r3
 8000316:	f200 80cd 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 800031a:	4684      	mov	ip, r0
 800031c:	1a59      	subs	r1, r3, r1
 800031e:	b2a3      	uxth	r3, r4
 8000320:	fbb1 f0fe 	udiv	r0, r1, lr
 8000324:	fb0e 1410 	mls	r4, lr, r0, r1
 8000328:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800032c:	fb08 f800 	mul.w	r8, r8, r0
 8000330:	45a0      	cmp	r8, r4
 8000332:	d907      	bls.n	8000344 <__udivmoddi4+0x14c>
 8000334:	192c      	adds	r4, r5, r4
 8000336:	f100 33ff 	add.w	r3, r0, #4294967295
 800033a:	d202      	bcs.n	8000342 <__udivmoddi4+0x14a>
 800033c:	45a0      	cmp	r8, r4
 800033e:	f200 80b6 	bhi.w	80004ae <__udivmoddi4+0x2b6>
 8000342:	4618      	mov	r0, r3
 8000344:	eba4 0408 	sub.w	r4, r4, r8
 8000348:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800034c:	e79f      	b.n	800028e <__udivmoddi4+0x96>
 800034e:	f1c7 0c20 	rsb	ip, r7, #32
 8000352:	40bb      	lsls	r3, r7
 8000354:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000358:	ea4e 0e03 	orr.w	lr, lr, r3
 800035c:	fa01 f407 	lsl.w	r4, r1, r7
 8000360:	fa20 f50c 	lsr.w	r5, r0, ip
 8000364:	fa21 f30c 	lsr.w	r3, r1, ip
 8000368:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800036c:	4325      	orrs	r5, r4
 800036e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000372:	0c2c      	lsrs	r4, r5, #16
 8000374:	fb08 3319 	mls	r3, r8, r9, r3
 8000378:	fa1f fa8e 	uxth.w	sl, lr
 800037c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000380:	fb09 f40a 	mul.w	r4, r9, sl
 8000384:	429c      	cmp	r4, r3
 8000386:	fa02 f207 	lsl.w	r2, r2, r7
 800038a:	fa00 f107 	lsl.w	r1, r0, r7
 800038e:	d90b      	bls.n	80003a8 <__udivmoddi4+0x1b0>
 8000390:	eb1e 0303 	adds.w	r3, lr, r3
 8000394:	f109 30ff 	add.w	r0, r9, #4294967295
 8000398:	f080 8087 	bcs.w	80004aa <__udivmoddi4+0x2b2>
 800039c:	429c      	cmp	r4, r3
 800039e:	f240 8084 	bls.w	80004aa <__udivmoddi4+0x2b2>
 80003a2:	f1a9 0902 	sub.w	r9, r9, #2
 80003a6:	4473      	add	r3, lr
 80003a8:	1b1b      	subs	r3, r3, r4
 80003aa:	b2ad      	uxth	r5, r5
 80003ac:	fbb3 f0f8 	udiv	r0, r3, r8
 80003b0:	fb08 3310 	mls	r3, r8, r0, r3
 80003b4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003b8:	fb00 fa0a 	mul.w	sl, r0, sl
 80003bc:	45a2      	cmp	sl, r4
 80003be:	d908      	bls.n	80003d2 <__udivmoddi4+0x1da>
 80003c0:	eb1e 0404 	adds.w	r4, lr, r4
 80003c4:	f100 33ff 	add.w	r3, r0, #4294967295
 80003c8:	d26b      	bcs.n	80004a2 <__udivmoddi4+0x2aa>
 80003ca:	45a2      	cmp	sl, r4
 80003cc:	d969      	bls.n	80004a2 <__udivmoddi4+0x2aa>
 80003ce:	3802      	subs	r0, #2
 80003d0:	4474      	add	r4, lr
 80003d2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003d6:	fba0 8902 	umull	r8, r9, r0, r2
 80003da:	eba4 040a 	sub.w	r4, r4, sl
 80003de:	454c      	cmp	r4, r9
 80003e0:	46c2      	mov	sl, r8
 80003e2:	464b      	mov	r3, r9
 80003e4:	d354      	bcc.n	8000490 <__udivmoddi4+0x298>
 80003e6:	d051      	beq.n	800048c <__udivmoddi4+0x294>
 80003e8:	2e00      	cmp	r6, #0
 80003ea:	d069      	beq.n	80004c0 <__udivmoddi4+0x2c8>
 80003ec:	ebb1 050a 	subs.w	r5, r1, sl
 80003f0:	eb64 0403 	sbc.w	r4, r4, r3
 80003f4:	fa04 fc0c 	lsl.w	ip, r4, ip
 80003f8:	40fd      	lsrs	r5, r7
 80003fa:	40fc      	lsrs	r4, r7
 80003fc:	ea4c 0505 	orr.w	r5, ip, r5
 8000400:	e9c6 5400 	strd	r5, r4, [r6]
 8000404:	2700      	movs	r7, #0
 8000406:	e747      	b.n	8000298 <__udivmoddi4+0xa0>
 8000408:	f1c2 0320 	rsb	r3, r2, #32
 800040c:	fa20 f703 	lsr.w	r7, r0, r3
 8000410:	4095      	lsls	r5, r2
 8000412:	fa01 f002 	lsl.w	r0, r1, r2
 8000416:	fa21 f303 	lsr.w	r3, r1, r3
 800041a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800041e:	4338      	orrs	r0, r7
 8000420:	0c01      	lsrs	r1, r0, #16
 8000422:	fbb3 f7fe 	udiv	r7, r3, lr
 8000426:	fa1f f885 	uxth.w	r8, r5
 800042a:	fb0e 3317 	mls	r3, lr, r7, r3
 800042e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000432:	fb07 f308 	mul.w	r3, r7, r8
 8000436:	428b      	cmp	r3, r1
 8000438:	fa04 f402 	lsl.w	r4, r4, r2
 800043c:	d907      	bls.n	800044e <__udivmoddi4+0x256>
 800043e:	1869      	adds	r1, r5, r1
 8000440:	f107 3cff 	add.w	ip, r7, #4294967295
 8000444:	d22f      	bcs.n	80004a6 <__udivmoddi4+0x2ae>
 8000446:	428b      	cmp	r3, r1
 8000448:	d92d      	bls.n	80004a6 <__udivmoddi4+0x2ae>
 800044a:	3f02      	subs	r7, #2
 800044c:	4429      	add	r1, r5
 800044e:	1acb      	subs	r3, r1, r3
 8000450:	b281      	uxth	r1, r0
 8000452:	fbb3 f0fe 	udiv	r0, r3, lr
 8000456:	fb0e 3310 	mls	r3, lr, r0, r3
 800045a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045e:	fb00 f308 	mul.w	r3, r0, r8
 8000462:	428b      	cmp	r3, r1
 8000464:	d907      	bls.n	8000476 <__udivmoddi4+0x27e>
 8000466:	1869      	adds	r1, r5, r1
 8000468:	f100 3cff 	add.w	ip, r0, #4294967295
 800046c:	d217      	bcs.n	800049e <__udivmoddi4+0x2a6>
 800046e:	428b      	cmp	r3, r1
 8000470:	d915      	bls.n	800049e <__udivmoddi4+0x2a6>
 8000472:	3802      	subs	r0, #2
 8000474:	4429      	add	r1, r5
 8000476:	1ac9      	subs	r1, r1, r3
 8000478:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800047c:	e73b      	b.n	80002f6 <__udivmoddi4+0xfe>
 800047e:	4637      	mov	r7, r6
 8000480:	4630      	mov	r0, r6
 8000482:	e709      	b.n	8000298 <__udivmoddi4+0xa0>
 8000484:	4607      	mov	r7, r0
 8000486:	e6e7      	b.n	8000258 <__udivmoddi4+0x60>
 8000488:	4618      	mov	r0, r3
 800048a:	e6fb      	b.n	8000284 <__udivmoddi4+0x8c>
 800048c:	4541      	cmp	r1, r8
 800048e:	d2ab      	bcs.n	80003e8 <__udivmoddi4+0x1f0>
 8000490:	ebb8 0a02 	subs.w	sl, r8, r2
 8000494:	eb69 020e 	sbc.w	r2, r9, lr
 8000498:	3801      	subs	r0, #1
 800049a:	4613      	mov	r3, r2
 800049c:	e7a4      	b.n	80003e8 <__udivmoddi4+0x1f0>
 800049e:	4660      	mov	r0, ip
 80004a0:	e7e9      	b.n	8000476 <__udivmoddi4+0x27e>
 80004a2:	4618      	mov	r0, r3
 80004a4:	e795      	b.n	80003d2 <__udivmoddi4+0x1da>
 80004a6:	4667      	mov	r7, ip
 80004a8:	e7d1      	b.n	800044e <__udivmoddi4+0x256>
 80004aa:	4681      	mov	r9, r0
 80004ac:	e77c      	b.n	80003a8 <__udivmoddi4+0x1b0>
 80004ae:	3802      	subs	r0, #2
 80004b0:	442c      	add	r4, r5
 80004b2:	e747      	b.n	8000344 <__udivmoddi4+0x14c>
 80004b4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b8:	442b      	add	r3, r5
 80004ba:	e72f      	b.n	800031c <__udivmoddi4+0x124>
 80004bc:	4638      	mov	r0, r7
 80004be:	e708      	b.n	80002d2 <__udivmoddi4+0xda>
 80004c0:	4637      	mov	r7, r6
 80004c2:	e6e9      	b.n	8000298 <__udivmoddi4+0xa0>

080004c4 <__aeabi_idiv0>:
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop

080004c8 <HAL_GPIO_EXTI_Callback>:
 * */

/**This function callback when an NFC device is present
 *
 * */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 80004c8:	b580      	push	{r7, lr}
 80004ca:	b082      	sub	sp, #8
 80004cc:	af00      	add	r7, sp, #0
 80004ce:	4603      	mov	r3, r0
 80004d0:	80fb      	strh	r3, [r7, #6]

	/* We loop until we RF field switch off*/

	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_4));
 80004d2:	bf00      	nop
 80004d4:	2110      	movs	r1, #16
 80004d6:	4805      	ldr	r0, [pc, #20]	; (80004ec <HAL_GPIO_EXTI_Callback+0x24>)
 80004d8:	f000 fe62 	bl	80011a0 <HAL_GPIO_ReadPin>
 80004dc:	4603      	mov	r3, r0
 80004de:	2b00      	cmp	r3, #0
 80004e0:	d1f8      	bne.n	80004d4 <HAL_GPIO_EXTI_Callback+0xc>

	/* Please put here your code, if you want to read something from NFC or write something to NFC*/



}
 80004e2:	bf00      	nop
 80004e4:	3708      	adds	r7, #8
 80004e6:	46bd      	mov	sp, r7
 80004e8:	bd80      	pop	{r7, pc}
 80004ea:	bf00      	nop
 80004ec:	48000400 	.word	0x48000400

080004f0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004f0:	b580      	push	{r7, lr}
 80004f2:	b08a      	sub	sp, #40	; 0x28
 80004f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	uint8_t data[20]={};
 80004f6:	f107 0314 	add.w	r3, r7, #20
 80004fa:	2200      	movs	r2, #0
 80004fc:	601a      	str	r2, [r3, #0]
 80004fe:	605a      	str	r2, [r3, #4]
 8000500:	609a      	str	r2, [r3, #8]
 8000502:	60da      	str	r2, [r3, #12]
 8000504:	611a      	str	r2, [r3, #16]
	uint8_t buffer[20]={};
 8000506:	463b      	mov	r3, r7
 8000508:	2200      	movs	r2, #0
 800050a:	601a      	str	r2, [r3, #0]
 800050c:	605a      	str	r2, [r3, #4]
 800050e:	609a      	str	r2, [r3, #8]
 8000510:	60da      	str	r2, [r3, #12]
 8000512:	611a      	str	r2, [r3, #16]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000514:	f000 fac7 	bl	8000aa6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000518:	f000 f80e 	bl	8000538 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800051c:	f000 f8e2 	bl	80006e4 <MX_GPIO_Init>
  MX_I2C2_Init();
 8000520:	f000 f870 	bl	8000604 <MX_I2C2_Init>
  MX_USART2_UART_Init();
 8000524:	f000 f8ae 	bl	8000684 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */



  read_From_NFC(1,data,nfc_address_recommended);
 8000528:	f107 0314 	add.w	r3, r7, #20
 800052c:	2204      	movs	r2, #4
 800052e:	4619      	mov	r1, r3
 8000530:	2001      	movs	r0, #1
 8000532:	f000 f91d 	bl	8000770 <read_From_NFC>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000536:	e7fe      	b.n	8000536 <main+0x46>

08000538 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000538:	b580      	push	{r7, lr}
 800053a:	b0b8      	sub	sp, #224	; 0xe0
 800053c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800053e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000542:	2244      	movs	r2, #68	; 0x44
 8000544:	2100      	movs	r1, #0
 8000546:	4618      	mov	r0, r3
 8000548:	f004 f8b0 	bl	80046ac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800054c:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8000550:	2200      	movs	r2, #0
 8000552:	601a      	str	r2, [r3, #0]
 8000554:	605a      	str	r2, [r3, #4]
 8000556:	609a      	str	r2, [r3, #8]
 8000558:	60da      	str	r2, [r3, #12]
 800055a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800055c:	463b      	mov	r3, r7
 800055e:	2288      	movs	r2, #136	; 0x88
 8000560:	2100      	movs	r1, #0
 8000562:	4618      	mov	r0, r3
 8000564:	f004 f8a2 	bl	80046ac <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000568:	2302      	movs	r3, #2
 800056a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800056e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000572:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000576:	2310      	movs	r3, #16
 8000578:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800057c:	2300      	movs	r3, #0
 800057e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000582:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000586:	4618      	mov	r0, r3
 8000588:	f002 f904 	bl	8002794 <HAL_RCC_OscConfig>
 800058c:	4603      	mov	r3, r0
 800058e:	2b00      	cmp	r3, #0
 8000590:	d001      	beq.n	8000596 <SystemClock_Config+0x5e>
  {
    Error_Handler();
 8000592:	f000 f8e9 	bl	8000768 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000596:	230f      	movs	r3, #15
 8000598:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800059c:	2301      	movs	r3, #1
 800059e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005a2:	2300      	movs	r3, #0
 80005a4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005a8:	2300      	movs	r3, #0
 80005aa:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005ae:	2300      	movs	r3, #0
 80005b0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80005b4:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80005b8:	2100      	movs	r1, #0
 80005ba:	4618      	mov	r0, r3
 80005bc:	f002 fcd0 	bl	8002f60 <HAL_RCC_ClockConfig>
 80005c0:	4603      	mov	r3, r0
 80005c2:	2b00      	cmp	r3, #0
 80005c4:	d001      	beq.n	80005ca <SystemClock_Config+0x92>
  {
    Error_Handler();
 80005c6:	f000 f8cf 	bl	8000768 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_I2C2;
 80005ca:	2382      	movs	r3, #130	; 0x82
 80005cc:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80005ce:	2300      	movs	r3, #0
 80005d0:	63fb      	str	r3, [r7, #60]	; 0x3c
  PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 80005d2:	2300      	movs	r3, #0
 80005d4:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80005d6:	463b      	mov	r3, r7
 80005d8:	4618      	mov	r0, r3
 80005da:	f002 fec5 	bl	8003368 <HAL_RCCEx_PeriphCLKConfig>
 80005de:	4603      	mov	r3, r0
 80005e0:	2b00      	cmp	r3, #0
 80005e2:	d001      	beq.n	80005e8 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 80005e4:	f000 f8c0 	bl	8000768 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80005e8:	f44f 7000 	mov.w	r0, #512	; 0x200
 80005ec:	f002 f87c 	bl	80026e8 <HAL_PWREx_ControlVoltageScaling>
 80005f0:	4603      	mov	r3, r0
 80005f2:	2b00      	cmp	r3, #0
 80005f4:	d001      	beq.n	80005fa <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80005f6:	f000 f8b7 	bl	8000768 <Error_Handler>
  }
}
 80005fa:	bf00      	nop
 80005fc:	37e0      	adds	r7, #224	; 0xe0
 80005fe:	46bd      	mov	sp, r7
 8000600:	bd80      	pop	{r7, pc}
	...

08000604 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000604:	b580      	push	{r7, lr}
 8000606:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000608:	4b1b      	ldr	r3, [pc, #108]	; (8000678 <MX_I2C2_Init+0x74>)
 800060a:	4a1c      	ldr	r2, [pc, #112]	; (800067c <MX_I2C2_Init+0x78>)
 800060c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00303D5B;
 800060e:	4b1a      	ldr	r3, [pc, #104]	; (8000678 <MX_I2C2_Init+0x74>)
 8000610:	4a1b      	ldr	r2, [pc, #108]	; (8000680 <MX_I2C2_Init+0x7c>)
 8000612:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000614:	4b18      	ldr	r3, [pc, #96]	; (8000678 <MX_I2C2_Init+0x74>)
 8000616:	2200      	movs	r2, #0
 8000618:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800061a:	4b17      	ldr	r3, [pc, #92]	; (8000678 <MX_I2C2_Init+0x74>)
 800061c:	2201      	movs	r2, #1
 800061e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000620:	4b15      	ldr	r3, [pc, #84]	; (8000678 <MX_I2C2_Init+0x74>)
 8000622:	2200      	movs	r2, #0
 8000624:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000626:	4b14      	ldr	r3, [pc, #80]	; (8000678 <MX_I2C2_Init+0x74>)
 8000628:	2200      	movs	r2, #0
 800062a:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800062c:	4b12      	ldr	r3, [pc, #72]	; (8000678 <MX_I2C2_Init+0x74>)
 800062e:	2200      	movs	r2, #0
 8000630:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000632:	4b11      	ldr	r3, [pc, #68]	; (8000678 <MX_I2C2_Init+0x74>)
 8000634:	2200      	movs	r2, #0
 8000636:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000638:	4b0f      	ldr	r3, [pc, #60]	; (8000678 <MX_I2C2_Init+0x74>)
 800063a:	2200      	movs	r2, #0
 800063c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800063e:	480e      	ldr	r0, [pc, #56]	; (8000678 <MX_I2C2_Init+0x74>)
 8000640:	f000 fdde 	bl	8001200 <HAL_I2C_Init>
 8000644:	4603      	mov	r3, r0
 8000646:	2b00      	cmp	r3, #0
 8000648:	d001      	beq.n	800064e <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 800064a:	f000 f88d 	bl	8000768 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800064e:	2100      	movs	r1, #0
 8000650:	4809      	ldr	r0, [pc, #36]	; (8000678 <MX_I2C2_Init+0x74>)
 8000652:	f001 ffa3 	bl	800259c <HAL_I2CEx_ConfigAnalogFilter>
 8000656:	4603      	mov	r3, r0
 8000658:	2b00      	cmp	r3, #0
 800065a:	d001      	beq.n	8000660 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 800065c:	f000 f884 	bl	8000768 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000660:	2100      	movs	r1, #0
 8000662:	4805      	ldr	r0, [pc, #20]	; (8000678 <MX_I2C2_Init+0x74>)
 8000664:	f001 ffe5 	bl	8002632 <HAL_I2CEx_ConfigDigitalFilter>
 8000668:	4603      	mov	r3, r0
 800066a:	2b00      	cmp	r3, #0
 800066c:	d001      	beq.n	8000672 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 800066e:	f000 f87b 	bl	8000768 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000672:	bf00      	nop
 8000674:	bd80      	pop	{r7, pc}
 8000676:	bf00      	nop
 8000678:	20000028 	.word	0x20000028
 800067c:	40005800 	.word	0x40005800
 8000680:	00303d5b 	.word	0x00303d5b

08000684 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000684:	b580      	push	{r7, lr}
 8000686:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000688:	4b14      	ldr	r3, [pc, #80]	; (80006dc <MX_USART2_UART_Init+0x58>)
 800068a:	4a15      	ldr	r2, [pc, #84]	; (80006e0 <MX_USART2_UART_Init+0x5c>)
 800068c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800068e:	4b13      	ldr	r3, [pc, #76]	; (80006dc <MX_USART2_UART_Init+0x58>)
 8000690:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000694:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000696:	4b11      	ldr	r3, [pc, #68]	; (80006dc <MX_USART2_UART_Init+0x58>)
 8000698:	2200      	movs	r2, #0
 800069a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800069c:	4b0f      	ldr	r3, [pc, #60]	; (80006dc <MX_USART2_UART_Init+0x58>)
 800069e:	2200      	movs	r2, #0
 80006a0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80006a2:	4b0e      	ldr	r3, [pc, #56]	; (80006dc <MX_USART2_UART_Init+0x58>)
 80006a4:	2200      	movs	r2, #0
 80006a6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80006a8:	4b0c      	ldr	r3, [pc, #48]	; (80006dc <MX_USART2_UART_Init+0x58>)
 80006aa:	220c      	movs	r2, #12
 80006ac:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006ae:	4b0b      	ldr	r3, [pc, #44]	; (80006dc <MX_USART2_UART_Init+0x58>)
 80006b0:	2200      	movs	r2, #0
 80006b2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80006b4:	4b09      	ldr	r3, [pc, #36]	; (80006dc <MX_USART2_UART_Init+0x58>)
 80006b6:	2200      	movs	r2, #0
 80006b8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80006ba:	4b08      	ldr	r3, [pc, #32]	; (80006dc <MX_USART2_UART_Init+0x58>)
 80006bc:	2200      	movs	r2, #0
 80006be:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80006c0:	4b06      	ldr	r3, [pc, #24]	; (80006dc <MX_USART2_UART_Init+0x58>)
 80006c2:	2200      	movs	r2, #0
 80006c4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80006c6:	4805      	ldr	r0, [pc, #20]	; (80006dc <MX_USART2_UART_Init+0x58>)
 80006c8:	f003 fafe 	bl	8003cc8 <HAL_UART_Init>
 80006cc:	4603      	mov	r3, r0
 80006ce:	2b00      	cmp	r3, #0
 80006d0:	d001      	beq.n	80006d6 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80006d2:	f000 f849 	bl	8000768 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80006d6:	bf00      	nop
 80006d8:	bd80      	pop	{r7, pc}
 80006da:	bf00      	nop
 80006dc:	20000074 	.word	0x20000074
 80006e0:	40004400 	.word	0x40004400

080006e4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006e4:	b580      	push	{r7, lr}
 80006e6:	b088      	sub	sp, #32
 80006e8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006ea:	f107 030c 	add.w	r3, r7, #12
 80006ee:	2200      	movs	r2, #0
 80006f0:	601a      	str	r2, [r3, #0]
 80006f2:	605a      	str	r2, [r3, #4]
 80006f4:	609a      	str	r2, [r3, #8]
 80006f6:	60da      	str	r2, [r3, #12]
 80006f8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006fa:	4b18      	ldr	r3, [pc, #96]	; (800075c <MX_GPIO_Init+0x78>)
 80006fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006fe:	4a17      	ldr	r2, [pc, #92]	; (800075c <MX_GPIO_Init+0x78>)
 8000700:	f043 0301 	orr.w	r3, r3, #1
 8000704:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000706:	4b15      	ldr	r3, [pc, #84]	; (800075c <MX_GPIO_Init+0x78>)
 8000708:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800070a:	f003 0301 	and.w	r3, r3, #1
 800070e:	60bb      	str	r3, [r7, #8]
 8000710:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000712:	4b12      	ldr	r3, [pc, #72]	; (800075c <MX_GPIO_Init+0x78>)
 8000714:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000716:	4a11      	ldr	r2, [pc, #68]	; (800075c <MX_GPIO_Init+0x78>)
 8000718:	f043 0302 	orr.w	r3, r3, #2
 800071c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800071e:	4b0f      	ldr	r3, [pc, #60]	; (800075c <MX_GPIO_Init+0x78>)
 8000720:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000722:	f003 0302 	and.w	r3, r3, #2
 8000726:	607b      	str	r3, [r7, #4]
 8000728:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 800072a:	2310      	movs	r3, #16
 800072c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800072e:	4b0c      	ldr	r3, [pc, #48]	; (8000760 <MX_GPIO_Init+0x7c>)
 8000730:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000732:	2300      	movs	r3, #0
 8000734:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000736:	f107 030c 	add.w	r3, r7, #12
 800073a:	4619      	mov	r1, r3
 800073c:	4809      	ldr	r0, [pc, #36]	; (8000764 <MX_GPIO_Init+0x80>)
 800073e:	f000 fb87 	bl	8000e50 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8000742:	2200      	movs	r2, #0
 8000744:	2100      	movs	r1, #0
 8000746:	200a      	movs	r0, #10
 8000748:	f000 fafd 	bl	8000d46 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 800074c:	200a      	movs	r0, #10
 800074e:	f000 fb16 	bl	8000d7e <HAL_NVIC_EnableIRQ>

}
 8000752:	bf00      	nop
 8000754:	3720      	adds	r7, #32
 8000756:	46bd      	mov	sp, r7
 8000758:	bd80      	pop	{r7, pc}
 800075a:	bf00      	nop
 800075c:	40021000 	.word	0x40021000
 8000760:	10210000 	.word	0x10210000
 8000764:	48000400 	.word	0x48000400

08000768 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000768:	b480      	push	{r7}
 800076a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800076c:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800076e:	e7fe      	b.n	800076e <Error_Handler+0x6>

08000770 <read_From_NFC>:


}


void read_From_NFC(uint8_t MemAddr, uint8_t * buffer, uint8_t nfc_add){
 8000770:	b580      	push	{r7, lr}
 8000772:	b086      	sub	sp, #24
 8000774:	af02      	add	r7, sp, #8
 8000776:	4603      	mov	r3, r0
 8000778:	6039      	str	r1, [r7, #0]
 800077a:	71fb      	strb	r3, [r7, #7]
 800077c:	4613      	mov	r3, r2
 800077e:	71bb      	strb	r3, [r7, #6]

	uint8_t data = MemAddr;
 8000780:	79fb      	ldrb	r3, [r7, #7]
 8000782:	73fb      	strb	r3, [r7, #15]


	  if(HAL_I2C_Master_Transmit(&hi2c2, nfc_add, &data, 1,
 8000784:	79bb      	ldrb	r3, [r7, #6]
 8000786:	b299      	uxth	r1, r3
 8000788:	f107 020f 	add.w	r2, r7, #15
 800078c:	2306      	movs	r3, #6
 800078e:	9300      	str	r3, [sp, #0]
 8000790:	2301      	movs	r3, #1
 8000792:	4811      	ldr	r0, [pc, #68]	; (80007d8 <read_From_NFC+0x68>)
 8000794:	f000 fdc4 	bl	8001320 <HAL_I2C_Master_Transmit>
 8000798:	4603      	mov	r3, r0
 800079a:	2b00      	cmp	r3, #0
 800079c:	d005      	beq.n	80007aa <read_From_NFC+0x3a>
	  	                                            6)!=HAL_OK)
		  HAL_UART_Transmit(&huart2,"Transmission Failed\r\n",20,20);/*This is For debugging*/
 800079e:	2314      	movs	r3, #20
 80007a0:	2214      	movs	r2, #20
 80007a2:	490e      	ldr	r1, [pc, #56]	; (80007dc <read_From_NFC+0x6c>)
 80007a4:	480e      	ldr	r0, [pc, #56]	; (80007e0 <read_From_NFC+0x70>)
 80007a6:	f003 fadd 	bl	8003d64 <HAL_UART_Transmit>

	  if( HAL_I2C_Master_Receive(&hi2c2, nfc_add, buffer, 16,
 80007aa:	79bb      	ldrb	r3, [r7, #6]
 80007ac:	b299      	uxth	r1, r3
 80007ae:	2364      	movs	r3, #100	; 0x64
 80007b0:	9300      	str	r3, [sp, #0]
 80007b2:	2310      	movs	r3, #16
 80007b4:	683a      	ldr	r2, [r7, #0]
 80007b6:	4808      	ldr	r0, [pc, #32]	; (80007d8 <read_From_NFC+0x68>)
 80007b8:	f000 fea6 	bl	8001508 <HAL_I2C_Master_Receive>
 80007bc:	4603      	mov	r3, r0
 80007be:	2b00      	cmp	r3, #0
 80007c0:	d005      	beq.n	80007ce <read_From_NFC+0x5e>
	 	                                           100)!=HAL_OK)
	 	  HAL_UART_Transmit(&huart2,"Receiver Failed\r\n",20,20);	/*This is For debugging*/
 80007c2:	2314      	movs	r3, #20
 80007c4:	2214      	movs	r2, #20
 80007c6:	4907      	ldr	r1, [pc, #28]	; (80007e4 <read_From_NFC+0x74>)
 80007c8:	4805      	ldr	r0, [pc, #20]	; (80007e0 <read_From_NFC+0x70>)
 80007ca:	f003 facb 	bl	8003d64 <HAL_UART_Transmit>


}
 80007ce:	bf00      	nop
 80007d0:	3710      	adds	r7, #16
 80007d2:	46bd      	mov	sp, r7
 80007d4:	bd80      	pop	{r7, pc}
 80007d6:	bf00      	nop
 80007d8:	20000028 	.word	0x20000028
 80007dc:	080046d4 	.word	0x080046d4
 80007e0:	20000074 	.word	0x20000074
 80007e4:	080046ec 	.word	0x080046ec

080007e8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007e8:	b480      	push	{r7}
 80007ea:	b083      	sub	sp, #12
 80007ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007ee:	4b0f      	ldr	r3, [pc, #60]	; (800082c <HAL_MspInit+0x44>)
 80007f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80007f2:	4a0e      	ldr	r2, [pc, #56]	; (800082c <HAL_MspInit+0x44>)
 80007f4:	f043 0301 	orr.w	r3, r3, #1
 80007f8:	6613      	str	r3, [r2, #96]	; 0x60
 80007fa:	4b0c      	ldr	r3, [pc, #48]	; (800082c <HAL_MspInit+0x44>)
 80007fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80007fe:	f003 0301 	and.w	r3, r3, #1
 8000802:	607b      	str	r3, [r7, #4]
 8000804:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000806:	4b09      	ldr	r3, [pc, #36]	; (800082c <HAL_MspInit+0x44>)
 8000808:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800080a:	4a08      	ldr	r2, [pc, #32]	; (800082c <HAL_MspInit+0x44>)
 800080c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000810:	6593      	str	r3, [r2, #88]	; 0x58
 8000812:	4b06      	ldr	r3, [pc, #24]	; (800082c <HAL_MspInit+0x44>)
 8000814:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000816:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800081a:	603b      	str	r3, [r7, #0]
 800081c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800081e:	bf00      	nop
 8000820:	370c      	adds	r7, #12
 8000822:	46bd      	mov	sp, r7
 8000824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000828:	4770      	bx	lr
 800082a:	bf00      	nop
 800082c:	40021000 	.word	0x40021000

08000830 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	b08a      	sub	sp, #40	; 0x28
 8000834:	af00      	add	r7, sp, #0
 8000836:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000838:	f107 0314 	add.w	r3, r7, #20
 800083c:	2200      	movs	r2, #0
 800083e:	601a      	str	r2, [r3, #0]
 8000840:	605a      	str	r2, [r3, #4]
 8000842:	609a      	str	r2, [r3, #8]
 8000844:	60da      	str	r2, [r3, #12]
 8000846:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 8000848:	687b      	ldr	r3, [r7, #4]
 800084a:	681b      	ldr	r3, [r3, #0]
 800084c:	4a1f      	ldr	r2, [pc, #124]	; (80008cc <HAL_I2C_MspInit+0x9c>)
 800084e:	4293      	cmp	r3, r2
 8000850:	d138      	bne.n	80008c4 <HAL_I2C_MspInit+0x94>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000852:	4b1f      	ldr	r3, [pc, #124]	; (80008d0 <HAL_I2C_MspInit+0xa0>)
 8000854:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000856:	4a1e      	ldr	r2, [pc, #120]	; (80008d0 <HAL_I2C_MspInit+0xa0>)
 8000858:	f043 0302 	orr.w	r3, r3, #2
 800085c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800085e:	4b1c      	ldr	r3, [pc, #112]	; (80008d0 <HAL_I2C_MspInit+0xa0>)
 8000860:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000862:	f003 0302 	and.w	r3, r3, #2
 8000866:	613b      	str	r3, [r7, #16]
 8000868:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800086a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800086e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000870:	2312      	movs	r3, #18
 8000872:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000874:	2301      	movs	r3, #1
 8000876:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000878:	2303      	movs	r3, #3
 800087a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800087c:	2304      	movs	r3, #4
 800087e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000880:	f107 0314 	add.w	r3, r7, #20
 8000884:	4619      	mov	r1, r3
 8000886:	4813      	ldr	r0, [pc, #76]	; (80008d4 <HAL_I2C_MspInit+0xa4>)
 8000888:	f000 fae2 	bl	8000e50 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 800088c:	4b10      	ldr	r3, [pc, #64]	; (80008d0 <HAL_I2C_MspInit+0xa0>)
 800088e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000890:	4a0f      	ldr	r2, [pc, #60]	; (80008d0 <HAL_I2C_MspInit+0xa0>)
 8000892:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000896:	6593      	str	r3, [r2, #88]	; 0x58
 8000898:	4b0d      	ldr	r3, [pc, #52]	; (80008d0 <HAL_I2C_MspInit+0xa0>)
 800089a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800089c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80008a0:	60fb      	str	r3, [r7, #12]
 80008a2:	68fb      	ldr	r3, [r7, #12]
    /* I2C2 interrupt Init */
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 0, 0);
 80008a4:	2200      	movs	r2, #0
 80008a6:	2100      	movs	r1, #0
 80008a8:	2021      	movs	r0, #33	; 0x21
 80008aa:	f000 fa4c 	bl	8000d46 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 80008ae:	2021      	movs	r0, #33	; 0x21
 80008b0:	f000 fa65 	bl	8000d7e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C2_ER_IRQn, 0, 0);
 80008b4:	2200      	movs	r2, #0
 80008b6:	2100      	movs	r1, #0
 80008b8:	2022      	movs	r0, #34	; 0x22
 80008ba:	f000 fa44 	bl	8000d46 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_ER_IRQn);
 80008be:	2022      	movs	r0, #34	; 0x22
 80008c0:	f000 fa5d 	bl	8000d7e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 80008c4:	bf00      	nop
 80008c6:	3728      	adds	r7, #40	; 0x28
 80008c8:	46bd      	mov	sp, r7
 80008ca:	bd80      	pop	{r7, pc}
 80008cc:	40005800 	.word	0x40005800
 80008d0:	40021000 	.word	0x40021000
 80008d4:	48000400 	.word	0x48000400

080008d8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80008d8:	b580      	push	{r7, lr}
 80008da:	b08a      	sub	sp, #40	; 0x28
 80008dc:	af00      	add	r7, sp, #0
 80008de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008e0:	f107 0314 	add.w	r3, r7, #20
 80008e4:	2200      	movs	r2, #0
 80008e6:	601a      	str	r2, [r3, #0]
 80008e8:	605a      	str	r2, [r3, #4]
 80008ea:	609a      	str	r2, [r3, #8]
 80008ec:	60da      	str	r2, [r3, #12]
 80008ee:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80008f0:	687b      	ldr	r3, [r7, #4]
 80008f2:	681b      	ldr	r3, [r3, #0]
 80008f4:	4a17      	ldr	r2, [pc, #92]	; (8000954 <HAL_UART_MspInit+0x7c>)
 80008f6:	4293      	cmp	r3, r2
 80008f8:	d128      	bne.n	800094c <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80008fa:	4b17      	ldr	r3, [pc, #92]	; (8000958 <HAL_UART_MspInit+0x80>)
 80008fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80008fe:	4a16      	ldr	r2, [pc, #88]	; (8000958 <HAL_UART_MspInit+0x80>)
 8000900:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000904:	6593      	str	r3, [r2, #88]	; 0x58
 8000906:	4b14      	ldr	r3, [pc, #80]	; (8000958 <HAL_UART_MspInit+0x80>)
 8000908:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800090a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800090e:	613b      	str	r3, [r7, #16]
 8000910:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000912:	4b11      	ldr	r3, [pc, #68]	; (8000958 <HAL_UART_MspInit+0x80>)
 8000914:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000916:	4a10      	ldr	r2, [pc, #64]	; (8000958 <HAL_UART_MspInit+0x80>)
 8000918:	f043 0301 	orr.w	r3, r3, #1
 800091c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800091e:	4b0e      	ldr	r3, [pc, #56]	; (8000958 <HAL_UART_MspInit+0x80>)
 8000920:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000922:	f003 0301 	and.w	r3, r3, #1
 8000926:	60fb      	str	r3, [r7, #12]
 8000928:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800092a:	230c      	movs	r3, #12
 800092c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800092e:	2302      	movs	r3, #2
 8000930:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000932:	2300      	movs	r3, #0
 8000934:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000936:	2303      	movs	r3, #3
 8000938:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800093a:	2307      	movs	r3, #7
 800093c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800093e:	f107 0314 	add.w	r3, r7, #20
 8000942:	4619      	mov	r1, r3
 8000944:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000948:	f000 fa82 	bl	8000e50 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800094c:	bf00      	nop
 800094e:	3728      	adds	r7, #40	; 0x28
 8000950:	46bd      	mov	sp, r7
 8000952:	bd80      	pop	{r7, pc}
 8000954:	40004400 	.word	0x40004400
 8000958:	40021000 	.word	0x40021000

0800095c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800095c:	b480      	push	{r7}
 800095e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000960:	e7fe      	b.n	8000960 <NMI_Handler+0x4>

08000962 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000962:	b480      	push	{r7}
 8000964:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000966:	e7fe      	b.n	8000966 <HardFault_Handler+0x4>

08000968 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000968:	b480      	push	{r7}
 800096a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800096c:	e7fe      	b.n	800096c <MemManage_Handler+0x4>

0800096e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800096e:	b480      	push	{r7}
 8000970:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000972:	e7fe      	b.n	8000972 <BusFault_Handler+0x4>

08000974 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000974:	b480      	push	{r7}
 8000976:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000978:	e7fe      	b.n	8000978 <UsageFault_Handler+0x4>

0800097a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800097a:	b480      	push	{r7}
 800097c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800097e:	bf00      	nop
 8000980:	46bd      	mov	sp, r7
 8000982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000986:	4770      	bx	lr

08000988 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000988:	b480      	push	{r7}
 800098a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800098c:	bf00      	nop
 800098e:	46bd      	mov	sp, r7
 8000990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000994:	4770      	bx	lr

08000996 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000996:	b480      	push	{r7}
 8000998:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800099a:	bf00      	nop
 800099c:	46bd      	mov	sp, r7
 800099e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a2:	4770      	bx	lr

080009a4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009a8:	f000 f8d2 	bl	8000b50 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009ac:	bf00      	nop
 80009ae:	bd80      	pop	{r7, pc}

080009b0 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 80009b4:	2010      	movs	r0, #16
 80009b6:	f000 fc0b 	bl	80011d0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 80009ba:	bf00      	nop
 80009bc:	bd80      	pop	{r7, pc}
	...

080009c0 <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 event interrupt.
  */
void I2C2_EV_IRQHandler(void)
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 80009c4:	4802      	ldr	r0, [pc, #8]	; (80009d0 <I2C2_EV_IRQHandler+0x10>)
 80009c6:	f000 fe95 	bl	80016f4 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 80009ca:	bf00      	nop
 80009cc:	bd80      	pop	{r7, pc}
 80009ce:	bf00      	nop
 80009d0:	20000028 	.word	0x20000028

080009d4 <I2C2_ER_IRQHandler>:

/**
  * @brief This function handles I2C2 error interrupt.
  */
void I2C2_ER_IRQHandler(void)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_ER_IRQn 0 */

  /* USER CODE END I2C2_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c2);
 80009d8:	4802      	ldr	r0, [pc, #8]	; (80009e4 <I2C2_ER_IRQHandler+0x10>)
 80009da:	f000 fea5 	bl	8001728 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C2_ER_IRQn 1 */

  /* USER CODE END I2C2_ER_IRQn 1 */
}
 80009de:	bf00      	nop
 80009e0:	bd80      	pop	{r7, pc}
 80009e2:	bf00      	nop
 80009e4:	20000028 	.word	0x20000028

080009e8 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80009e8:	b480      	push	{r7}
 80009ea:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80009ec:	4b17      	ldr	r3, [pc, #92]	; (8000a4c <SystemInit+0x64>)
 80009ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80009f2:	4a16      	ldr	r2, [pc, #88]	; (8000a4c <SystemInit+0x64>)
 80009f4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80009f8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 80009fc:	4b14      	ldr	r3, [pc, #80]	; (8000a50 <SystemInit+0x68>)
 80009fe:	681b      	ldr	r3, [r3, #0]
 8000a00:	4a13      	ldr	r2, [pc, #76]	; (8000a50 <SystemInit+0x68>)
 8000a02:	f043 0301 	orr.w	r3, r3, #1
 8000a06:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8000a08:	4b11      	ldr	r3, [pc, #68]	; (8000a50 <SystemInit+0x68>)
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8000a0e:	4b10      	ldr	r3, [pc, #64]	; (8000a50 <SystemInit+0x68>)
 8000a10:	681b      	ldr	r3, [r3, #0]
 8000a12:	4a0f      	ldr	r2, [pc, #60]	; (8000a50 <SystemInit+0x68>)
 8000a14:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8000a18:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8000a1c:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8000a1e:	4b0c      	ldr	r3, [pc, #48]	; (8000a50 <SystemInit+0x68>)
 8000a20:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000a24:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000a26:	4b0a      	ldr	r3, [pc, #40]	; (8000a50 <SystemInit+0x68>)
 8000a28:	681b      	ldr	r3, [r3, #0]
 8000a2a:	4a09      	ldr	r2, [pc, #36]	; (8000a50 <SystemInit+0x68>)
 8000a2c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000a30:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8000a32:	4b07      	ldr	r3, [pc, #28]	; (8000a50 <SystemInit+0x68>)
 8000a34:	2200      	movs	r2, #0
 8000a36:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000a38:	4b04      	ldr	r3, [pc, #16]	; (8000a4c <SystemInit+0x64>)
 8000a3a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000a3e:	609a      	str	r2, [r3, #8]
#endif
}
 8000a40:	bf00      	nop
 8000a42:	46bd      	mov	sp, r7
 8000a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a48:	4770      	bx	lr
 8000a4a:	bf00      	nop
 8000a4c:	e000ed00 	.word	0xe000ed00
 8000a50:	40021000 	.word	0x40021000

08000a54 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000a54:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000a8c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000a58:	f7ff ffc6 	bl	80009e8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000a5c:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000a5e:	e003      	b.n	8000a68 <LoopCopyDataInit>

08000a60 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000a60:	4b0b      	ldr	r3, [pc, #44]	; (8000a90 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8000a62:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000a64:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000a66:	3104      	adds	r1, #4

08000a68 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000a68:	480a      	ldr	r0, [pc, #40]	; (8000a94 <LoopForever+0xa>)
	ldr	r3, =_edata
 8000a6a:	4b0b      	ldr	r3, [pc, #44]	; (8000a98 <LoopForever+0xe>)
	adds	r2, r0, r1
 8000a6c:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000a6e:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000a70:	d3f6      	bcc.n	8000a60 <CopyDataInit>
	ldr	r2, =_sbss
 8000a72:	4a0a      	ldr	r2, [pc, #40]	; (8000a9c <LoopForever+0x12>)
	b	LoopFillZerobss
 8000a74:	e002      	b.n	8000a7c <LoopFillZerobss>

08000a76 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000a76:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000a78:	f842 3b04 	str.w	r3, [r2], #4

08000a7c <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000a7c:	4b08      	ldr	r3, [pc, #32]	; (8000aa0 <LoopForever+0x16>)
	cmp	r2, r3
 8000a7e:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000a80:	d3f9      	bcc.n	8000a76 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000a82:	f003 fdef 	bl	8004664 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000a86:	f7ff fd33 	bl	80004f0 <main>

08000a8a <LoopForever>:

LoopForever:
    b LoopForever
 8000a8a:	e7fe      	b.n	8000a8a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000a8c:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8000a90:	0800477c 	.word	0x0800477c
	ldr	r0, =_sdata
 8000a94:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000a98:	2000000c 	.word	0x2000000c
	ldr	r2, =_sbss
 8000a9c:	2000000c 	.word	0x2000000c
	ldr	r3, = _ebss
 8000aa0:	200000f8 	.word	0x200000f8

08000aa4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000aa4:	e7fe      	b.n	8000aa4 <ADC1_2_IRQHandler>

08000aa6 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000aa6:	b580      	push	{r7, lr}
 8000aa8:	b082      	sub	sp, #8
 8000aaa:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000aac:	2300      	movs	r3, #0
 8000aae:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ab0:	2003      	movs	r0, #3
 8000ab2:	f000 f93d 	bl	8000d30 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000ab6:	2000      	movs	r0, #0
 8000ab8:	f000 f80e 	bl	8000ad8 <HAL_InitTick>
 8000abc:	4603      	mov	r3, r0
 8000abe:	2b00      	cmp	r3, #0
 8000ac0:	d002      	beq.n	8000ac8 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000ac2:	2301      	movs	r3, #1
 8000ac4:	71fb      	strb	r3, [r7, #7]
 8000ac6:	e001      	b.n	8000acc <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000ac8:	f7ff fe8e 	bl	80007e8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000acc:	79fb      	ldrb	r3, [r7, #7]
}
 8000ace:	4618      	mov	r0, r3
 8000ad0:	3708      	adds	r7, #8
 8000ad2:	46bd      	mov	sp, r7
 8000ad4:	bd80      	pop	{r7, pc}
	...

08000ad8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	b084      	sub	sp, #16
 8000adc:	af00      	add	r7, sp, #0
 8000ade:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000ae0:	2300      	movs	r3, #0
 8000ae2:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000ae4:	4b17      	ldr	r3, [pc, #92]	; (8000b44 <HAL_InitTick+0x6c>)
 8000ae6:	781b      	ldrb	r3, [r3, #0]
 8000ae8:	2b00      	cmp	r3, #0
 8000aea:	d023      	beq.n	8000b34 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000aec:	4b16      	ldr	r3, [pc, #88]	; (8000b48 <HAL_InitTick+0x70>)
 8000aee:	681a      	ldr	r2, [r3, #0]
 8000af0:	4b14      	ldr	r3, [pc, #80]	; (8000b44 <HAL_InitTick+0x6c>)
 8000af2:	781b      	ldrb	r3, [r3, #0]
 8000af4:	4619      	mov	r1, r3
 8000af6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000afa:	fbb3 f3f1 	udiv	r3, r3, r1
 8000afe:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b02:	4618      	mov	r0, r3
 8000b04:	f000 f949 	bl	8000d9a <HAL_SYSTICK_Config>
 8000b08:	4603      	mov	r3, r0
 8000b0a:	2b00      	cmp	r3, #0
 8000b0c:	d10f      	bne.n	8000b2e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	2b0f      	cmp	r3, #15
 8000b12:	d809      	bhi.n	8000b28 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b14:	2200      	movs	r2, #0
 8000b16:	6879      	ldr	r1, [r7, #4]
 8000b18:	f04f 30ff 	mov.w	r0, #4294967295
 8000b1c:	f000 f913 	bl	8000d46 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000b20:	4a0a      	ldr	r2, [pc, #40]	; (8000b4c <HAL_InitTick+0x74>)
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	6013      	str	r3, [r2, #0]
 8000b26:	e007      	b.n	8000b38 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000b28:	2301      	movs	r3, #1
 8000b2a:	73fb      	strb	r3, [r7, #15]
 8000b2c:	e004      	b.n	8000b38 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000b2e:	2301      	movs	r3, #1
 8000b30:	73fb      	strb	r3, [r7, #15]
 8000b32:	e001      	b.n	8000b38 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000b34:	2301      	movs	r3, #1
 8000b36:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000b38:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b3a:	4618      	mov	r0, r3
 8000b3c:	3710      	adds	r7, #16
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	bd80      	pop	{r7, pc}
 8000b42:	bf00      	nop
 8000b44:	20000008 	.word	0x20000008
 8000b48:	20000000 	.word	0x20000000
 8000b4c:	20000004 	.word	0x20000004

08000b50 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b50:	b480      	push	{r7}
 8000b52:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000b54:	4b06      	ldr	r3, [pc, #24]	; (8000b70 <HAL_IncTick+0x20>)
 8000b56:	781b      	ldrb	r3, [r3, #0]
 8000b58:	461a      	mov	r2, r3
 8000b5a:	4b06      	ldr	r3, [pc, #24]	; (8000b74 <HAL_IncTick+0x24>)
 8000b5c:	681b      	ldr	r3, [r3, #0]
 8000b5e:	4413      	add	r3, r2
 8000b60:	4a04      	ldr	r2, [pc, #16]	; (8000b74 <HAL_IncTick+0x24>)
 8000b62:	6013      	str	r3, [r2, #0]
}
 8000b64:	bf00      	nop
 8000b66:	46bd      	mov	sp, r7
 8000b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b6c:	4770      	bx	lr
 8000b6e:	bf00      	nop
 8000b70:	20000008 	.word	0x20000008
 8000b74:	200000f4 	.word	0x200000f4

08000b78 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b78:	b480      	push	{r7}
 8000b7a:	af00      	add	r7, sp, #0
  return uwTick;
 8000b7c:	4b03      	ldr	r3, [pc, #12]	; (8000b8c <HAL_GetTick+0x14>)
 8000b7e:	681b      	ldr	r3, [r3, #0]
}
 8000b80:	4618      	mov	r0, r3
 8000b82:	46bd      	mov	sp, r7
 8000b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b88:	4770      	bx	lr
 8000b8a:	bf00      	nop
 8000b8c:	200000f4 	.word	0x200000f4

08000b90 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b90:	b480      	push	{r7}
 8000b92:	b085      	sub	sp, #20
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	f003 0307 	and.w	r3, r3, #7
 8000b9e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ba0:	4b0c      	ldr	r3, [pc, #48]	; (8000bd4 <__NVIC_SetPriorityGrouping+0x44>)
 8000ba2:	68db      	ldr	r3, [r3, #12]
 8000ba4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ba6:	68ba      	ldr	r2, [r7, #8]
 8000ba8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000bac:	4013      	ands	r3, r2
 8000bae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000bb0:	68fb      	ldr	r3, [r7, #12]
 8000bb2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000bb4:	68bb      	ldr	r3, [r7, #8]
 8000bb6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000bb8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000bbc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000bc0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000bc2:	4a04      	ldr	r2, [pc, #16]	; (8000bd4 <__NVIC_SetPriorityGrouping+0x44>)
 8000bc4:	68bb      	ldr	r3, [r7, #8]
 8000bc6:	60d3      	str	r3, [r2, #12]
}
 8000bc8:	bf00      	nop
 8000bca:	3714      	adds	r7, #20
 8000bcc:	46bd      	mov	sp, r7
 8000bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd2:	4770      	bx	lr
 8000bd4:	e000ed00 	.word	0xe000ed00

08000bd8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000bd8:	b480      	push	{r7}
 8000bda:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000bdc:	4b04      	ldr	r3, [pc, #16]	; (8000bf0 <__NVIC_GetPriorityGrouping+0x18>)
 8000bde:	68db      	ldr	r3, [r3, #12]
 8000be0:	0a1b      	lsrs	r3, r3, #8
 8000be2:	f003 0307 	and.w	r3, r3, #7
}
 8000be6:	4618      	mov	r0, r3
 8000be8:	46bd      	mov	sp, r7
 8000bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bee:	4770      	bx	lr
 8000bf0:	e000ed00 	.word	0xe000ed00

08000bf4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000bf4:	b480      	push	{r7}
 8000bf6:	b083      	sub	sp, #12
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	4603      	mov	r3, r0
 8000bfc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bfe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	db0b      	blt.n	8000c1e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c06:	79fb      	ldrb	r3, [r7, #7]
 8000c08:	f003 021f 	and.w	r2, r3, #31
 8000c0c:	4907      	ldr	r1, [pc, #28]	; (8000c2c <__NVIC_EnableIRQ+0x38>)
 8000c0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c12:	095b      	lsrs	r3, r3, #5
 8000c14:	2001      	movs	r0, #1
 8000c16:	fa00 f202 	lsl.w	r2, r0, r2
 8000c1a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000c1e:	bf00      	nop
 8000c20:	370c      	adds	r7, #12
 8000c22:	46bd      	mov	sp, r7
 8000c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c28:	4770      	bx	lr
 8000c2a:	bf00      	nop
 8000c2c:	e000e100 	.word	0xe000e100

08000c30 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c30:	b480      	push	{r7}
 8000c32:	b083      	sub	sp, #12
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	4603      	mov	r3, r0
 8000c38:	6039      	str	r1, [r7, #0]
 8000c3a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c3c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	db0a      	blt.n	8000c5a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c44:	683b      	ldr	r3, [r7, #0]
 8000c46:	b2da      	uxtb	r2, r3
 8000c48:	490c      	ldr	r1, [pc, #48]	; (8000c7c <__NVIC_SetPriority+0x4c>)
 8000c4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c4e:	0112      	lsls	r2, r2, #4
 8000c50:	b2d2      	uxtb	r2, r2
 8000c52:	440b      	add	r3, r1
 8000c54:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c58:	e00a      	b.n	8000c70 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c5a:	683b      	ldr	r3, [r7, #0]
 8000c5c:	b2da      	uxtb	r2, r3
 8000c5e:	4908      	ldr	r1, [pc, #32]	; (8000c80 <__NVIC_SetPriority+0x50>)
 8000c60:	79fb      	ldrb	r3, [r7, #7]
 8000c62:	f003 030f 	and.w	r3, r3, #15
 8000c66:	3b04      	subs	r3, #4
 8000c68:	0112      	lsls	r2, r2, #4
 8000c6a:	b2d2      	uxtb	r2, r2
 8000c6c:	440b      	add	r3, r1
 8000c6e:	761a      	strb	r2, [r3, #24]
}
 8000c70:	bf00      	nop
 8000c72:	370c      	adds	r7, #12
 8000c74:	46bd      	mov	sp, r7
 8000c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c7a:	4770      	bx	lr
 8000c7c:	e000e100 	.word	0xe000e100
 8000c80:	e000ed00 	.word	0xe000ed00

08000c84 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c84:	b480      	push	{r7}
 8000c86:	b089      	sub	sp, #36	; 0x24
 8000c88:	af00      	add	r7, sp, #0
 8000c8a:	60f8      	str	r0, [r7, #12]
 8000c8c:	60b9      	str	r1, [r7, #8]
 8000c8e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c90:	68fb      	ldr	r3, [r7, #12]
 8000c92:	f003 0307 	and.w	r3, r3, #7
 8000c96:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c98:	69fb      	ldr	r3, [r7, #28]
 8000c9a:	f1c3 0307 	rsb	r3, r3, #7
 8000c9e:	2b04      	cmp	r3, #4
 8000ca0:	bf28      	it	cs
 8000ca2:	2304      	movcs	r3, #4
 8000ca4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ca6:	69fb      	ldr	r3, [r7, #28]
 8000ca8:	3304      	adds	r3, #4
 8000caa:	2b06      	cmp	r3, #6
 8000cac:	d902      	bls.n	8000cb4 <NVIC_EncodePriority+0x30>
 8000cae:	69fb      	ldr	r3, [r7, #28]
 8000cb0:	3b03      	subs	r3, #3
 8000cb2:	e000      	b.n	8000cb6 <NVIC_EncodePriority+0x32>
 8000cb4:	2300      	movs	r3, #0
 8000cb6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cb8:	f04f 32ff 	mov.w	r2, #4294967295
 8000cbc:	69bb      	ldr	r3, [r7, #24]
 8000cbe:	fa02 f303 	lsl.w	r3, r2, r3
 8000cc2:	43da      	mvns	r2, r3
 8000cc4:	68bb      	ldr	r3, [r7, #8]
 8000cc6:	401a      	ands	r2, r3
 8000cc8:	697b      	ldr	r3, [r7, #20]
 8000cca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ccc:	f04f 31ff 	mov.w	r1, #4294967295
 8000cd0:	697b      	ldr	r3, [r7, #20]
 8000cd2:	fa01 f303 	lsl.w	r3, r1, r3
 8000cd6:	43d9      	mvns	r1, r3
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cdc:	4313      	orrs	r3, r2
         );
}
 8000cde:	4618      	mov	r0, r3
 8000ce0:	3724      	adds	r7, #36	; 0x24
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce8:	4770      	bx	lr
	...

08000cec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	b082      	sub	sp, #8
 8000cf0:	af00      	add	r7, sp, #0
 8000cf2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	3b01      	subs	r3, #1
 8000cf8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000cfc:	d301      	bcc.n	8000d02 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000cfe:	2301      	movs	r3, #1
 8000d00:	e00f      	b.n	8000d22 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d02:	4a0a      	ldr	r2, [pc, #40]	; (8000d2c <SysTick_Config+0x40>)
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	3b01      	subs	r3, #1
 8000d08:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d0a:	210f      	movs	r1, #15
 8000d0c:	f04f 30ff 	mov.w	r0, #4294967295
 8000d10:	f7ff ff8e 	bl	8000c30 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d14:	4b05      	ldr	r3, [pc, #20]	; (8000d2c <SysTick_Config+0x40>)
 8000d16:	2200      	movs	r2, #0
 8000d18:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d1a:	4b04      	ldr	r3, [pc, #16]	; (8000d2c <SysTick_Config+0x40>)
 8000d1c:	2207      	movs	r2, #7
 8000d1e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d20:	2300      	movs	r3, #0
}
 8000d22:	4618      	mov	r0, r3
 8000d24:	3708      	adds	r7, #8
 8000d26:	46bd      	mov	sp, r7
 8000d28:	bd80      	pop	{r7, pc}
 8000d2a:	bf00      	nop
 8000d2c:	e000e010 	.word	0xe000e010

08000d30 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	b082      	sub	sp, #8
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d38:	6878      	ldr	r0, [r7, #4]
 8000d3a:	f7ff ff29 	bl	8000b90 <__NVIC_SetPriorityGrouping>
}
 8000d3e:	bf00      	nop
 8000d40:	3708      	adds	r7, #8
 8000d42:	46bd      	mov	sp, r7
 8000d44:	bd80      	pop	{r7, pc}

08000d46 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d46:	b580      	push	{r7, lr}
 8000d48:	b086      	sub	sp, #24
 8000d4a:	af00      	add	r7, sp, #0
 8000d4c:	4603      	mov	r3, r0
 8000d4e:	60b9      	str	r1, [r7, #8]
 8000d50:	607a      	str	r2, [r7, #4]
 8000d52:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000d54:	2300      	movs	r3, #0
 8000d56:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000d58:	f7ff ff3e 	bl	8000bd8 <__NVIC_GetPriorityGrouping>
 8000d5c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d5e:	687a      	ldr	r2, [r7, #4]
 8000d60:	68b9      	ldr	r1, [r7, #8]
 8000d62:	6978      	ldr	r0, [r7, #20]
 8000d64:	f7ff ff8e 	bl	8000c84 <NVIC_EncodePriority>
 8000d68:	4602      	mov	r2, r0
 8000d6a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d6e:	4611      	mov	r1, r2
 8000d70:	4618      	mov	r0, r3
 8000d72:	f7ff ff5d 	bl	8000c30 <__NVIC_SetPriority>
}
 8000d76:	bf00      	nop
 8000d78:	3718      	adds	r7, #24
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	bd80      	pop	{r7, pc}

08000d7e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d7e:	b580      	push	{r7, lr}
 8000d80:	b082      	sub	sp, #8
 8000d82:	af00      	add	r7, sp, #0
 8000d84:	4603      	mov	r3, r0
 8000d86:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000d88:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d8c:	4618      	mov	r0, r3
 8000d8e:	f7ff ff31 	bl	8000bf4 <__NVIC_EnableIRQ>
}
 8000d92:	bf00      	nop
 8000d94:	3708      	adds	r7, #8
 8000d96:	46bd      	mov	sp, r7
 8000d98:	bd80      	pop	{r7, pc}

08000d9a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d9a:	b580      	push	{r7, lr}
 8000d9c:	b082      	sub	sp, #8
 8000d9e:	af00      	add	r7, sp, #0
 8000da0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000da2:	6878      	ldr	r0, [r7, #4]
 8000da4:	f7ff ffa2 	bl	8000cec <SysTick_Config>
 8000da8:	4603      	mov	r3, r0
}
 8000daa:	4618      	mov	r0, r3
 8000dac:	3708      	adds	r7, #8
 8000dae:	46bd      	mov	sp, r7
 8000db0:	bd80      	pop	{r7, pc}

08000db2 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000db2:	b580      	push	{r7, lr}
 8000db4:	b084      	sub	sp, #16
 8000db6:	af00      	add	r7, sp, #0
 8000db8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000dba:	2300      	movs	r3, #0
 8000dbc:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8000dc4:	b2db      	uxtb	r3, r3
 8000dc6:	2b02      	cmp	r3, #2
 8000dc8:	d005      	beq.n	8000dd6 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	2204      	movs	r2, #4
 8000dce:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8000dd0:	2301      	movs	r3, #1
 8000dd2:	73fb      	strb	r3, [r7, #15]
 8000dd4:	e029      	b.n	8000e2a <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	681b      	ldr	r3, [r3, #0]
 8000dda:	681a      	ldr	r2, [r3, #0]
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	f022 020e 	bic.w	r2, r2, #14
 8000de4:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	681a      	ldr	r2, [r3, #0]
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	f022 0201 	bic.w	r2, r2, #1
 8000df4:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dfa:	f003 021c 	and.w	r2, r3, #28
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e02:	2101      	movs	r1, #1
 8000e04:	fa01 f202 	lsl.w	r2, r1, r2
 8000e08:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	2201      	movs	r2, #1
 8000e0e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	2200      	movs	r2, #0
 8000e16:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	d003      	beq.n	8000e2a <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000e26:	6878      	ldr	r0, [r7, #4]
 8000e28:	4798      	blx	r3
    }
  }
  return status;
 8000e2a:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e2c:	4618      	mov	r0, r3
 8000e2e:	3710      	adds	r7, #16
 8000e30:	46bd      	mov	sp, r7
 8000e32:	bd80      	pop	{r7, pc}

08000e34 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8000e34:	b480      	push	{r7}
 8000e36:	b083      	sub	sp, #12
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8000e42:	b2db      	uxtb	r3, r3
}
 8000e44:	4618      	mov	r0, r3
 8000e46:	370c      	adds	r7, #12
 8000e48:	46bd      	mov	sp, r7
 8000e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e4e:	4770      	bx	lr

08000e50 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e50:	b480      	push	{r7}
 8000e52:	b087      	sub	sp, #28
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	6078      	str	r0, [r7, #4]
 8000e58:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e5e:	e17f      	b.n	8001160 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000e60:	683b      	ldr	r3, [r7, #0]
 8000e62:	681a      	ldr	r2, [r3, #0]
 8000e64:	2101      	movs	r1, #1
 8000e66:	697b      	ldr	r3, [r7, #20]
 8000e68:	fa01 f303 	lsl.w	r3, r1, r3
 8000e6c:	4013      	ands	r3, r2
 8000e6e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000e70:	68fb      	ldr	r3, [r7, #12]
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	f000 8171 	beq.w	800115a <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000e78:	683b      	ldr	r3, [r7, #0]
 8000e7a:	685b      	ldr	r3, [r3, #4]
 8000e7c:	2b01      	cmp	r3, #1
 8000e7e:	d00b      	beq.n	8000e98 <HAL_GPIO_Init+0x48>
 8000e80:	683b      	ldr	r3, [r7, #0]
 8000e82:	685b      	ldr	r3, [r3, #4]
 8000e84:	2b02      	cmp	r3, #2
 8000e86:	d007      	beq.n	8000e98 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000e88:	683b      	ldr	r3, [r7, #0]
 8000e8a:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000e8c:	2b11      	cmp	r3, #17
 8000e8e:	d003      	beq.n	8000e98 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000e90:	683b      	ldr	r3, [r7, #0]
 8000e92:	685b      	ldr	r3, [r3, #4]
 8000e94:	2b12      	cmp	r3, #18
 8000e96:	d130      	bne.n	8000efa <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	689b      	ldr	r3, [r3, #8]
 8000e9c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000e9e:	697b      	ldr	r3, [r7, #20]
 8000ea0:	005b      	lsls	r3, r3, #1
 8000ea2:	2203      	movs	r2, #3
 8000ea4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ea8:	43db      	mvns	r3, r3
 8000eaa:	693a      	ldr	r2, [r7, #16]
 8000eac:	4013      	ands	r3, r2
 8000eae:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000eb0:	683b      	ldr	r3, [r7, #0]
 8000eb2:	68da      	ldr	r2, [r3, #12]
 8000eb4:	697b      	ldr	r3, [r7, #20]
 8000eb6:	005b      	lsls	r3, r3, #1
 8000eb8:	fa02 f303 	lsl.w	r3, r2, r3
 8000ebc:	693a      	ldr	r2, [r7, #16]
 8000ebe:	4313      	orrs	r3, r2
 8000ec0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	693a      	ldr	r2, [r7, #16]
 8000ec6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	685b      	ldr	r3, [r3, #4]
 8000ecc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000ece:	2201      	movs	r2, #1
 8000ed0:	697b      	ldr	r3, [r7, #20]
 8000ed2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ed6:	43db      	mvns	r3, r3
 8000ed8:	693a      	ldr	r2, [r7, #16]
 8000eda:	4013      	ands	r3, r2
 8000edc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8000ede:	683b      	ldr	r3, [r7, #0]
 8000ee0:	685b      	ldr	r3, [r3, #4]
 8000ee2:	091b      	lsrs	r3, r3, #4
 8000ee4:	f003 0201 	and.w	r2, r3, #1
 8000ee8:	697b      	ldr	r3, [r7, #20]
 8000eea:	fa02 f303 	lsl.w	r3, r2, r3
 8000eee:	693a      	ldr	r2, [r7, #16]
 8000ef0:	4313      	orrs	r3, r2
 8000ef2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	693a      	ldr	r2, [r7, #16]
 8000ef8:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8000efa:	683b      	ldr	r3, [r7, #0]
 8000efc:	685b      	ldr	r3, [r3, #4]
 8000efe:	f003 0303 	and.w	r3, r3, #3
 8000f02:	2b03      	cmp	r3, #3
 8000f04:	d118      	bne.n	8000f38 <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f0a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8000f0c:	2201      	movs	r2, #1
 8000f0e:	697b      	ldr	r3, [r7, #20]
 8000f10:	fa02 f303 	lsl.w	r3, r2, r3
 8000f14:	43db      	mvns	r3, r3
 8000f16:	693a      	ldr	r2, [r7, #16]
 8000f18:	4013      	ands	r3, r2
 8000f1a:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8000f1c:	683b      	ldr	r3, [r7, #0]
 8000f1e:	685b      	ldr	r3, [r3, #4]
 8000f20:	08db      	lsrs	r3, r3, #3
 8000f22:	f003 0201 	and.w	r2, r3, #1
 8000f26:	697b      	ldr	r3, [r7, #20]
 8000f28:	fa02 f303 	lsl.w	r3, r2, r3
 8000f2c:	693a      	ldr	r2, [r7, #16]
 8000f2e:	4313      	orrs	r3, r2
 8000f30:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	693a      	ldr	r2, [r7, #16]
 8000f36:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	68db      	ldr	r3, [r3, #12]
 8000f3c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8000f3e:	697b      	ldr	r3, [r7, #20]
 8000f40:	005b      	lsls	r3, r3, #1
 8000f42:	2203      	movs	r2, #3
 8000f44:	fa02 f303 	lsl.w	r3, r2, r3
 8000f48:	43db      	mvns	r3, r3
 8000f4a:	693a      	ldr	r2, [r7, #16]
 8000f4c:	4013      	ands	r3, r2
 8000f4e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000f50:	683b      	ldr	r3, [r7, #0]
 8000f52:	689a      	ldr	r2, [r3, #8]
 8000f54:	697b      	ldr	r3, [r7, #20]
 8000f56:	005b      	lsls	r3, r3, #1
 8000f58:	fa02 f303 	lsl.w	r3, r2, r3
 8000f5c:	693a      	ldr	r2, [r7, #16]
 8000f5e:	4313      	orrs	r3, r2
 8000f60:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	693a      	ldr	r2, [r7, #16]
 8000f66:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000f68:	683b      	ldr	r3, [r7, #0]
 8000f6a:	685b      	ldr	r3, [r3, #4]
 8000f6c:	2b02      	cmp	r3, #2
 8000f6e:	d003      	beq.n	8000f78 <HAL_GPIO_Init+0x128>
 8000f70:	683b      	ldr	r3, [r7, #0]
 8000f72:	685b      	ldr	r3, [r3, #4]
 8000f74:	2b12      	cmp	r3, #18
 8000f76:	d123      	bne.n	8000fc0 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000f78:	697b      	ldr	r3, [r7, #20]
 8000f7a:	08da      	lsrs	r2, r3, #3
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	3208      	adds	r2, #8
 8000f80:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f84:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000f86:	697b      	ldr	r3, [r7, #20]
 8000f88:	f003 0307 	and.w	r3, r3, #7
 8000f8c:	009b      	lsls	r3, r3, #2
 8000f8e:	220f      	movs	r2, #15
 8000f90:	fa02 f303 	lsl.w	r3, r2, r3
 8000f94:	43db      	mvns	r3, r3
 8000f96:	693a      	ldr	r2, [r7, #16]
 8000f98:	4013      	ands	r3, r2
 8000f9a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000f9c:	683b      	ldr	r3, [r7, #0]
 8000f9e:	691a      	ldr	r2, [r3, #16]
 8000fa0:	697b      	ldr	r3, [r7, #20]
 8000fa2:	f003 0307 	and.w	r3, r3, #7
 8000fa6:	009b      	lsls	r3, r3, #2
 8000fa8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fac:	693a      	ldr	r2, [r7, #16]
 8000fae:	4313      	orrs	r3, r2
 8000fb0:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000fb2:	697b      	ldr	r3, [r7, #20]
 8000fb4:	08da      	lsrs	r2, r3, #3
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	3208      	adds	r2, #8
 8000fba:	6939      	ldr	r1, [r7, #16]
 8000fbc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000fc6:	697b      	ldr	r3, [r7, #20]
 8000fc8:	005b      	lsls	r3, r3, #1
 8000fca:	2203      	movs	r2, #3
 8000fcc:	fa02 f303 	lsl.w	r3, r2, r3
 8000fd0:	43db      	mvns	r3, r3
 8000fd2:	693a      	ldr	r2, [r7, #16]
 8000fd4:	4013      	ands	r3, r2
 8000fd6:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000fd8:	683b      	ldr	r3, [r7, #0]
 8000fda:	685b      	ldr	r3, [r3, #4]
 8000fdc:	f003 0203 	and.w	r2, r3, #3
 8000fe0:	697b      	ldr	r3, [r7, #20]
 8000fe2:	005b      	lsls	r3, r3, #1
 8000fe4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fe8:	693a      	ldr	r2, [r7, #16]
 8000fea:	4313      	orrs	r3, r2
 8000fec:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	693a      	ldr	r2, [r7, #16]
 8000ff2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000ff4:	683b      	ldr	r3, [r7, #0]
 8000ff6:	685b      	ldr	r3, [r3, #4]
 8000ff8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	f000 80ac 	beq.w	800115a <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001002:	4b5e      	ldr	r3, [pc, #376]	; (800117c <HAL_GPIO_Init+0x32c>)
 8001004:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001006:	4a5d      	ldr	r2, [pc, #372]	; (800117c <HAL_GPIO_Init+0x32c>)
 8001008:	f043 0301 	orr.w	r3, r3, #1
 800100c:	6613      	str	r3, [r2, #96]	; 0x60
 800100e:	4b5b      	ldr	r3, [pc, #364]	; (800117c <HAL_GPIO_Init+0x32c>)
 8001010:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001012:	f003 0301 	and.w	r3, r3, #1
 8001016:	60bb      	str	r3, [r7, #8]
 8001018:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800101a:	4a59      	ldr	r2, [pc, #356]	; (8001180 <HAL_GPIO_Init+0x330>)
 800101c:	697b      	ldr	r3, [r7, #20]
 800101e:	089b      	lsrs	r3, r3, #2
 8001020:	3302      	adds	r3, #2
 8001022:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001026:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001028:	697b      	ldr	r3, [r7, #20]
 800102a:	f003 0303 	and.w	r3, r3, #3
 800102e:	009b      	lsls	r3, r3, #2
 8001030:	220f      	movs	r2, #15
 8001032:	fa02 f303 	lsl.w	r3, r2, r3
 8001036:	43db      	mvns	r3, r3
 8001038:	693a      	ldr	r2, [r7, #16]
 800103a:	4013      	ands	r3, r2
 800103c:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001044:	d025      	beq.n	8001092 <HAL_GPIO_Init+0x242>
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	4a4e      	ldr	r2, [pc, #312]	; (8001184 <HAL_GPIO_Init+0x334>)
 800104a:	4293      	cmp	r3, r2
 800104c:	d01f      	beq.n	800108e <HAL_GPIO_Init+0x23e>
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	4a4d      	ldr	r2, [pc, #308]	; (8001188 <HAL_GPIO_Init+0x338>)
 8001052:	4293      	cmp	r3, r2
 8001054:	d019      	beq.n	800108a <HAL_GPIO_Init+0x23a>
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	4a4c      	ldr	r2, [pc, #304]	; (800118c <HAL_GPIO_Init+0x33c>)
 800105a:	4293      	cmp	r3, r2
 800105c:	d013      	beq.n	8001086 <HAL_GPIO_Init+0x236>
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	4a4b      	ldr	r2, [pc, #300]	; (8001190 <HAL_GPIO_Init+0x340>)
 8001062:	4293      	cmp	r3, r2
 8001064:	d00d      	beq.n	8001082 <HAL_GPIO_Init+0x232>
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	4a4a      	ldr	r2, [pc, #296]	; (8001194 <HAL_GPIO_Init+0x344>)
 800106a:	4293      	cmp	r3, r2
 800106c:	d007      	beq.n	800107e <HAL_GPIO_Init+0x22e>
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	4a49      	ldr	r2, [pc, #292]	; (8001198 <HAL_GPIO_Init+0x348>)
 8001072:	4293      	cmp	r3, r2
 8001074:	d101      	bne.n	800107a <HAL_GPIO_Init+0x22a>
 8001076:	2306      	movs	r3, #6
 8001078:	e00c      	b.n	8001094 <HAL_GPIO_Init+0x244>
 800107a:	2307      	movs	r3, #7
 800107c:	e00a      	b.n	8001094 <HAL_GPIO_Init+0x244>
 800107e:	2305      	movs	r3, #5
 8001080:	e008      	b.n	8001094 <HAL_GPIO_Init+0x244>
 8001082:	2304      	movs	r3, #4
 8001084:	e006      	b.n	8001094 <HAL_GPIO_Init+0x244>
 8001086:	2303      	movs	r3, #3
 8001088:	e004      	b.n	8001094 <HAL_GPIO_Init+0x244>
 800108a:	2302      	movs	r3, #2
 800108c:	e002      	b.n	8001094 <HAL_GPIO_Init+0x244>
 800108e:	2301      	movs	r3, #1
 8001090:	e000      	b.n	8001094 <HAL_GPIO_Init+0x244>
 8001092:	2300      	movs	r3, #0
 8001094:	697a      	ldr	r2, [r7, #20]
 8001096:	f002 0203 	and.w	r2, r2, #3
 800109a:	0092      	lsls	r2, r2, #2
 800109c:	4093      	lsls	r3, r2
 800109e:	693a      	ldr	r2, [r7, #16]
 80010a0:	4313      	orrs	r3, r2
 80010a2:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80010a4:	4936      	ldr	r1, [pc, #216]	; (8001180 <HAL_GPIO_Init+0x330>)
 80010a6:	697b      	ldr	r3, [r7, #20]
 80010a8:	089b      	lsrs	r3, r3, #2
 80010aa:	3302      	adds	r3, #2
 80010ac:	693a      	ldr	r2, [r7, #16]
 80010ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80010b2:	4b3a      	ldr	r3, [pc, #232]	; (800119c <HAL_GPIO_Init+0x34c>)
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80010b8:	68fb      	ldr	r3, [r7, #12]
 80010ba:	43db      	mvns	r3, r3
 80010bc:	693a      	ldr	r2, [r7, #16]
 80010be:	4013      	ands	r3, r2
 80010c0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80010c2:	683b      	ldr	r3, [r7, #0]
 80010c4:	685b      	ldr	r3, [r3, #4]
 80010c6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d003      	beq.n	80010d6 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80010ce:	693a      	ldr	r2, [r7, #16]
 80010d0:	68fb      	ldr	r3, [r7, #12]
 80010d2:	4313      	orrs	r3, r2
 80010d4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80010d6:	4a31      	ldr	r2, [pc, #196]	; (800119c <HAL_GPIO_Init+0x34c>)
 80010d8:	693b      	ldr	r3, [r7, #16]
 80010da:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 80010dc:	4b2f      	ldr	r3, [pc, #188]	; (800119c <HAL_GPIO_Init+0x34c>)
 80010de:	685b      	ldr	r3, [r3, #4]
 80010e0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80010e2:	68fb      	ldr	r3, [r7, #12]
 80010e4:	43db      	mvns	r3, r3
 80010e6:	693a      	ldr	r2, [r7, #16]
 80010e8:	4013      	ands	r3, r2
 80010ea:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80010ec:	683b      	ldr	r3, [r7, #0]
 80010ee:	685b      	ldr	r3, [r3, #4]
 80010f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d003      	beq.n	8001100 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80010f8:	693a      	ldr	r2, [r7, #16]
 80010fa:	68fb      	ldr	r3, [r7, #12]
 80010fc:	4313      	orrs	r3, r2
 80010fe:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001100:	4a26      	ldr	r2, [pc, #152]	; (800119c <HAL_GPIO_Init+0x34c>)
 8001102:	693b      	ldr	r3, [r7, #16]
 8001104:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001106:	4b25      	ldr	r3, [pc, #148]	; (800119c <HAL_GPIO_Init+0x34c>)
 8001108:	689b      	ldr	r3, [r3, #8]
 800110a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800110c:	68fb      	ldr	r3, [r7, #12]
 800110e:	43db      	mvns	r3, r3
 8001110:	693a      	ldr	r2, [r7, #16]
 8001112:	4013      	ands	r3, r2
 8001114:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001116:	683b      	ldr	r3, [r7, #0]
 8001118:	685b      	ldr	r3, [r3, #4]
 800111a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800111e:	2b00      	cmp	r3, #0
 8001120:	d003      	beq.n	800112a <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001122:	693a      	ldr	r2, [r7, #16]
 8001124:	68fb      	ldr	r3, [r7, #12]
 8001126:	4313      	orrs	r3, r2
 8001128:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800112a:	4a1c      	ldr	r2, [pc, #112]	; (800119c <HAL_GPIO_Init+0x34c>)
 800112c:	693b      	ldr	r3, [r7, #16]
 800112e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001130:	4b1a      	ldr	r3, [pc, #104]	; (800119c <HAL_GPIO_Init+0x34c>)
 8001132:	68db      	ldr	r3, [r3, #12]
 8001134:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001136:	68fb      	ldr	r3, [r7, #12]
 8001138:	43db      	mvns	r3, r3
 800113a:	693a      	ldr	r2, [r7, #16]
 800113c:	4013      	ands	r3, r2
 800113e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001140:	683b      	ldr	r3, [r7, #0]
 8001142:	685b      	ldr	r3, [r3, #4]
 8001144:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001148:	2b00      	cmp	r3, #0
 800114a:	d003      	beq.n	8001154 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 800114c:	693a      	ldr	r2, [r7, #16]
 800114e:	68fb      	ldr	r3, [r7, #12]
 8001150:	4313      	orrs	r3, r2
 8001152:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001154:	4a11      	ldr	r2, [pc, #68]	; (800119c <HAL_GPIO_Init+0x34c>)
 8001156:	693b      	ldr	r3, [r7, #16]
 8001158:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 800115a:	697b      	ldr	r3, [r7, #20]
 800115c:	3301      	adds	r3, #1
 800115e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001160:	683b      	ldr	r3, [r7, #0]
 8001162:	681a      	ldr	r2, [r3, #0]
 8001164:	697b      	ldr	r3, [r7, #20]
 8001166:	fa22 f303 	lsr.w	r3, r2, r3
 800116a:	2b00      	cmp	r3, #0
 800116c:	f47f ae78 	bne.w	8000e60 <HAL_GPIO_Init+0x10>
  }
}
 8001170:	bf00      	nop
 8001172:	371c      	adds	r7, #28
 8001174:	46bd      	mov	sp, r7
 8001176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117a:	4770      	bx	lr
 800117c:	40021000 	.word	0x40021000
 8001180:	40010000 	.word	0x40010000
 8001184:	48000400 	.word	0x48000400
 8001188:	48000800 	.word	0x48000800
 800118c:	48000c00 	.word	0x48000c00
 8001190:	48001000 	.word	0x48001000
 8001194:	48001400 	.word	0x48001400
 8001198:	48001800 	.word	0x48001800
 800119c:	40010400 	.word	0x40010400

080011a0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80011a0:	b480      	push	{r7}
 80011a2:	b085      	sub	sp, #20
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	6078      	str	r0, [r7, #4]
 80011a8:	460b      	mov	r3, r1
 80011aa:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	691a      	ldr	r2, [r3, #16]
 80011b0:	887b      	ldrh	r3, [r7, #2]
 80011b2:	4013      	ands	r3, r2
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d002      	beq.n	80011be <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80011b8:	2301      	movs	r3, #1
 80011ba:	73fb      	strb	r3, [r7, #15]
 80011bc:	e001      	b.n	80011c2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80011be:	2300      	movs	r3, #0
 80011c0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80011c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80011c4:	4618      	mov	r0, r3
 80011c6:	3714      	adds	r7, #20
 80011c8:	46bd      	mov	sp, r7
 80011ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ce:	4770      	bx	lr

080011d0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b082      	sub	sp, #8
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	4603      	mov	r3, r0
 80011d8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80011da:	4b08      	ldr	r3, [pc, #32]	; (80011fc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80011dc:	695a      	ldr	r2, [r3, #20]
 80011de:	88fb      	ldrh	r3, [r7, #6]
 80011e0:	4013      	ands	r3, r2
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d006      	beq.n	80011f4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80011e6:	4a05      	ldr	r2, [pc, #20]	; (80011fc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80011e8:	88fb      	ldrh	r3, [r7, #6]
 80011ea:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80011ec:	88fb      	ldrh	r3, [r7, #6]
 80011ee:	4618      	mov	r0, r3
 80011f0:	f7ff f96a 	bl	80004c8 <HAL_GPIO_EXTI_Callback>
  }
}
 80011f4:	bf00      	nop
 80011f6:	3708      	adds	r7, #8
 80011f8:	46bd      	mov	sp, r7
 80011fa:	bd80      	pop	{r7, pc}
 80011fc:	40010400 	.word	0x40010400

08001200 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	b082      	sub	sp, #8
 8001204:	af00      	add	r7, sp, #0
 8001206:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	2b00      	cmp	r3, #0
 800120c:	d101      	bne.n	8001212 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800120e:	2301      	movs	r3, #1
 8001210:	e081      	b.n	8001316 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001218:	b2db      	uxtb	r3, r3
 800121a:	2b00      	cmp	r3, #0
 800121c:	d106      	bne.n	800122c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	2200      	movs	r2, #0
 8001222:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001226:	6878      	ldr	r0, [r7, #4]
 8001228:	f7ff fb02 	bl	8000830 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	2224      	movs	r2, #36	; 0x24
 8001230:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	681a      	ldr	r2, [r3, #0]
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	f022 0201 	bic.w	r2, r2, #1
 8001242:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	685a      	ldr	r2, [r3, #4]
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001250:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	689a      	ldr	r2, [r3, #8]
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001260:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	68db      	ldr	r3, [r3, #12]
 8001266:	2b01      	cmp	r3, #1
 8001268:	d107      	bne.n	800127a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	689a      	ldr	r2, [r3, #8]
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001276:	609a      	str	r2, [r3, #8]
 8001278:	e006      	b.n	8001288 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	689a      	ldr	r2, [r3, #8]
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8001286:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	68db      	ldr	r3, [r3, #12]
 800128c:	2b02      	cmp	r3, #2
 800128e:	d104      	bne.n	800129a <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001298:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	685b      	ldr	r3, [r3, #4]
 80012a0:	687a      	ldr	r2, [r7, #4]
 80012a2:	6812      	ldr	r2, [r2, #0]
 80012a4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80012a8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80012ac:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	68da      	ldr	r2, [r3, #12]
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80012bc:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	691a      	ldr	r2, [r3, #16]
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	695b      	ldr	r3, [r3, #20]
 80012c6:	ea42 0103 	orr.w	r1, r2, r3
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	699b      	ldr	r3, [r3, #24]
 80012ce:	021a      	lsls	r2, r3, #8
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	430a      	orrs	r2, r1
 80012d6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	69d9      	ldr	r1, [r3, #28]
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	6a1a      	ldr	r2, [r3, #32]
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	430a      	orrs	r2, r1
 80012e6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	681a      	ldr	r2, [r3, #0]
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	f042 0201 	orr.w	r2, r2, #1
 80012f6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	2200      	movs	r2, #0
 80012fc:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	2220      	movs	r2, #32
 8001302:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	2200      	movs	r2, #0
 800130a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	2200      	movs	r2, #0
 8001310:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8001314:	2300      	movs	r3, #0
}
 8001316:	4618      	mov	r0, r3
 8001318:	3708      	adds	r7, #8
 800131a:	46bd      	mov	sp, r7
 800131c:	bd80      	pop	{r7, pc}
	...

08001320 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size,
                                          uint32_t Timeout)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	b088      	sub	sp, #32
 8001324:	af02      	add	r7, sp, #8
 8001326:	60f8      	str	r0, [r7, #12]
 8001328:	607a      	str	r2, [r7, #4]
 800132a:	461a      	mov	r2, r3
 800132c:	460b      	mov	r3, r1
 800132e:	817b      	strh	r3, [r7, #10]
 8001330:	4613      	mov	r3, r2
 8001332:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001334:	68fb      	ldr	r3, [r7, #12]
 8001336:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800133a:	b2db      	uxtb	r3, r3
 800133c:	2b20      	cmp	r3, #32
 800133e:	f040 80da 	bne.w	80014f6 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001342:	68fb      	ldr	r3, [r7, #12]
 8001344:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001348:	2b01      	cmp	r3, #1
 800134a:	d101      	bne.n	8001350 <HAL_I2C_Master_Transmit+0x30>
 800134c:	2302      	movs	r3, #2
 800134e:	e0d3      	b.n	80014f8 <HAL_I2C_Master_Transmit+0x1d8>
 8001350:	68fb      	ldr	r3, [r7, #12]
 8001352:	2201      	movs	r2, #1
 8001354:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001358:	f7ff fc0e 	bl	8000b78 <HAL_GetTick>
 800135c:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800135e:	697b      	ldr	r3, [r7, #20]
 8001360:	9300      	str	r3, [sp, #0]
 8001362:	2319      	movs	r3, #25
 8001364:	2201      	movs	r2, #1
 8001366:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800136a:	68f8      	ldr	r0, [r7, #12]
 800136c:	f000 fefb 	bl	8002166 <I2C_WaitOnFlagUntilTimeout>
 8001370:	4603      	mov	r3, r0
 8001372:	2b00      	cmp	r3, #0
 8001374:	d001      	beq.n	800137a <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8001376:	2301      	movs	r3, #1
 8001378:	e0be      	b.n	80014f8 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800137a:	68fb      	ldr	r3, [r7, #12]
 800137c:	2221      	movs	r2, #33	; 0x21
 800137e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001382:	68fb      	ldr	r3, [r7, #12]
 8001384:	2210      	movs	r2, #16
 8001386:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800138a:	68fb      	ldr	r3, [r7, #12]
 800138c:	2200      	movs	r2, #0
 800138e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001390:	68fb      	ldr	r3, [r7, #12]
 8001392:	687a      	ldr	r2, [r7, #4]
 8001394:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001396:	68fb      	ldr	r3, [r7, #12]
 8001398:	893a      	ldrh	r2, [r7, #8]
 800139a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800139c:	68fb      	ldr	r3, [r7, #12]
 800139e:	2200      	movs	r2, #0
 80013a0:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80013a2:	68fb      	ldr	r3, [r7, #12]
 80013a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80013a6:	b29b      	uxth	r3, r3
 80013a8:	2bff      	cmp	r3, #255	; 0xff
 80013aa:	d90e      	bls.n	80013ca <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80013ac:	68fb      	ldr	r3, [r7, #12]
 80013ae:	22ff      	movs	r2, #255	; 0xff
 80013b0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80013b2:	68fb      	ldr	r3, [r7, #12]
 80013b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80013b6:	b2da      	uxtb	r2, r3
 80013b8:	8979      	ldrh	r1, [r7, #10]
 80013ba:	4b51      	ldr	r3, [pc, #324]	; (8001500 <HAL_I2C_Master_Transmit+0x1e0>)
 80013bc:	9300      	str	r3, [sp, #0]
 80013be:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80013c2:	68f8      	ldr	r0, [r7, #12]
 80013c4:	f001 f85e 	bl	8002484 <I2C_TransferConfig>
 80013c8:	e06c      	b.n	80014a4 <HAL_I2C_Master_Transmit+0x184>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80013ca:	68fb      	ldr	r3, [r7, #12]
 80013cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80013ce:	b29a      	uxth	r2, r3
 80013d0:	68fb      	ldr	r3, [r7, #12]
 80013d2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 80013d4:	68fb      	ldr	r3, [r7, #12]
 80013d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80013d8:	b2da      	uxtb	r2, r3
 80013da:	8979      	ldrh	r1, [r7, #10]
 80013dc:	4b48      	ldr	r3, [pc, #288]	; (8001500 <HAL_I2C_Master_Transmit+0x1e0>)
 80013de:	9300      	str	r3, [sp, #0]
 80013e0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80013e4:	68f8      	ldr	r0, [r7, #12]
 80013e6:	f001 f84d 	bl	8002484 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 80013ea:	e05b      	b.n	80014a4 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80013ec:	697a      	ldr	r2, [r7, #20]
 80013ee:	6a39      	ldr	r1, [r7, #32]
 80013f0:	68f8      	ldr	r0, [r7, #12]
 80013f2:	f000 fef8 	bl	80021e6 <I2C_WaitOnTXISFlagUntilTimeout>
 80013f6:	4603      	mov	r3, r0
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d001      	beq.n	8001400 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 80013fc:	2301      	movs	r3, #1
 80013fe:	e07b      	b.n	80014f8 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001400:	68fb      	ldr	r3, [r7, #12]
 8001402:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001404:	781a      	ldrb	r2, [r3, #0]
 8001406:	68fb      	ldr	r3, [r7, #12]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800140c:	68fb      	ldr	r3, [r7, #12]
 800140e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001410:	1c5a      	adds	r2, r3, #1
 8001412:	68fb      	ldr	r3, [r7, #12]
 8001414:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8001416:	68fb      	ldr	r3, [r7, #12]
 8001418:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800141a:	b29b      	uxth	r3, r3
 800141c:	3b01      	subs	r3, #1
 800141e:	b29a      	uxth	r2, r3
 8001420:	68fb      	ldr	r3, [r7, #12]
 8001422:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001424:	68fb      	ldr	r3, [r7, #12]
 8001426:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001428:	3b01      	subs	r3, #1
 800142a:	b29a      	uxth	r2, r3
 800142c:	68fb      	ldr	r3, [r7, #12]
 800142e:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001430:	68fb      	ldr	r3, [r7, #12]
 8001432:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001434:	b29b      	uxth	r3, r3
 8001436:	2b00      	cmp	r3, #0
 8001438:	d034      	beq.n	80014a4 <HAL_I2C_Master_Transmit+0x184>
 800143a:	68fb      	ldr	r3, [r7, #12]
 800143c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800143e:	2b00      	cmp	r3, #0
 8001440:	d130      	bne.n	80014a4 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001442:	697b      	ldr	r3, [r7, #20]
 8001444:	9300      	str	r3, [sp, #0]
 8001446:	6a3b      	ldr	r3, [r7, #32]
 8001448:	2200      	movs	r2, #0
 800144a:	2180      	movs	r1, #128	; 0x80
 800144c:	68f8      	ldr	r0, [r7, #12]
 800144e:	f000 fe8a 	bl	8002166 <I2C_WaitOnFlagUntilTimeout>
 8001452:	4603      	mov	r3, r0
 8001454:	2b00      	cmp	r3, #0
 8001456:	d001      	beq.n	800145c <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8001458:	2301      	movs	r3, #1
 800145a:	e04d      	b.n	80014f8 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800145c:	68fb      	ldr	r3, [r7, #12]
 800145e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001460:	b29b      	uxth	r3, r3
 8001462:	2bff      	cmp	r3, #255	; 0xff
 8001464:	d90e      	bls.n	8001484 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001466:	68fb      	ldr	r3, [r7, #12]
 8001468:	22ff      	movs	r2, #255	; 0xff
 800146a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800146c:	68fb      	ldr	r3, [r7, #12]
 800146e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001470:	b2da      	uxtb	r2, r3
 8001472:	8979      	ldrh	r1, [r7, #10]
 8001474:	2300      	movs	r3, #0
 8001476:	9300      	str	r3, [sp, #0]
 8001478:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800147c:	68f8      	ldr	r0, [r7, #12]
 800147e:	f001 f801 	bl	8002484 <I2C_TransferConfig>
 8001482:	e00f      	b.n	80014a4 <HAL_I2C_Master_Transmit+0x184>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001484:	68fb      	ldr	r3, [r7, #12]
 8001486:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001488:	b29a      	uxth	r2, r3
 800148a:	68fb      	ldr	r3, [r7, #12]
 800148c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800148e:	68fb      	ldr	r3, [r7, #12]
 8001490:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001492:	b2da      	uxtb	r2, r3
 8001494:	8979      	ldrh	r1, [r7, #10]
 8001496:	2300      	movs	r3, #0
 8001498:	9300      	str	r3, [sp, #0]
 800149a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800149e:	68f8      	ldr	r0, [r7, #12]
 80014a0:	f000 fff0 	bl	8002484 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80014a4:	68fb      	ldr	r3, [r7, #12]
 80014a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80014a8:	b29b      	uxth	r3, r3
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d19e      	bne.n	80013ec <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80014ae:	697a      	ldr	r2, [r7, #20]
 80014b0:	6a39      	ldr	r1, [r7, #32]
 80014b2:	68f8      	ldr	r0, [r7, #12]
 80014b4:	f000 fed7 	bl	8002266 <I2C_WaitOnSTOPFlagUntilTimeout>
 80014b8:	4603      	mov	r3, r0
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d001      	beq.n	80014c2 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 80014be:	2301      	movs	r3, #1
 80014c0:	e01a      	b.n	80014f8 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80014c2:	68fb      	ldr	r3, [r7, #12]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	2220      	movs	r2, #32
 80014c8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80014ca:	68fb      	ldr	r3, [r7, #12]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	6859      	ldr	r1, [r3, #4]
 80014d0:	68fb      	ldr	r3, [r7, #12]
 80014d2:	681a      	ldr	r2, [r3, #0]
 80014d4:	4b0b      	ldr	r3, [pc, #44]	; (8001504 <HAL_I2C_Master_Transmit+0x1e4>)
 80014d6:	400b      	ands	r3, r1
 80014d8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80014da:	68fb      	ldr	r3, [r7, #12]
 80014dc:	2220      	movs	r2, #32
 80014de:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80014e2:	68fb      	ldr	r3, [r7, #12]
 80014e4:	2200      	movs	r2, #0
 80014e6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80014ea:	68fb      	ldr	r3, [r7, #12]
 80014ec:	2200      	movs	r2, #0
 80014ee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80014f2:	2300      	movs	r3, #0
 80014f4:	e000      	b.n	80014f8 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 80014f6:	2302      	movs	r3, #2
  }
}
 80014f8:	4618      	mov	r0, r3
 80014fa:	3718      	adds	r7, #24
 80014fc:	46bd      	mov	sp, r7
 80014fe:	bd80      	pop	{r7, pc}
 8001500:	80002000 	.word	0x80002000
 8001504:	fe00e800 	.word	0xfe00e800

08001508 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size,
                                         uint32_t Timeout)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	b088      	sub	sp, #32
 800150c:	af02      	add	r7, sp, #8
 800150e:	60f8      	str	r0, [r7, #12]
 8001510:	607a      	str	r2, [r7, #4]
 8001512:	461a      	mov	r2, r3
 8001514:	460b      	mov	r3, r1
 8001516:	817b      	strh	r3, [r7, #10]
 8001518:	4613      	mov	r3, r2
 800151a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800151c:	68fb      	ldr	r3, [r7, #12]
 800151e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001522:	b2db      	uxtb	r3, r3
 8001524:	2b20      	cmp	r3, #32
 8001526:	f040 80db 	bne.w	80016e0 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800152a:	68fb      	ldr	r3, [r7, #12]
 800152c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001530:	2b01      	cmp	r3, #1
 8001532:	d101      	bne.n	8001538 <HAL_I2C_Master_Receive+0x30>
 8001534:	2302      	movs	r3, #2
 8001536:	e0d4      	b.n	80016e2 <HAL_I2C_Master_Receive+0x1da>
 8001538:	68fb      	ldr	r3, [r7, #12]
 800153a:	2201      	movs	r2, #1
 800153c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001540:	f7ff fb1a 	bl	8000b78 <HAL_GetTick>
 8001544:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001546:	697b      	ldr	r3, [r7, #20]
 8001548:	9300      	str	r3, [sp, #0]
 800154a:	2319      	movs	r3, #25
 800154c:	2201      	movs	r2, #1
 800154e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001552:	68f8      	ldr	r0, [r7, #12]
 8001554:	f000 fe07 	bl	8002166 <I2C_WaitOnFlagUntilTimeout>
 8001558:	4603      	mov	r3, r0
 800155a:	2b00      	cmp	r3, #0
 800155c:	d001      	beq.n	8001562 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 800155e:	2301      	movs	r3, #1
 8001560:	e0bf      	b.n	80016e2 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001562:	68fb      	ldr	r3, [r7, #12]
 8001564:	2222      	movs	r2, #34	; 0x22
 8001566:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800156a:	68fb      	ldr	r3, [r7, #12]
 800156c:	2210      	movs	r2, #16
 800156e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001572:	68fb      	ldr	r3, [r7, #12]
 8001574:	2200      	movs	r2, #0
 8001576:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001578:	68fb      	ldr	r3, [r7, #12]
 800157a:	687a      	ldr	r2, [r7, #4]
 800157c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800157e:	68fb      	ldr	r3, [r7, #12]
 8001580:	893a      	ldrh	r2, [r7, #8]
 8001582:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001584:	68fb      	ldr	r3, [r7, #12]
 8001586:	2200      	movs	r2, #0
 8001588:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800158a:	68fb      	ldr	r3, [r7, #12]
 800158c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800158e:	b29b      	uxth	r3, r3
 8001590:	2bff      	cmp	r3, #255	; 0xff
 8001592:	d90e      	bls.n	80015b2 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001594:	68fb      	ldr	r3, [r7, #12]
 8001596:	22ff      	movs	r2, #255	; 0xff
 8001598:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 800159a:	68fb      	ldr	r3, [r7, #12]
 800159c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800159e:	b2da      	uxtb	r2, r3
 80015a0:	8979      	ldrh	r1, [r7, #10]
 80015a2:	4b52      	ldr	r3, [pc, #328]	; (80016ec <HAL_I2C_Master_Receive+0x1e4>)
 80015a4:	9300      	str	r3, [sp, #0]
 80015a6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80015aa:	68f8      	ldr	r0, [r7, #12]
 80015ac:	f000 ff6a 	bl	8002484 <I2C_TransferConfig>
 80015b0:	e06d      	b.n	800168e <HAL_I2C_Master_Receive+0x186>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80015b2:	68fb      	ldr	r3, [r7, #12]
 80015b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80015b6:	b29a      	uxth	r2, r3
 80015b8:	68fb      	ldr	r3, [r7, #12]
 80015ba:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 80015bc:	68fb      	ldr	r3, [r7, #12]
 80015be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80015c0:	b2da      	uxtb	r2, r3
 80015c2:	8979      	ldrh	r1, [r7, #10]
 80015c4:	4b49      	ldr	r3, [pc, #292]	; (80016ec <HAL_I2C_Master_Receive+0x1e4>)
 80015c6:	9300      	str	r3, [sp, #0]
 80015c8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80015cc:	68f8      	ldr	r0, [r7, #12]
 80015ce:	f000 ff59 	bl	8002484 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 80015d2:	e05c      	b.n	800168e <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80015d4:	697a      	ldr	r2, [r7, #20]
 80015d6:	6a39      	ldr	r1, [r7, #32]
 80015d8:	68f8      	ldr	r0, [r7, #12]
 80015da:	f000 fe81 	bl	80022e0 <I2C_WaitOnRXNEFlagUntilTimeout>
 80015de:	4603      	mov	r3, r0
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d001      	beq.n	80015e8 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 80015e4:	2301      	movs	r3, #1
 80015e6:	e07c      	b.n	80016e2 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80015ee:	68fb      	ldr	r3, [r7, #12]
 80015f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015f2:	b2d2      	uxtb	r2, r2
 80015f4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80015f6:	68fb      	ldr	r3, [r7, #12]
 80015f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015fa:	1c5a      	adds	r2, r3, #1
 80015fc:	68fb      	ldr	r3, [r7, #12]
 80015fe:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8001600:	68fb      	ldr	r3, [r7, #12]
 8001602:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001604:	3b01      	subs	r3, #1
 8001606:	b29a      	uxth	r2, r3
 8001608:	68fb      	ldr	r3, [r7, #12]
 800160a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800160c:	68fb      	ldr	r3, [r7, #12]
 800160e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001610:	b29b      	uxth	r3, r3
 8001612:	3b01      	subs	r3, #1
 8001614:	b29a      	uxth	r2, r3
 8001616:	68fb      	ldr	r3, [r7, #12]
 8001618:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800161a:	68fb      	ldr	r3, [r7, #12]
 800161c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800161e:	b29b      	uxth	r3, r3
 8001620:	2b00      	cmp	r3, #0
 8001622:	d034      	beq.n	800168e <HAL_I2C_Master_Receive+0x186>
 8001624:	68fb      	ldr	r3, [r7, #12]
 8001626:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001628:	2b00      	cmp	r3, #0
 800162a:	d130      	bne.n	800168e <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800162c:	697b      	ldr	r3, [r7, #20]
 800162e:	9300      	str	r3, [sp, #0]
 8001630:	6a3b      	ldr	r3, [r7, #32]
 8001632:	2200      	movs	r2, #0
 8001634:	2180      	movs	r1, #128	; 0x80
 8001636:	68f8      	ldr	r0, [r7, #12]
 8001638:	f000 fd95 	bl	8002166 <I2C_WaitOnFlagUntilTimeout>
 800163c:	4603      	mov	r3, r0
 800163e:	2b00      	cmp	r3, #0
 8001640:	d001      	beq.n	8001646 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8001642:	2301      	movs	r3, #1
 8001644:	e04d      	b.n	80016e2 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001646:	68fb      	ldr	r3, [r7, #12]
 8001648:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800164a:	b29b      	uxth	r3, r3
 800164c:	2bff      	cmp	r3, #255	; 0xff
 800164e:	d90e      	bls.n	800166e <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001650:	68fb      	ldr	r3, [r7, #12]
 8001652:	22ff      	movs	r2, #255	; 0xff
 8001654:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8001656:	68fb      	ldr	r3, [r7, #12]
 8001658:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800165a:	b2da      	uxtb	r2, r3
 800165c:	8979      	ldrh	r1, [r7, #10]
 800165e:	2300      	movs	r3, #0
 8001660:	9300      	str	r3, [sp, #0]
 8001662:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001666:	68f8      	ldr	r0, [r7, #12]
 8001668:	f000 ff0c 	bl	8002484 <I2C_TransferConfig>
 800166c:	e00f      	b.n	800168e <HAL_I2C_Master_Receive+0x186>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800166e:	68fb      	ldr	r3, [r7, #12]
 8001670:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001672:	b29a      	uxth	r2, r3
 8001674:	68fb      	ldr	r3, [r7, #12]
 8001676:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001678:	68fb      	ldr	r3, [r7, #12]
 800167a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800167c:	b2da      	uxtb	r2, r3
 800167e:	8979      	ldrh	r1, [r7, #10]
 8001680:	2300      	movs	r3, #0
 8001682:	9300      	str	r3, [sp, #0]
 8001684:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001688:	68f8      	ldr	r0, [r7, #12]
 800168a:	f000 fefb 	bl	8002484 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800168e:	68fb      	ldr	r3, [r7, #12]
 8001690:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001692:	b29b      	uxth	r3, r3
 8001694:	2b00      	cmp	r3, #0
 8001696:	d19d      	bne.n	80015d4 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001698:	697a      	ldr	r2, [r7, #20]
 800169a:	6a39      	ldr	r1, [r7, #32]
 800169c:	68f8      	ldr	r0, [r7, #12]
 800169e:	f000 fde2 	bl	8002266 <I2C_WaitOnSTOPFlagUntilTimeout>
 80016a2:	4603      	mov	r3, r0
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d001      	beq.n	80016ac <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 80016a8:	2301      	movs	r3, #1
 80016aa:	e01a      	b.n	80016e2 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	2220      	movs	r2, #32
 80016b2:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80016b4:	68fb      	ldr	r3, [r7, #12]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	6859      	ldr	r1, [r3, #4]
 80016ba:	68fb      	ldr	r3, [r7, #12]
 80016bc:	681a      	ldr	r2, [r3, #0]
 80016be:	4b0c      	ldr	r3, [pc, #48]	; (80016f0 <HAL_I2C_Master_Receive+0x1e8>)
 80016c0:	400b      	ands	r3, r1
 80016c2:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80016c4:	68fb      	ldr	r3, [r7, #12]
 80016c6:	2220      	movs	r2, #32
 80016c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	2200      	movs	r2, #0
 80016d0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80016d4:	68fb      	ldr	r3, [r7, #12]
 80016d6:	2200      	movs	r2, #0
 80016d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80016dc:	2300      	movs	r3, #0
 80016de:	e000      	b.n	80016e2 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 80016e0:	2302      	movs	r3, #2
  }
}
 80016e2:	4618      	mov	r0, r3
 80016e4:	3718      	adds	r7, #24
 80016e6:	46bd      	mov	sp, r7
 80016e8:	bd80      	pop	{r7, pc}
 80016ea:	bf00      	nop
 80016ec:	80002400 	.word	0x80002400
 80016f0:	fe00e800 	.word	0xfe00e800

080016f4 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80016f4:	b580      	push	{r7, lr}
 80016f6:	b084      	sub	sp, #16
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	699b      	ldr	r3, [r3, #24]
 8001702:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001710:	2b00      	cmp	r3, #0
 8001712:	d005      	beq.n	8001720 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001718:	68ba      	ldr	r2, [r7, #8]
 800171a:	68f9      	ldr	r1, [r7, #12]
 800171c:	6878      	ldr	r0, [r7, #4]
 800171e:	4798      	blx	r3
  }
}
 8001720:	bf00      	nop
 8001722:	3710      	adds	r7, #16
 8001724:	46bd      	mov	sp, r7
 8001726:	bd80      	pop	{r7, pc}

08001728 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8001728:	b580      	push	{r7, lr}
 800172a:	b086      	sub	sp, #24
 800172c:	af00      	add	r7, sp, #0
 800172e:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	699b      	ldr	r3, [r3, #24]
 8001736:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8001740:	697b      	ldr	r3, [r7, #20]
 8001742:	0a1b      	lsrs	r3, r3, #8
 8001744:	f003 0301 	and.w	r3, r3, #1
 8001748:	2b00      	cmp	r3, #0
 800174a:	d010      	beq.n	800176e <HAL_I2C_ER_IRQHandler+0x46>
 800174c:	693b      	ldr	r3, [r7, #16]
 800174e:	09db      	lsrs	r3, r3, #7
 8001750:	f003 0301 	and.w	r3, r3, #1
 8001754:	2b00      	cmp	r3, #0
 8001756:	d00a      	beq.n	800176e <HAL_I2C_ER_IRQHandler+0x46>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800175c:	f043 0201 	orr.w	r2, r3, #1
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	f44f 7280 	mov.w	r2, #256	; 0x100
 800176c:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800176e:	697b      	ldr	r3, [r7, #20]
 8001770:	0a9b      	lsrs	r3, r3, #10
 8001772:	f003 0301 	and.w	r3, r3, #1
 8001776:	2b00      	cmp	r3, #0
 8001778:	d010      	beq.n	800179c <HAL_I2C_ER_IRQHandler+0x74>
 800177a:	693b      	ldr	r3, [r7, #16]
 800177c:	09db      	lsrs	r3, r3, #7
 800177e:	f003 0301 	and.w	r3, r3, #1
 8001782:	2b00      	cmp	r3, #0
 8001784:	d00a      	beq.n	800179c <HAL_I2C_ER_IRQHandler+0x74>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800178a:	f043 0208 	orr.w	r2, r3, #8
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800179a:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800179c:	697b      	ldr	r3, [r7, #20]
 800179e:	0a5b      	lsrs	r3, r3, #9
 80017a0:	f003 0301 	and.w	r3, r3, #1
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d010      	beq.n	80017ca <HAL_I2C_ER_IRQHandler+0xa2>
 80017a8:	693b      	ldr	r3, [r7, #16]
 80017aa:	09db      	lsrs	r3, r3, #7
 80017ac:	f003 0301 	and.w	r3, r3, #1
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d00a      	beq.n	80017ca <HAL_I2C_ER_IRQHandler+0xa2>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017b8:	f043 0202 	orr.w	r2, r3, #2
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80017c8:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017ce:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 80017d0:	68fb      	ldr	r3, [r7, #12]
 80017d2:	f003 030b 	and.w	r3, r3, #11
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d003      	beq.n	80017e2 <HAL_I2C_ER_IRQHandler+0xba>
  {
    I2C_ITError(hi2c, tmperror);
 80017da:	68f9      	ldr	r1, [r7, #12]
 80017dc:	6878      	ldr	r0, [r7, #4]
 80017de:	f000 fb89 	bl	8001ef4 <I2C_ITError>
  }
}
 80017e2:	bf00      	nop
 80017e4:	3718      	adds	r7, #24
 80017e6:	46bd      	mov	sp, r7
 80017e8:	bd80      	pop	{r7, pc}

080017ea <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80017ea:	b480      	push	{r7}
 80017ec:	b083      	sub	sp, #12
 80017ee:	af00      	add	r7, sp, #0
 80017f0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 80017f2:	bf00      	nop
 80017f4:	370c      	adds	r7, #12
 80017f6:	46bd      	mov	sp, r7
 80017f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017fc:	4770      	bx	lr

080017fe <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80017fe:	b480      	push	{r7}
 8001800:	b083      	sub	sp, #12
 8001802:	af00      	add	r7, sp, #0
 8001804:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8001806:	bf00      	nop
 8001808:	370c      	adds	r7, #12
 800180a:	46bd      	mov	sp, r7
 800180c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001810:	4770      	bx	lr

08001812 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8001812:	b480      	push	{r7}
 8001814:	b083      	sub	sp, #12
 8001816:	af00      	add	r7, sp, #0
 8001818:	6078      	str	r0, [r7, #4]
 800181a:	460b      	mov	r3, r1
 800181c:	70fb      	strb	r3, [r7, #3]
 800181e:	4613      	mov	r3, r2
 8001820:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8001822:	bf00      	nop
 8001824:	370c      	adds	r7, #12
 8001826:	46bd      	mov	sp, r7
 8001828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182c:	4770      	bx	lr

0800182e <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800182e:	b480      	push	{r7}
 8001830:	b083      	sub	sp, #12
 8001832:	af00      	add	r7, sp, #0
 8001834:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8001836:	bf00      	nop
 8001838:	370c      	adds	r7, #12
 800183a:	46bd      	mov	sp, r7
 800183c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001840:	4770      	bx	lr

08001842 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8001842:	b480      	push	{r7}
 8001844:	b083      	sub	sp, #12
 8001846:	af00      	add	r7, sp, #0
 8001848:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 800184a:	bf00      	nop
 800184c:	370c      	adds	r7, #12
 800184e:	46bd      	mov	sp, r7
 8001850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001854:	4770      	bx	lr

08001856 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001856:	b480      	push	{r7}
 8001858:	b083      	sub	sp, #12
 800185a:	af00      	add	r7, sp, #0
 800185c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 800185e:	bf00      	nop
 8001860:	370c      	adds	r7, #12
 8001862:	46bd      	mov	sp, r7
 8001864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001868:	4770      	bx	lr

0800186a <I2C_Slave_ISR_IT>:
  * @param  ITFlags Interrupt flags to handle.
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags, uint32_t ITSources)
{
 800186a:	b580      	push	{r7, lr}
 800186c:	b086      	sub	sp, #24
 800186e:	af00      	add	r7, sp, #0
 8001870:	60f8      	str	r0, [r7, #12]
 8001872:	60b9      	str	r1, [r7, #8]
 8001874:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8001876:	68fb      	ldr	r3, [r7, #12]
 8001878:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800187a:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 800187c:	68bb      	ldr	r3, [r7, #8]
 800187e:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001886:	2b01      	cmp	r3, #1
 8001888:	d101      	bne.n	800188e <I2C_Slave_ISR_IT+0x24>
 800188a:	2302      	movs	r3, #2
 800188c:	e0ec      	b.n	8001a68 <I2C_Slave_ISR_IT+0x1fe>
 800188e:	68fb      	ldr	r3, [r7, #12]
 8001890:	2201      	movs	r2, #1
 8001892:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8001896:	693b      	ldr	r3, [r7, #16]
 8001898:	095b      	lsrs	r3, r3, #5
 800189a:	f003 0301 	and.w	r3, r3, #1
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d009      	beq.n	80018b6 <I2C_Slave_ISR_IT+0x4c>
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	095b      	lsrs	r3, r3, #5
 80018a6:	f003 0301 	and.w	r3, r3, #1
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d003      	beq.n	80018b6 <I2C_Slave_ISR_IT+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 80018ae:	6939      	ldr	r1, [r7, #16]
 80018b0:	68f8      	ldr	r0, [r7, #12]
 80018b2:	f000 f9bf 	bl	8001c34 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80018b6:	693b      	ldr	r3, [r7, #16]
 80018b8:	091b      	lsrs	r3, r3, #4
 80018ba:	f003 0301 	and.w	r3, r3, #1
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d04d      	beq.n	800195e <I2C_Slave_ISR_IT+0xf4>
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	091b      	lsrs	r3, r3, #4
 80018c6:	f003 0301 	and.w	r3, r3, #1
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d047      	beq.n	800195e <I2C_Slave_ISR_IT+0xf4>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 80018ce:	68fb      	ldr	r3, [r7, #12]
 80018d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80018d2:	b29b      	uxth	r3, r3
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d128      	bne.n	800192a <I2C_Slave_ISR_IT+0xc0>
    {
      /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for Warning[Pa134]: left and right operands are identical */
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80018de:	b2db      	uxtb	r3, r3
 80018e0:	2b28      	cmp	r3, #40	; 0x28
 80018e2:	d108      	bne.n	80018f6 <I2C_Slave_ISR_IT+0x8c>
 80018e4:	697b      	ldr	r3, [r7, #20]
 80018e6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80018ea:	d104      	bne.n	80018f6 <I2C_Slave_ISR_IT+0x8c>
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 80018ec:	6939      	ldr	r1, [r7, #16]
 80018ee:	68f8      	ldr	r0, [r7, #12]
 80018f0:	f000 faaa 	bl	8001e48 <I2C_ITListenCplt>
 80018f4:	e032      	b.n	800195c <I2C_Slave_ISR_IT+0xf2>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 80018f6:	68fb      	ldr	r3, [r7, #12]
 80018f8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80018fc:	b2db      	uxtb	r3, r3
 80018fe:	2b29      	cmp	r3, #41	; 0x29
 8001900:	d10e      	bne.n	8001920 <I2C_Slave_ISR_IT+0xb6>
 8001902:	697b      	ldr	r3, [r7, #20]
 8001904:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001908:	d00a      	beq.n	8001920 <I2C_Slave_ISR_IT+0xb6>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	2210      	movs	r2, #16
 8001910:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8001912:	68f8      	ldr	r0, [r7, #12]
 8001914:	f000 fbe5 	bl	80020e2 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8001918:	68f8      	ldr	r0, [r7, #12]
 800191a:	f000 f92d 	bl	8001b78 <I2C_ITSlaveSeqCplt>
 800191e:	e01d      	b.n	800195c <I2C_Slave_ISR_IT+0xf2>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	2210      	movs	r2, #16
 8001926:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8001928:	e096      	b.n	8001a58 <I2C_Slave_ISR_IT+0x1ee>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800192a:	68fb      	ldr	r3, [r7, #12]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	2210      	movs	r2, #16
 8001930:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001932:	68fb      	ldr	r3, [r7, #12]
 8001934:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001936:	f043 0204 	orr.w	r2, r3, #4
 800193a:	68fb      	ldr	r3, [r7, #12]
 800193c:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800193e:	697b      	ldr	r3, [r7, #20]
 8001940:	2b00      	cmp	r3, #0
 8001942:	d004      	beq.n	800194e <I2C_Slave_ISR_IT+0xe4>
 8001944:	697b      	ldr	r3, [r7, #20]
 8001946:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800194a:	f040 8085 	bne.w	8001a58 <I2C_Slave_ISR_IT+0x1ee>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 800194e:	68fb      	ldr	r3, [r7, #12]
 8001950:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001952:	4619      	mov	r1, r3
 8001954:	68f8      	ldr	r0, [r7, #12]
 8001956:	f000 facd 	bl	8001ef4 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 800195a:	e07d      	b.n	8001a58 <I2C_Slave_ISR_IT+0x1ee>
 800195c:	e07c      	b.n	8001a58 <I2C_Slave_ISR_IT+0x1ee>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 800195e:	693b      	ldr	r3, [r7, #16]
 8001960:	089b      	lsrs	r3, r3, #2
 8001962:	f003 0301 	and.w	r3, r3, #1
 8001966:	2b00      	cmp	r3, #0
 8001968:	d030      	beq.n	80019cc <I2C_Slave_ISR_IT+0x162>
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	089b      	lsrs	r3, r3, #2
 800196e:	f003 0301 	and.w	r3, r3, #1
 8001972:	2b00      	cmp	r3, #0
 8001974:	d02a      	beq.n	80019cc <I2C_Slave_ISR_IT+0x162>
  {
    if (hi2c->XferCount > 0U)
 8001976:	68fb      	ldr	r3, [r7, #12]
 8001978:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800197a:	b29b      	uxth	r3, r3
 800197c:	2b00      	cmp	r3, #0
 800197e:	d018      	beq.n	80019b2 <I2C_Slave_ISR_IT+0x148>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001986:	68fb      	ldr	r3, [r7, #12]
 8001988:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800198a:	b2d2      	uxtb	r2, r2
 800198c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800198e:	68fb      	ldr	r3, [r7, #12]
 8001990:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001992:	1c5a      	adds	r2, r3, #1
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800199c:	3b01      	subs	r3, #1
 800199e:	b29a      	uxth	r2, r3
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80019a8:	b29b      	uxth	r3, r3
 80019aa:	3b01      	subs	r3, #1
 80019ac:	b29a      	uxth	r2, r3
 80019ae:	68fb      	ldr	r3, [r7, #12]
 80019b0:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80019b6:	b29b      	uxth	r3, r3
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d14f      	bne.n	8001a5c <I2C_Slave_ISR_IT+0x1f2>
 80019bc:	697b      	ldr	r3, [r7, #20]
 80019be:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80019c2:	d04b      	beq.n	8001a5c <I2C_Slave_ISR_IT+0x1f2>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 80019c4:	68f8      	ldr	r0, [r7, #12]
 80019c6:	f000 f8d7 	bl	8001b78 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 80019ca:	e047      	b.n	8001a5c <I2C_Slave_ISR_IT+0x1f2>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 80019cc:	693b      	ldr	r3, [r7, #16]
 80019ce:	08db      	lsrs	r3, r3, #3
 80019d0:	f003 0301 	and.w	r3, r3, #1
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d00a      	beq.n	80019ee <I2C_Slave_ISR_IT+0x184>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	08db      	lsrs	r3, r3, #3
 80019dc:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d004      	beq.n	80019ee <I2C_Slave_ISR_IT+0x184>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 80019e4:	6939      	ldr	r1, [r7, #16]
 80019e6:	68f8      	ldr	r0, [r7, #12]
 80019e8:	f000 f842 	bl	8001a70 <I2C_ITAddrCplt>
 80019ec:	e037      	b.n	8001a5e <I2C_Slave_ISR_IT+0x1f4>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 80019ee:	693b      	ldr	r3, [r7, #16]
 80019f0:	085b      	lsrs	r3, r3, #1
 80019f2:	f003 0301 	and.w	r3, r3, #1
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d031      	beq.n	8001a5e <I2C_Slave_ISR_IT+0x1f4>
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	085b      	lsrs	r3, r3, #1
 80019fe:	f003 0301 	and.w	r3, r3, #1
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d02b      	beq.n	8001a5e <I2C_Slave_ISR_IT+0x1f4>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8001a06:	68fb      	ldr	r3, [r7, #12]
 8001a08:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a0a:	b29b      	uxth	r3, r3
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d018      	beq.n	8001a42 <I2C_Slave_ISR_IT+0x1d8>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a14:	781a      	ldrb	r2, [r3, #0]
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a20:	1c5a      	adds	r2, r3, #1
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8001a26:	68fb      	ldr	r3, [r7, #12]
 8001a28:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a2a:	b29b      	uxth	r3, r3
 8001a2c:	3b01      	subs	r3, #1
 8001a2e:	b29a      	uxth	r2, r3
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a38:	3b01      	subs	r3, #1
 8001a3a:	b29a      	uxth	r2, r3
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	851a      	strh	r2, [r3, #40]	; 0x28
 8001a40:	e00d      	b.n	8001a5e <I2C_Slave_ISR_IT+0x1f4>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8001a42:	697b      	ldr	r3, [r7, #20]
 8001a44:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001a48:	d002      	beq.n	8001a50 <I2C_Slave_ISR_IT+0x1e6>
 8001a4a:	697b      	ldr	r3, [r7, #20]
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d106      	bne.n	8001a5e <I2C_Slave_ISR_IT+0x1f4>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8001a50:	68f8      	ldr	r0, [r7, #12]
 8001a52:	f000 f891 	bl	8001b78 <I2C_ITSlaveSeqCplt>
 8001a56:	e002      	b.n	8001a5e <I2C_Slave_ISR_IT+0x1f4>
    if (hi2c->XferCount == 0U)
 8001a58:	bf00      	nop
 8001a5a:	e000      	b.n	8001a5e <I2C_Slave_ISR_IT+0x1f4>
    if ((hi2c->XferCount == 0U) && \
 8001a5c:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8001a5e:	68fb      	ldr	r3, [r7, #12]
 8001a60:	2200      	movs	r2, #0
 8001a62:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8001a66:	2300      	movs	r3, #0
}
 8001a68:	4618      	mov	r0, r3
 8001a6a:	3718      	adds	r7, #24
 8001a6c:	46bd      	mov	sp, r7
 8001a6e:	bd80      	pop	{r7, pc}

08001a70 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8001a70:	b580      	push	{r7, lr}
 8001a72:	b084      	sub	sp, #16
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	6078      	str	r0, [r7, #4]
 8001a78:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001a80:	b2db      	uxtb	r3, r3
 8001a82:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8001a86:	2b28      	cmp	r3, #40	; 0x28
 8001a88:	d16a      	bne.n	8001b60 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	699b      	ldr	r3, [r3, #24]
 8001a90:	0c1b      	lsrs	r3, r3, #16
 8001a92:	b2db      	uxtb	r3, r3
 8001a94:	f003 0301 	and.w	r3, r3, #1
 8001a98:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	699b      	ldr	r3, [r3, #24]
 8001aa0:	0c1b      	lsrs	r3, r3, #16
 8001aa2:	b29b      	uxth	r3, r3
 8001aa4:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8001aa8:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	689b      	ldr	r3, [r3, #8]
 8001ab0:	b29b      	uxth	r3, r3
 8001ab2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001ab6:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	68db      	ldr	r3, [r3, #12]
 8001abe:	b29b      	uxth	r3, r3
 8001ac0:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8001ac4:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	68db      	ldr	r3, [r3, #12]
 8001aca:	2b02      	cmp	r3, #2
 8001acc:	d138      	bne.n	8001b40 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SlaveAddr_MSK) == ((ownadd1code >> SlaveAddr_SHIFT) & SlaveAddr_MSK))
 8001ace:	897b      	ldrh	r3, [r7, #10]
 8001ad0:	09db      	lsrs	r3, r3, #7
 8001ad2:	b29a      	uxth	r2, r3
 8001ad4:	89bb      	ldrh	r3, [r7, #12]
 8001ad6:	4053      	eors	r3, r2
 8001ad8:	b29b      	uxth	r3, r3
 8001ada:	f003 0306 	and.w	r3, r3, #6
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d11c      	bne.n	8001b1c <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 8001ae2:	897b      	ldrh	r3, [r7, #10]
 8001ae4:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001aea:	1c5a      	adds	r2, r3, #1
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001af4:	2b02      	cmp	r3, #2
 8001af6:	d13b      	bne.n	8001b70 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	2200      	movs	r2, #0
 8001afc:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	2208      	movs	r2, #8
 8001b04:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	2200      	movs	r2, #0
 8001b0a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8001b0e:	89ba      	ldrh	r2, [r7, #12]
 8001b10:	7bfb      	ldrb	r3, [r7, #15]
 8001b12:	4619      	mov	r1, r3
 8001b14:	6878      	ldr	r0, [r7, #4]
 8001b16:	f7ff fe7c 	bl	8001812 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8001b1a:	e029      	b.n	8001b70 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 8001b1c:	893b      	ldrh	r3, [r7, #8]
 8001b1e:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8001b20:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001b24:	6878      	ldr	r0, [r7, #4]
 8001b26:	f000 fcdb 	bl	80024e0 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8001b32:	89ba      	ldrh	r2, [r7, #12]
 8001b34:	7bfb      	ldrb	r3, [r7, #15]
 8001b36:	4619      	mov	r1, r3
 8001b38:	6878      	ldr	r0, [r7, #4]
 8001b3a:	f7ff fe6a 	bl	8001812 <HAL_I2C_AddrCallback>
}
 8001b3e:	e017      	b.n	8001b70 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8001b40:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001b44:	6878      	ldr	r0, [r7, #4]
 8001b46:	f000 fccb 	bl	80024e0 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8001b52:	89ba      	ldrh	r2, [r7, #12]
 8001b54:	7bfb      	ldrb	r3, [r7, #15]
 8001b56:	4619      	mov	r1, r3
 8001b58:	6878      	ldr	r0, [r7, #4]
 8001b5a:	f7ff fe5a 	bl	8001812 <HAL_I2C_AddrCallback>
}
 8001b5e:	e007      	b.n	8001b70 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	2208      	movs	r2, #8
 8001b66:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	2200      	movs	r2, #0
 8001b6c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 8001b70:	bf00      	nop
 8001b72:	3710      	adds	r7, #16
 8001b74:	46bd      	mov	sp, r7
 8001b76:	bd80      	pop	{r7, pc}

08001b78 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	b084      	sub	sp, #16
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	2200      	movs	r2, #0
 8001b8c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	0b9b      	lsrs	r3, r3, #14
 8001b94:	f003 0301 	and.w	r3, r3, #1
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d008      	beq.n	8001bae <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	681a      	ldr	r2, [r3, #0]
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001baa:	601a      	str	r2, [r3, #0]
 8001bac:	e00d      	b.n	8001bca <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	0bdb      	lsrs	r3, r3, #15
 8001bb2:	f003 0301 	and.w	r3, r3, #1
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d007      	beq.n	8001bca <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	681a      	ldr	r2, [r3, #0]
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001bc8:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001bd0:	b2db      	uxtb	r3, r3
 8001bd2:	2b29      	cmp	r3, #41	; 0x29
 8001bd4:	d112      	bne.n	8001bfc <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	2228      	movs	r2, #40	; 0x28
 8001bda:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	2221      	movs	r2, #33	; 0x21
 8001be2:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8001be4:	2101      	movs	r1, #1
 8001be6:	6878      	ldr	r0, [r7, #4]
 8001be8:	f000 fc7a 	bl	80024e0 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	2200      	movs	r2, #0
 8001bf0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8001bf4:	6878      	ldr	r0, [r7, #4]
 8001bf6:	f7ff fdf8 	bl	80017ea <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8001bfa:	e017      	b.n	8001c2c <I2C_ITSlaveSeqCplt+0xb4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001c02:	b2db      	uxtb	r3, r3
 8001c04:	2b2a      	cmp	r3, #42	; 0x2a
 8001c06:	d111      	bne.n	8001c2c <I2C_ITSlaveSeqCplt+0xb4>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	2228      	movs	r2, #40	; 0x28
 8001c0c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	2222      	movs	r2, #34	; 0x22
 8001c14:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8001c16:	2102      	movs	r1, #2
 8001c18:	6878      	ldr	r0, [r7, #4]
 8001c1a:	f000 fc61 	bl	80024e0 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	2200      	movs	r2, #0
 8001c22:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8001c26:	6878      	ldr	r0, [r7, #4]
 8001c28:	f7ff fde9 	bl	80017fe <HAL_I2C_SlaveRxCpltCallback>
}
 8001c2c:	bf00      	nop
 8001c2e:	3710      	adds	r7, #16
 8001c30:	46bd      	mov	sp, r7
 8001c32:	bd80      	pop	{r7, pc}

08001c34 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8001c34:	b580      	push	{r7, lr}
 8001c36:	b086      	sub	sp, #24
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	6078      	str	r0, [r7, #4]
 8001c3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8001c46:	683b      	ldr	r3, [r7, #0]
 8001c48:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001c50:	73fb      	strb	r3, [r7, #15]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	2220      	movs	r2, #32
 8001c58:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8001c5a:	7bfb      	ldrb	r3, [r7, #15]
 8001c5c:	2b21      	cmp	r3, #33	; 0x21
 8001c5e:	d002      	beq.n	8001c66 <I2C_ITSlaveCplt+0x32>
 8001c60:	7bfb      	ldrb	r3, [r7, #15]
 8001c62:	2b29      	cmp	r3, #41	; 0x29
 8001c64:	d108      	bne.n	8001c78 <I2C_ITSlaveCplt+0x44>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8001c66:	f248 0101 	movw	r1, #32769	; 0x8001
 8001c6a:	6878      	ldr	r0, [r7, #4]
 8001c6c:	f000 fc38 	bl	80024e0 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	2221      	movs	r2, #33	; 0x21
 8001c74:	631a      	str	r2, [r3, #48]	; 0x30
 8001c76:	e00d      	b.n	8001c94 <I2C_ITSlaveCplt+0x60>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8001c78:	7bfb      	ldrb	r3, [r7, #15]
 8001c7a:	2b22      	cmp	r3, #34	; 0x22
 8001c7c:	d002      	beq.n	8001c84 <I2C_ITSlaveCplt+0x50>
 8001c7e:	7bfb      	ldrb	r3, [r7, #15]
 8001c80:	2b2a      	cmp	r3, #42	; 0x2a
 8001c82:	d107      	bne.n	8001c94 <I2C_ITSlaveCplt+0x60>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8001c84:	f248 0102 	movw	r1, #32770	; 0x8002
 8001c88:	6878      	ldr	r0, [r7, #4]
 8001c8a:	f000 fc29 	bl	80024e0 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	2222      	movs	r2, #34	; 0x22
 8001c92:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	685a      	ldr	r2, [r3, #4]
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001ca2:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	6859      	ldr	r1, [r3, #4]
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681a      	ldr	r2, [r3, #0]
 8001cae:	4b64      	ldr	r3, [pc, #400]	; (8001e40 <I2C_ITSlaveCplt+0x20c>)
 8001cb0:	400b      	ands	r3, r1
 8001cb2:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8001cb4:	6878      	ldr	r0, [r7, #4]
 8001cb6:	f000 fa14 	bl	80020e2 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8001cba:	693b      	ldr	r3, [r7, #16]
 8001cbc:	0b9b      	lsrs	r3, r3, #14
 8001cbe:	f003 0301 	and.w	r3, r3, #1
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d013      	beq.n	8001cee <I2C_ITSlaveCplt+0xba>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	681a      	ldr	r2, [r3, #0]
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001cd4:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d020      	beq.n	8001d20 <I2C_ITSlaveCplt+0xec>
    {
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmatx);
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	685b      	ldr	r3, [r3, #4]
 8001ce6:	b29a      	uxth	r2, r3
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001cec:	e018      	b.n	8001d20 <I2C_ITSlaveCplt+0xec>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8001cee:	693b      	ldr	r3, [r7, #16]
 8001cf0:	0bdb      	lsrs	r3, r3, #15
 8001cf2:	f003 0301 	and.w	r3, r3, #1
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d012      	beq.n	8001d20 <I2C_ITSlaveCplt+0xec>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	681a      	ldr	r2, [r3, #0]
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001d08:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d006      	beq.n	8001d20 <I2C_ITSlaveCplt+0xec>
    {
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmarx);
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	685b      	ldr	r3, [r3, #4]
 8001d1a:	b29a      	uxth	r2, r3
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	855a      	strh	r2, [r3, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8001d20:	697b      	ldr	r3, [r7, #20]
 8001d22:	089b      	lsrs	r3, r3, #2
 8001d24:	f003 0301 	and.w	r3, r3, #1
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d020      	beq.n	8001d6e <I2C_ITSlaveCplt+0x13a>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8001d2c:	697b      	ldr	r3, [r7, #20]
 8001d2e:	f023 0304 	bic.w	r3, r3, #4
 8001d32:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d3e:	b2d2      	uxtb	r2, r2
 8001d40:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d46:	1c5a      	adds	r2, r3, #1
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d00c      	beq.n	8001d6e <I2C_ITSlaveCplt+0x13a>
    {
      hi2c->XferSize--;
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d58:	3b01      	subs	r3, #1
 8001d5a:	b29a      	uxth	r2, r3
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d64:	b29b      	uxth	r3, r3
 8001d66:	3b01      	subs	r3, #1
 8001d68:	b29a      	uxth	r2, r3
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d72:	b29b      	uxth	r3, r3
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d005      	beq.n	8001d84 <I2C_ITSlaveCplt+0x150>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d7c:	f043 0204 	orr.w	r2, r3, #4
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	2200      	movs	r2, #0
 8001d88:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	2200      	movs	r2, #0
 8001d90:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d010      	beq.n	8001dbc <I2C_ITSlaveCplt+0x188>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d9e:	4619      	mov	r1, r3
 8001da0:	6878      	ldr	r0, [r7, #4]
 8001da2:	f000 f8a7 	bl	8001ef4 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001dac:	b2db      	uxtb	r3, r3
 8001dae:	2b28      	cmp	r3, #40	; 0x28
 8001db0:	d141      	bne.n	8001e36 <I2C_ITSlaveCplt+0x202>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8001db2:	6979      	ldr	r1, [r7, #20]
 8001db4:	6878      	ldr	r0, [r7, #4]
 8001db6:	f000 f847 	bl	8001e48 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8001dba:	e03c      	b.n	8001e36 <I2C_ITSlaveCplt+0x202>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001dc0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001dc4:	d014      	beq.n	8001df0 <I2C_ITSlaveCplt+0x1bc>
    I2C_ITSlaveSeqCplt(hi2c);
 8001dc6:	6878      	ldr	r0, [r7, #4]
 8001dc8:	f7ff fed6 	bl	8001b78 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	4a1d      	ldr	r2, [pc, #116]	; (8001e44 <I2C_ITSlaveCplt+0x210>)
 8001dd0:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	2220      	movs	r2, #32
 8001dd6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	2200      	movs	r2, #0
 8001dde:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	2200      	movs	r2, #0
 8001de4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 8001de8:	6878      	ldr	r0, [r7, #4]
 8001dea:	f7ff fd20 	bl	800182e <HAL_I2C_ListenCpltCallback>
}
 8001dee:	e022      	b.n	8001e36 <I2C_ITSlaveCplt+0x202>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001df6:	b2db      	uxtb	r3, r3
 8001df8:	2b22      	cmp	r3, #34	; 0x22
 8001dfa:	d10e      	bne.n	8001e1a <I2C_ITSlaveCplt+0x1e6>
    hi2c->State = HAL_I2C_STATE_READY;
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	2220      	movs	r2, #32
 8001e00:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	2200      	movs	r2, #0
 8001e08:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	2200      	movs	r2, #0
 8001e0e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8001e12:	6878      	ldr	r0, [r7, #4]
 8001e14:	f7ff fcf3 	bl	80017fe <HAL_I2C_SlaveRxCpltCallback>
}
 8001e18:	e00d      	b.n	8001e36 <I2C_ITSlaveCplt+0x202>
    hi2c->State = HAL_I2C_STATE_READY;
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	2220      	movs	r2, #32
 8001e1e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	2200      	movs	r2, #0
 8001e26:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	2200      	movs	r2, #0
 8001e2c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8001e30:	6878      	ldr	r0, [r7, #4]
 8001e32:	f7ff fcda 	bl	80017ea <HAL_I2C_SlaveTxCpltCallback>
}
 8001e36:	bf00      	nop
 8001e38:	3718      	adds	r7, #24
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	bd80      	pop	{r7, pc}
 8001e3e:	bf00      	nop
 8001e40:	fe00e800 	.word	0xfe00e800
 8001e44:	ffff0000 	.word	0xffff0000

08001e48 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	b082      	sub	sp, #8
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	6078      	str	r0, [r7, #4]
 8001e50:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	4a26      	ldr	r2, [pc, #152]	; (8001ef0 <I2C_ITListenCplt+0xa8>)
 8001e56:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	2200      	movs	r2, #0
 8001e5c:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	2220      	movs	r2, #32
 8001e62:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	2200      	movs	r2, #0
 8001e6a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	2200      	movs	r2, #0
 8001e72:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8001e74:	683b      	ldr	r3, [r7, #0]
 8001e76:	089b      	lsrs	r3, r3, #2
 8001e78:	f003 0301 	and.w	r3, r3, #1
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d022      	beq.n	8001ec6 <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e8a:	b2d2      	uxtb	r2, r2
 8001e8c:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e92:	1c5a      	adds	r2, r3, #1
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d012      	beq.n	8001ec6 <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ea4:	3b01      	subs	r3, #1
 8001ea6:	b29a      	uxth	r2, r3
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001eb0:	b29b      	uxth	r3, r3
 8001eb2:	3b01      	subs	r3, #1
 8001eb4:	b29a      	uxth	r2, r3
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ebe:	f043 0204 	orr.w	r2, r3, #4
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8001ec6:	f248 0103 	movw	r1, #32771	; 0x8003
 8001eca:	6878      	ldr	r0, [r7, #4]
 8001ecc:	f000 fb08 	bl	80024e0 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	2210      	movs	r2, #16
 8001ed6:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	2200      	movs	r2, #0
 8001edc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8001ee0:	6878      	ldr	r0, [r7, #4]
 8001ee2:	f7ff fca4 	bl	800182e <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8001ee6:	bf00      	nop
 8001ee8:	3708      	adds	r7, #8
 8001eea:	46bd      	mov	sp, r7
 8001eec:	bd80      	pop	{r7, pc}
 8001eee:	bf00      	nop
 8001ef0:	ffff0000 	.word	0xffff0000

08001ef4 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8001ef4:	b580      	push	{r7, lr}
 8001ef6:	b084      	sub	sp, #16
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	6078      	str	r0, [r7, #4]
 8001efc:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001f04:	73fb      	strb	r3, [r7, #15]
  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	2200      	movs	r2, #0
 8001f0a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	4a5d      	ldr	r2, [pc, #372]	; (8002088 <I2C_ITError+0x194>)
 8001f12:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	2200      	movs	r2, #0
 8001f18:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001f1e:	683b      	ldr	r3, [r7, #0]
 8001f20:	431a      	orrs	r2, r3
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8001f26:	7bfb      	ldrb	r3, [r7, #15]
 8001f28:	2b28      	cmp	r3, #40	; 0x28
 8001f2a:	d005      	beq.n	8001f38 <I2C_ITError+0x44>
 8001f2c:	7bfb      	ldrb	r3, [r7, #15]
 8001f2e:	2b29      	cmp	r3, #41	; 0x29
 8001f30:	d002      	beq.n	8001f38 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8001f32:	7bfb      	ldrb	r3, [r7, #15]
 8001f34:	2b2a      	cmp	r3, #42	; 0x2a
 8001f36:	d10b      	bne.n	8001f50 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8001f38:	2103      	movs	r1, #3
 8001f3a:	6878      	ldr	r0, [r7, #4]
 8001f3c:	f000 fad0 	bl	80024e0 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	2228      	movs	r2, #40	; 0x28
 8001f44:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	4a50      	ldr	r2, [pc, #320]	; (800208c <I2C_ITError+0x198>)
 8001f4c:	635a      	str	r2, [r3, #52]	; 0x34
 8001f4e:	e011      	b.n	8001f74 <I2C_ITError+0x80>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8001f50:	f248 0103 	movw	r1, #32771	; 0x8003
 8001f54:	6878      	ldr	r0, [r7, #4]
 8001f56:	f000 fac3 	bl	80024e0 <I2C_Disable_IRQ>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001f60:	b2db      	uxtb	r3, r3
 8001f62:	2b60      	cmp	r3, #96	; 0x60
 8001f64:	d003      	beq.n	8001f6e <I2C_ITError+0x7a>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	2220      	movs	r2, #32
 8001f6a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    }
    hi2c->XferISR       = NULL;
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	2200      	movs	r2, #0
 8001f72:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f78:	60bb      	str	r3, [r7, #8]
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d039      	beq.n	8001ff6 <I2C_ITError+0x102>
 8001f82:	68bb      	ldr	r3, [r7, #8]
 8001f84:	2b11      	cmp	r3, #17
 8001f86:	d002      	beq.n	8001f8e <I2C_ITError+0x9a>
 8001f88:	68bb      	ldr	r3, [r7, #8]
 8001f8a:	2b21      	cmp	r3, #33	; 0x21
 8001f8c:	d133      	bne.n	8001ff6 <I2C_ITError+0x102>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f98:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001f9c:	d107      	bne.n	8001fae <I2C_ITError+0xba>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	681a      	ldr	r2, [r3, #0]
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001fac:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001fb2:	4618      	mov	r0, r3
 8001fb4:	f7fe ff3e 	bl	8000e34 <HAL_DMA_GetState>
 8001fb8:	4603      	mov	r3, r0
 8001fba:	2b01      	cmp	r3, #1
 8001fbc:	d017      	beq.n	8001fee <I2C_ITError+0xfa>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001fc2:	4a33      	ldr	r2, [pc, #204]	; (8002090 <I2C_ITError+0x19c>)
 8001fc4:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	2200      	movs	r2, #0
 8001fca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001fd2:	4618      	mov	r0, r3
 8001fd4:	f7fe feed 	bl	8000db2 <HAL_DMA_Abort_IT>
 8001fd8:	4603      	mov	r3, r0
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d04d      	beq.n	800207a <I2C_ITError+0x186>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001fe2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001fe4:	687a      	ldr	r2, [r7, #4]
 8001fe6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001fe8:	4610      	mov	r0, r2
 8001fea:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8001fec:	e045      	b.n	800207a <I2C_ITError+0x186>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8001fee:	6878      	ldr	r0, [r7, #4]
 8001ff0:	f000 f850 	bl	8002094 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8001ff4:	e041      	b.n	800207a <I2C_ITError+0x186>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d039      	beq.n	8002072 <I2C_ITError+0x17e>
 8001ffe:	68bb      	ldr	r3, [r7, #8]
 8002000:	2b12      	cmp	r3, #18
 8002002:	d002      	beq.n	800200a <I2C_ITError+0x116>
 8002004:	68bb      	ldr	r3, [r7, #8]
 8002006:	2b22      	cmp	r3, #34	; 0x22
 8002008:	d133      	bne.n	8002072 <I2C_ITError+0x17e>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002014:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002018:	d107      	bne.n	800202a <I2C_ITError+0x136>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	681a      	ldr	r2, [r3, #0]
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002028:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800202e:	4618      	mov	r0, r3
 8002030:	f7fe ff00 	bl	8000e34 <HAL_DMA_GetState>
 8002034:	4603      	mov	r3, r0
 8002036:	2b01      	cmp	r3, #1
 8002038:	d017      	beq.n	800206a <I2C_ITError+0x176>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800203e:	4a14      	ldr	r2, [pc, #80]	; (8002090 <I2C_ITError+0x19c>)
 8002040:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	2200      	movs	r2, #0
 8002046:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800204e:	4618      	mov	r0, r3
 8002050:	f7fe feaf 	bl	8000db2 <HAL_DMA_Abort_IT>
 8002054:	4603      	mov	r3, r0
 8002056:	2b00      	cmp	r3, #0
 8002058:	d011      	beq.n	800207e <I2C_ITError+0x18a>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800205e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002060:	687a      	ldr	r2, [r7, #4]
 8002062:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002064:	4610      	mov	r0, r2
 8002066:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002068:	e009      	b.n	800207e <I2C_ITError+0x18a>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 800206a:	6878      	ldr	r0, [r7, #4]
 800206c:	f000 f812 	bl	8002094 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002070:	e005      	b.n	800207e <I2C_ITError+0x18a>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8002072:	6878      	ldr	r0, [r7, #4]
 8002074:	f000 f80e 	bl	8002094 <I2C_TreatErrorCallback>
  }
}
 8002078:	e002      	b.n	8002080 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800207a:	bf00      	nop
 800207c:	e000      	b.n	8002080 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800207e:	bf00      	nop
}
 8002080:	bf00      	nop
 8002082:	3710      	adds	r7, #16
 8002084:	46bd      	mov	sp, r7
 8002086:	bd80      	pop	{r7, pc}
 8002088:	ffff0000 	.word	0xffff0000
 800208c:	0800186b 	.word	0x0800186b
 8002090:	0800212b 	.word	0x0800212b

08002094 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8002094:	b580      	push	{r7, lr}
 8002096:	b082      	sub	sp, #8
 8002098:	af00      	add	r7, sp, #0
 800209a:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80020a2:	b2db      	uxtb	r3, r3
 80020a4:	2b60      	cmp	r3, #96	; 0x60
 80020a6:	d10e      	bne.n	80020c6 <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	2220      	movs	r2, #32
 80020ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	2200      	movs	r2, #0
 80020b4:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	2200      	movs	r2, #0
 80020ba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80020be:	6878      	ldr	r0, [r7, #4]
 80020c0:	f7ff fbc9 	bl	8001856 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80020c4:	e009      	b.n	80020da <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	2200      	movs	r2, #0
 80020ca:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	2200      	movs	r2, #0
 80020d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 80020d4:	6878      	ldr	r0, [r7, #4]
 80020d6:	f7ff fbb4 	bl	8001842 <HAL_I2C_ErrorCallback>
}
 80020da:	bf00      	nop
 80020dc:	3708      	adds	r7, #8
 80020de:	46bd      	mov	sp, r7
 80020e0:	bd80      	pop	{r7, pc}

080020e2 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80020e2:	b480      	push	{r7}
 80020e4:	b083      	sub	sp, #12
 80020e6:	af00      	add	r7, sp, #0
 80020e8:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	699b      	ldr	r3, [r3, #24]
 80020f0:	f003 0302 	and.w	r3, r3, #2
 80020f4:	2b02      	cmp	r3, #2
 80020f6:	d103      	bne.n	8002100 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	2200      	movs	r2, #0
 80020fe:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	699b      	ldr	r3, [r3, #24]
 8002106:	f003 0301 	and.w	r3, r3, #1
 800210a:	2b01      	cmp	r3, #1
 800210c:	d007      	beq.n	800211e <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	699a      	ldr	r2, [r3, #24]
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	f042 0201 	orr.w	r2, r2, #1
 800211c:	619a      	str	r2, [r3, #24]
  }
}
 800211e:	bf00      	nop
 8002120:	370c      	adds	r7, #12
 8002122:	46bd      	mov	sp, r7
 8002124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002128:	4770      	bx	lr

0800212a <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 800212a:	b580      	push	{r7, lr}
 800212c:	b084      	sub	sp, #16
 800212e:	af00      	add	r7, sp, #0
 8002130:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002136:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800213c:	2b00      	cmp	r3, #0
 800213e:	d003      	beq.n	8002148 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002144:	2200      	movs	r2, #0
 8002146:	639a      	str	r2, [r3, #56]	; 0x38
  }
  if (hi2c->hdmarx != NULL)
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800214c:	2b00      	cmp	r3, #0
 800214e:	d003      	beq.n	8002158 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002154:	2200      	movs	r2, #0
 8002156:	639a      	str	r2, [r3, #56]	; 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 8002158:	68f8      	ldr	r0, [r7, #12]
 800215a:	f7ff ff9b 	bl	8002094 <I2C_TreatErrorCallback>
}
 800215e:	bf00      	nop
 8002160:	3710      	adds	r7, #16
 8002162:	46bd      	mov	sp, r7
 8002164:	bd80      	pop	{r7, pc}

08002166 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002166:	b580      	push	{r7, lr}
 8002168:	b084      	sub	sp, #16
 800216a:	af00      	add	r7, sp, #0
 800216c:	60f8      	str	r0, [r7, #12]
 800216e:	60b9      	str	r1, [r7, #8]
 8002170:	603b      	str	r3, [r7, #0]
 8002172:	4613      	mov	r3, r2
 8002174:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002176:	e022      	b.n	80021be <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002178:	683b      	ldr	r3, [r7, #0]
 800217a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800217e:	d01e      	beq.n	80021be <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002180:	f7fe fcfa 	bl	8000b78 <HAL_GetTick>
 8002184:	4602      	mov	r2, r0
 8002186:	69bb      	ldr	r3, [r7, #24]
 8002188:	1ad3      	subs	r3, r2, r3
 800218a:	683a      	ldr	r2, [r7, #0]
 800218c:	429a      	cmp	r2, r3
 800218e:	d302      	bcc.n	8002196 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002190:	683b      	ldr	r3, [r7, #0]
 8002192:	2b00      	cmp	r3, #0
 8002194:	d113      	bne.n	80021be <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800219a:	f043 0220 	orr.w	r2, r3, #32
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	2220      	movs	r2, #32
 80021a6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	2200      	movs	r2, #0
 80021ae:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	2200      	movs	r2, #0
 80021b6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 80021ba:	2301      	movs	r3, #1
 80021bc:	e00f      	b.n	80021de <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	699a      	ldr	r2, [r3, #24]
 80021c4:	68bb      	ldr	r3, [r7, #8]
 80021c6:	4013      	ands	r3, r2
 80021c8:	68ba      	ldr	r2, [r7, #8]
 80021ca:	429a      	cmp	r2, r3
 80021cc:	bf0c      	ite	eq
 80021ce:	2301      	moveq	r3, #1
 80021d0:	2300      	movne	r3, #0
 80021d2:	b2db      	uxtb	r3, r3
 80021d4:	461a      	mov	r2, r3
 80021d6:	79fb      	ldrb	r3, [r7, #7]
 80021d8:	429a      	cmp	r2, r3
 80021da:	d0cd      	beq.n	8002178 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80021dc:	2300      	movs	r3, #0
}
 80021de:	4618      	mov	r0, r3
 80021e0:	3710      	adds	r7, #16
 80021e2:	46bd      	mov	sp, r7
 80021e4:	bd80      	pop	{r7, pc}

080021e6 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80021e6:	b580      	push	{r7, lr}
 80021e8:	b084      	sub	sp, #16
 80021ea:	af00      	add	r7, sp, #0
 80021ec:	60f8      	str	r0, [r7, #12]
 80021ee:	60b9      	str	r1, [r7, #8]
 80021f0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80021f2:	e02c      	b.n	800224e <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80021f4:	687a      	ldr	r2, [r7, #4]
 80021f6:	68b9      	ldr	r1, [r7, #8]
 80021f8:	68f8      	ldr	r0, [r7, #12]
 80021fa:	f000 f8dd 	bl	80023b8 <I2C_IsAcknowledgeFailed>
 80021fe:	4603      	mov	r3, r0
 8002200:	2b00      	cmp	r3, #0
 8002202:	d001      	beq.n	8002208 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002204:	2301      	movs	r3, #1
 8002206:	e02a      	b.n	800225e <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002208:	68bb      	ldr	r3, [r7, #8]
 800220a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800220e:	d01e      	beq.n	800224e <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002210:	f7fe fcb2 	bl	8000b78 <HAL_GetTick>
 8002214:	4602      	mov	r2, r0
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	1ad3      	subs	r3, r2, r3
 800221a:	68ba      	ldr	r2, [r7, #8]
 800221c:	429a      	cmp	r2, r3
 800221e:	d302      	bcc.n	8002226 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8002220:	68bb      	ldr	r3, [r7, #8]
 8002222:	2b00      	cmp	r3, #0
 8002224:	d113      	bne.n	800224e <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800222a:	f043 0220 	orr.w	r2, r3, #32
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	2220      	movs	r2, #32
 8002236:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	2200      	movs	r2, #0
 800223e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	2200      	movs	r2, #0
 8002246:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800224a:	2301      	movs	r3, #1
 800224c:	e007      	b.n	800225e <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	699b      	ldr	r3, [r3, #24]
 8002254:	f003 0302 	and.w	r3, r3, #2
 8002258:	2b02      	cmp	r3, #2
 800225a:	d1cb      	bne.n	80021f4 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800225c:	2300      	movs	r3, #0
}
 800225e:	4618      	mov	r0, r3
 8002260:	3710      	adds	r7, #16
 8002262:	46bd      	mov	sp, r7
 8002264:	bd80      	pop	{r7, pc}

08002266 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002266:	b580      	push	{r7, lr}
 8002268:	b084      	sub	sp, #16
 800226a:	af00      	add	r7, sp, #0
 800226c:	60f8      	str	r0, [r7, #12]
 800226e:	60b9      	str	r1, [r7, #8]
 8002270:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002272:	e028      	b.n	80022c6 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8002274:	687a      	ldr	r2, [r7, #4]
 8002276:	68b9      	ldr	r1, [r7, #8]
 8002278:	68f8      	ldr	r0, [r7, #12]
 800227a:	f000 f89d 	bl	80023b8 <I2C_IsAcknowledgeFailed>
 800227e:	4603      	mov	r3, r0
 8002280:	2b00      	cmp	r3, #0
 8002282:	d001      	beq.n	8002288 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002284:	2301      	movs	r3, #1
 8002286:	e026      	b.n	80022d6 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002288:	f7fe fc76 	bl	8000b78 <HAL_GetTick>
 800228c:	4602      	mov	r2, r0
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	1ad3      	subs	r3, r2, r3
 8002292:	68ba      	ldr	r2, [r7, #8]
 8002294:	429a      	cmp	r2, r3
 8002296:	d302      	bcc.n	800229e <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002298:	68bb      	ldr	r3, [r7, #8]
 800229a:	2b00      	cmp	r3, #0
 800229c:	d113      	bne.n	80022c6 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022a2:	f043 0220 	orr.w	r2, r3, #32
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	2220      	movs	r2, #32
 80022ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	2200      	movs	r2, #0
 80022b6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	2200      	movs	r2, #0
 80022be:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80022c2:	2301      	movs	r3, #1
 80022c4:	e007      	b.n	80022d6 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	699b      	ldr	r3, [r3, #24]
 80022cc:	f003 0320 	and.w	r3, r3, #32
 80022d0:	2b20      	cmp	r3, #32
 80022d2:	d1cf      	bne.n	8002274 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80022d4:	2300      	movs	r3, #0
}
 80022d6:	4618      	mov	r0, r3
 80022d8:	3710      	adds	r7, #16
 80022da:	46bd      	mov	sp, r7
 80022dc:	bd80      	pop	{r7, pc}
	...

080022e0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80022e0:	b580      	push	{r7, lr}
 80022e2:	b084      	sub	sp, #16
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	60f8      	str	r0, [r7, #12]
 80022e8:	60b9      	str	r1, [r7, #8]
 80022ea:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80022ec:	e055      	b.n	800239a <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80022ee:	687a      	ldr	r2, [r7, #4]
 80022f0:	68b9      	ldr	r1, [r7, #8]
 80022f2:	68f8      	ldr	r0, [r7, #12]
 80022f4:	f000 f860 	bl	80023b8 <I2C_IsAcknowledgeFailed>
 80022f8:	4603      	mov	r3, r0
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d001      	beq.n	8002302 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80022fe:	2301      	movs	r3, #1
 8002300:	e053      	b.n	80023aa <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	699b      	ldr	r3, [r3, #24]
 8002308:	f003 0320 	and.w	r3, r3, #32
 800230c:	2b20      	cmp	r3, #32
 800230e:	d129      	bne.n	8002364 <I2C_WaitOnRXNEFlagUntilTimeout+0x84>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	699b      	ldr	r3, [r3, #24]
 8002316:	f003 0304 	and.w	r3, r3, #4
 800231a:	2b04      	cmp	r3, #4
 800231c:	d105      	bne.n	800232a <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002322:	2b00      	cmp	r3, #0
 8002324:	d001      	beq.n	800232a <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8002326:	2300      	movs	r3, #0
 8002328:	e03f      	b.n	80023aa <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
      else
      {
        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	2220      	movs	r2, #32
 8002330:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	6859      	ldr	r1, [r3, #4]
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	681a      	ldr	r2, [r3, #0]
 800233c:	4b1d      	ldr	r3, [pc, #116]	; (80023b4 <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>)
 800233e:	400b      	ands	r3, r1
 8002340:	6053      	str	r3, [r2, #4]

        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	2200      	movs	r2, #0
 8002346:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	2220      	movs	r2, #32
 800234c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	2200      	movs	r2, #0
 8002354:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	2200      	movs	r2, #0
 800235c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8002360:	2301      	movs	r3, #1
 8002362:	e022      	b.n	80023aa <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002364:	f7fe fc08 	bl	8000b78 <HAL_GetTick>
 8002368:	4602      	mov	r2, r0
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	1ad3      	subs	r3, r2, r3
 800236e:	68ba      	ldr	r2, [r7, #8]
 8002370:	429a      	cmp	r2, r3
 8002372:	d302      	bcc.n	800237a <I2C_WaitOnRXNEFlagUntilTimeout+0x9a>
 8002374:	68bb      	ldr	r3, [r7, #8]
 8002376:	2b00      	cmp	r3, #0
 8002378:	d10f      	bne.n	800239a <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800237e:	f043 0220 	orr.w	r2, r3, #32
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	2220      	movs	r2, #32
 800238a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	2200      	movs	r2, #0
 8002392:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8002396:	2301      	movs	r3, #1
 8002398:	e007      	b.n	80023aa <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	699b      	ldr	r3, [r3, #24]
 80023a0:	f003 0304 	and.w	r3, r3, #4
 80023a4:	2b04      	cmp	r3, #4
 80023a6:	d1a2      	bne.n	80022ee <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80023a8:	2300      	movs	r3, #0
}
 80023aa:	4618      	mov	r0, r3
 80023ac:	3710      	adds	r7, #16
 80023ae:	46bd      	mov	sp, r7
 80023b0:	bd80      	pop	{r7, pc}
 80023b2:	bf00      	nop
 80023b4:	fe00e800 	.word	0xfe00e800

080023b8 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80023b8:	b580      	push	{r7, lr}
 80023ba:	b084      	sub	sp, #16
 80023bc:	af00      	add	r7, sp, #0
 80023be:	60f8      	str	r0, [r7, #12]
 80023c0:	60b9      	str	r1, [r7, #8]
 80023c2:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	699b      	ldr	r3, [r3, #24]
 80023ca:	f003 0310 	and.w	r3, r3, #16
 80023ce:	2b10      	cmp	r3, #16
 80023d0:	d151      	bne.n	8002476 <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80023d2:	e022      	b.n	800241a <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80023d4:	68bb      	ldr	r3, [r7, #8]
 80023d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023da:	d01e      	beq.n	800241a <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80023dc:	f7fe fbcc 	bl	8000b78 <HAL_GetTick>
 80023e0:	4602      	mov	r2, r0
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	1ad3      	subs	r3, r2, r3
 80023e6:	68ba      	ldr	r2, [r7, #8]
 80023e8:	429a      	cmp	r2, r3
 80023ea:	d302      	bcc.n	80023f2 <I2C_IsAcknowledgeFailed+0x3a>
 80023ec:	68bb      	ldr	r3, [r7, #8]
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d113      	bne.n	800241a <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023f6:	f043 0220 	orr.w	r2, r3, #32
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	2220      	movs	r2, #32
 8002402:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	2200      	movs	r2, #0
 800240a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	2200      	movs	r2, #0
 8002412:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8002416:	2301      	movs	r3, #1
 8002418:	e02e      	b.n	8002478 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	699b      	ldr	r3, [r3, #24]
 8002420:	f003 0320 	and.w	r3, r3, #32
 8002424:	2b20      	cmp	r3, #32
 8002426:	d1d5      	bne.n	80023d4 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	2210      	movs	r2, #16
 800242e:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	2220      	movs	r2, #32
 8002436:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002438:	68f8      	ldr	r0, [r7, #12]
 800243a:	f7ff fe52 	bl	80020e2 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	6859      	ldr	r1, [r3, #4]
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	681a      	ldr	r2, [r3, #0]
 8002448:	4b0d      	ldr	r3, [pc, #52]	; (8002480 <I2C_IsAcknowledgeFailed+0xc8>)
 800244a:	400b      	ands	r3, r1
 800244c:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002452:	f043 0204 	orr.w	r2, r3, #4
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	2220      	movs	r2, #32
 800245e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	2200      	movs	r2, #0
 8002466:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	2200      	movs	r2, #0
 800246e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8002472:	2301      	movs	r3, #1
 8002474:	e000      	b.n	8002478 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 8002476:	2300      	movs	r3, #0
}
 8002478:	4618      	mov	r0, r3
 800247a:	3710      	adds	r7, #16
 800247c:	46bd      	mov	sp, r7
 800247e:	bd80      	pop	{r7, pc}
 8002480:	fe00e800 	.word	0xfe00e800

08002484 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002484:	b480      	push	{r7}
 8002486:	b085      	sub	sp, #20
 8002488:	af00      	add	r7, sp, #0
 800248a:	60f8      	str	r0, [r7, #12]
 800248c:	607b      	str	r3, [r7, #4]
 800248e:	460b      	mov	r3, r1
 8002490:	817b      	strh	r3, [r7, #10]
 8002492:	4613      	mov	r3, r2
 8002494:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	685a      	ldr	r2, [r3, #4]
 800249c:	69bb      	ldr	r3, [r7, #24]
 800249e:	0d5b      	lsrs	r3, r3, #21
 80024a0:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80024a4:	4b0d      	ldr	r3, [pc, #52]	; (80024dc <I2C_TransferConfig+0x58>)
 80024a6:	430b      	orrs	r3, r1
 80024a8:	43db      	mvns	r3, r3
 80024aa:	ea02 0103 	and.w	r1, r2, r3
 80024ae:	897b      	ldrh	r3, [r7, #10]
 80024b0:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80024b4:	7a7b      	ldrb	r3, [r7, #9]
 80024b6:	041b      	lsls	r3, r3, #16
 80024b8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80024bc:	431a      	orrs	r2, r3
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	431a      	orrs	r2, r3
 80024c2:	69bb      	ldr	r3, [r7, #24]
 80024c4:	431a      	orrs	r2, r3
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	430a      	orrs	r2, r1
 80024cc:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 80024ce:	bf00      	nop
 80024d0:	3714      	adds	r7, #20
 80024d2:	46bd      	mov	sp, r7
 80024d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d8:	4770      	bx	lr
 80024da:	bf00      	nop
 80024dc:	03ff63ff 	.word	0x03ff63ff

080024e0 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 80024e0:	b480      	push	{r7}
 80024e2:	b085      	sub	sp, #20
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	6078      	str	r0, [r7, #4]
 80024e8:	460b      	mov	r3, r1
 80024ea:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 80024ec:	2300      	movs	r3, #0
 80024ee:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 80024f0:	887b      	ldrh	r3, [r7, #2]
 80024f2:	f003 0301 	and.w	r3, r3, #1
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d00f      	beq.n	800251a <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 8002500:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002508:	b2db      	uxtb	r3, r3
 800250a:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800250e:	2b28      	cmp	r3, #40	; 0x28
 8002510:	d003      	beq.n	800251a <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8002518:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800251a:	887b      	ldrh	r3, [r7, #2]
 800251c:	f003 0302 	and.w	r3, r3, #2
 8002520:	2b00      	cmp	r3, #0
 8002522:	d00f      	beq.n	8002544 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 800252a:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002532:	b2db      	uxtb	r3, r3
 8002534:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002538:	2b28      	cmp	r3, #40	; 0x28
 800253a:	d003      	beq.n	8002544 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8002542:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8002544:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8002548:	2b00      	cmp	r3, #0
 800254a:	da03      	bge.n	8002554 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8002552:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8002554:	887b      	ldrh	r3, [r7, #2]
 8002556:	2b10      	cmp	r3, #16
 8002558:	d103      	bne.n	8002562 <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8002560:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8002562:	887b      	ldrh	r3, [r7, #2]
 8002564:	2b20      	cmp	r3, #32
 8002566:	d103      	bne.n	8002570 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	f043 0320 	orr.w	r3, r3, #32
 800256e:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8002570:	887b      	ldrh	r3, [r7, #2]
 8002572:	2b40      	cmp	r3, #64	; 0x40
 8002574:	d103      	bne.n	800257e <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800257c:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	6819      	ldr	r1, [r3, #0]
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	43da      	mvns	r2, r3
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	400a      	ands	r2, r1
 800258e:	601a      	str	r2, [r3, #0]
}
 8002590:	bf00      	nop
 8002592:	3714      	adds	r7, #20
 8002594:	46bd      	mov	sp, r7
 8002596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800259a:	4770      	bx	lr

0800259c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800259c:	b480      	push	{r7}
 800259e:	b083      	sub	sp, #12
 80025a0:	af00      	add	r7, sp, #0
 80025a2:	6078      	str	r0, [r7, #4]
 80025a4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80025ac:	b2db      	uxtb	r3, r3
 80025ae:	2b20      	cmp	r3, #32
 80025b0:	d138      	bne.n	8002624 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80025b8:	2b01      	cmp	r3, #1
 80025ba:	d101      	bne.n	80025c0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80025bc:	2302      	movs	r3, #2
 80025be:	e032      	b.n	8002626 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	2201      	movs	r2, #1
 80025c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	2224      	movs	r2, #36	; 0x24
 80025cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	681a      	ldr	r2, [r3, #0]
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	f022 0201 	bic.w	r2, r2, #1
 80025de:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	681a      	ldr	r2, [r3, #0]
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80025ee:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	6819      	ldr	r1, [r3, #0]
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	683a      	ldr	r2, [r7, #0]
 80025fc:	430a      	orrs	r2, r1
 80025fe:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	681a      	ldr	r2, [r3, #0]
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	f042 0201 	orr.w	r2, r2, #1
 800260e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	2220      	movs	r2, #32
 8002614:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	2200      	movs	r2, #0
 800261c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002620:	2300      	movs	r3, #0
 8002622:	e000      	b.n	8002626 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002624:	2302      	movs	r3, #2
  }
}
 8002626:	4618      	mov	r0, r3
 8002628:	370c      	adds	r7, #12
 800262a:	46bd      	mov	sp, r7
 800262c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002630:	4770      	bx	lr

08002632 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002632:	b480      	push	{r7}
 8002634:	b085      	sub	sp, #20
 8002636:	af00      	add	r7, sp, #0
 8002638:	6078      	str	r0, [r7, #4]
 800263a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002642:	b2db      	uxtb	r3, r3
 8002644:	2b20      	cmp	r3, #32
 8002646:	d139      	bne.n	80026bc <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800264e:	2b01      	cmp	r3, #1
 8002650:	d101      	bne.n	8002656 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002652:	2302      	movs	r3, #2
 8002654:	e033      	b.n	80026be <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	2201      	movs	r2, #1
 800265a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	2224      	movs	r2, #36	; 0x24
 8002662:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	681a      	ldr	r2, [r3, #0]
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	f022 0201 	bic.w	r2, r2, #1
 8002674:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002684:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002686:	683b      	ldr	r3, [r7, #0]
 8002688:	021b      	lsls	r3, r3, #8
 800268a:	68fa      	ldr	r2, [r7, #12]
 800268c:	4313      	orrs	r3, r2
 800268e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	68fa      	ldr	r2, [r7, #12]
 8002696:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	681a      	ldr	r2, [r3, #0]
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	f042 0201 	orr.w	r2, r2, #1
 80026a6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	2220      	movs	r2, #32
 80026ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	2200      	movs	r2, #0
 80026b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80026b8:	2300      	movs	r3, #0
 80026ba:	e000      	b.n	80026be <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80026bc:	2302      	movs	r3, #2
  }
}
 80026be:	4618      	mov	r0, r3
 80026c0:	3714      	adds	r7, #20
 80026c2:	46bd      	mov	sp, r7
 80026c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c8:	4770      	bx	lr
	...

080026cc <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80026cc:	b480      	push	{r7}
 80026ce:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80026d0:	4b04      	ldr	r3, [pc, #16]	; (80026e4 <HAL_PWREx_GetVoltageRange+0x18>)
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80026d8:	4618      	mov	r0, r3
 80026da:	46bd      	mov	sp, r7
 80026dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e0:	4770      	bx	lr
 80026e2:	bf00      	nop
 80026e4:	40007000 	.word	0x40007000

080026e8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80026e8:	b480      	push	{r7}
 80026ea:	b085      	sub	sp, #20
 80026ec:	af00      	add	r7, sp, #0
 80026ee:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80026f6:	d130      	bne.n	800275a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80026f8:	4b23      	ldr	r3, [pc, #140]	; (8002788 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002700:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002704:	d038      	beq.n	8002778 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002706:	4b20      	ldr	r3, [pc, #128]	; (8002788 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800270e:	4a1e      	ldr	r2, [pc, #120]	; (8002788 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002710:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002714:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002716:	4b1d      	ldr	r3, [pc, #116]	; (800278c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	2232      	movs	r2, #50	; 0x32
 800271c:	fb02 f303 	mul.w	r3, r2, r3
 8002720:	4a1b      	ldr	r2, [pc, #108]	; (8002790 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002722:	fba2 2303 	umull	r2, r3, r2, r3
 8002726:	0c9b      	lsrs	r3, r3, #18
 8002728:	3301      	adds	r3, #1
 800272a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800272c:	e002      	b.n	8002734 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	3b01      	subs	r3, #1
 8002732:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002734:	4b14      	ldr	r3, [pc, #80]	; (8002788 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002736:	695b      	ldr	r3, [r3, #20]
 8002738:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800273c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002740:	d102      	bne.n	8002748 <HAL_PWREx_ControlVoltageScaling+0x60>
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	2b00      	cmp	r3, #0
 8002746:	d1f2      	bne.n	800272e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002748:	4b0f      	ldr	r3, [pc, #60]	; (8002788 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800274a:	695b      	ldr	r3, [r3, #20]
 800274c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002750:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002754:	d110      	bne.n	8002778 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002756:	2303      	movs	r3, #3
 8002758:	e00f      	b.n	800277a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800275a:	4b0b      	ldr	r3, [pc, #44]	; (8002788 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002762:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002766:	d007      	beq.n	8002778 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002768:	4b07      	ldr	r3, [pc, #28]	; (8002788 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002770:	4a05      	ldr	r2, [pc, #20]	; (8002788 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002772:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002776:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002778:	2300      	movs	r3, #0
}
 800277a:	4618      	mov	r0, r3
 800277c:	3714      	adds	r7, #20
 800277e:	46bd      	mov	sp, r7
 8002780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002784:	4770      	bx	lr
 8002786:	bf00      	nop
 8002788:	40007000 	.word	0x40007000
 800278c:	20000000 	.word	0x20000000
 8002790:	431bde83 	.word	0x431bde83

08002794 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002794:	b580      	push	{r7, lr}
 8002796:	b088      	sub	sp, #32
 8002798:	af00      	add	r7, sp, #0
 800279a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d101      	bne.n	80027a6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80027a2:	2301      	movs	r3, #1
 80027a4:	e3d4      	b.n	8002f50 <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80027a6:	4ba1      	ldr	r3, [pc, #644]	; (8002a2c <HAL_RCC_OscConfig+0x298>)
 80027a8:	689b      	ldr	r3, [r3, #8]
 80027aa:	f003 030c 	and.w	r3, r3, #12
 80027ae:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80027b0:	4b9e      	ldr	r3, [pc, #632]	; (8002a2c <HAL_RCC_OscConfig+0x298>)
 80027b2:	68db      	ldr	r3, [r3, #12]
 80027b4:	f003 0303 	and.w	r3, r3, #3
 80027b8:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	f003 0310 	and.w	r3, r3, #16
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	f000 80e4 	beq.w	8002990 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80027c8:	69bb      	ldr	r3, [r7, #24]
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d007      	beq.n	80027de <HAL_RCC_OscConfig+0x4a>
 80027ce:	69bb      	ldr	r3, [r7, #24]
 80027d0:	2b0c      	cmp	r3, #12
 80027d2:	f040 808b 	bne.w	80028ec <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80027d6:	697b      	ldr	r3, [r7, #20]
 80027d8:	2b01      	cmp	r3, #1
 80027da:	f040 8087 	bne.w	80028ec <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80027de:	4b93      	ldr	r3, [pc, #588]	; (8002a2c <HAL_RCC_OscConfig+0x298>)
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	f003 0302 	and.w	r3, r3, #2
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d005      	beq.n	80027f6 <HAL_RCC_OscConfig+0x62>
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	699b      	ldr	r3, [r3, #24]
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d101      	bne.n	80027f6 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80027f2:	2301      	movs	r3, #1
 80027f4:	e3ac      	b.n	8002f50 <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	6a1a      	ldr	r2, [r3, #32]
 80027fa:	4b8c      	ldr	r3, [pc, #560]	; (8002a2c <HAL_RCC_OscConfig+0x298>)
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	f003 0308 	and.w	r3, r3, #8
 8002802:	2b00      	cmp	r3, #0
 8002804:	d004      	beq.n	8002810 <HAL_RCC_OscConfig+0x7c>
 8002806:	4b89      	ldr	r3, [pc, #548]	; (8002a2c <HAL_RCC_OscConfig+0x298>)
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800280e:	e005      	b.n	800281c <HAL_RCC_OscConfig+0x88>
 8002810:	4b86      	ldr	r3, [pc, #536]	; (8002a2c <HAL_RCC_OscConfig+0x298>)
 8002812:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002816:	091b      	lsrs	r3, r3, #4
 8002818:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800281c:	4293      	cmp	r3, r2
 800281e:	d223      	bcs.n	8002868 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	6a1b      	ldr	r3, [r3, #32]
 8002824:	4618      	mov	r0, r3
 8002826:	f000 fd3f 	bl	80032a8 <RCC_SetFlashLatencyFromMSIRange>
 800282a:	4603      	mov	r3, r0
 800282c:	2b00      	cmp	r3, #0
 800282e:	d001      	beq.n	8002834 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8002830:	2301      	movs	r3, #1
 8002832:	e38d      	b.n	8002f50 <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002834:	4b7d      	ldr	r3, [pc, #500]	; (8002a2c <HAL_RCC_OscConfig+0x298>)
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	4a7c      	ldr	r2, [pc, #496]	; (8002a2c <HAL_RCC_OscConfig+0x298>)
 800283a:	f043 0308 	orr.w	r3, r3, #8
 800283e:	6013      	str	r3, [r2, #0]
 8002840:	4b7a      	ldr	r3, [pc, #488]	; (8002a2c <HAL_RCC_OscConfig+0x298>)
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	6a1b      	ldr	r3, [r3, #32]
 800284c:	4977      	ldr	r1, [pc, #476]	; (8002a2c <HAL_RCC_OscConfig+0x298>)
 800284e:	4313      	orrs	r3, r2
 8002850:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002852:	4b76      	ldr	r3, [pc, #472]	; (8002a2c <HAL_RCC_OscConfig+0x298>)
 8002854:	685b      	ldr	r3, [r3, #4]
 8002856:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	69db      	ldr	r3, [r3, #28]
 800285e:	021b      	lsls	r3, r3, #8
 8002860:	4972      	ldr	r1, [pc, #456]	; (8002a2c <HAL_RCC_OscConfig+0x298>)
 8002862:	4313      	orrs	r3, r2
 8002864:	604b      	str	r3, [r1, #4]
 8002866:	e025      	b.n	80028b4 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002868:	4b70      	ldr	r3, [pc, #448]	; (8002a2c <HAL_RCC_OscConfig+0x298>)
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	4a6f      	ldr	r2, [pc, #444]	; (8002a2c <HAL_RCC_OscConfig+0x298>)
 800286e:	f043 0308 	orr.w	r3, r3, #8
 8002872:	6013      	str	r3, [r2, #0]
 8002874:	4b6d      	ldr	r3, [pc, #436]	; (8002a2c <HAL_RCC_OscConfig+0x298>)
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	6a1b      	ldr	r3, [r3, #32]
 8002880:	496a      	ldr	r1, [pc, #424]	; (8002a2c <HAL_RCC_OscConfig+0x298>)
 8002882:	4313      	orrs	r3, r2
 8002884:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002886:	4b69      	ldr	r3, [pc, #420]	; (8002a2c <HAL_RCC_OscConfig+0x298>)
 8002888:	685b      	ldr	r3, [r3, #4]
 800288a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	69db      	ldr	r3, [r3, #28]
 8002892:	021b      	lsls	r3, r3, #8
 8002894:	4965      	ldr	r1, [pc, #404]	; (8002a2c <HAL_RCC_OscConfig+0x298>)
 8002896:	4313      	orrs	r3, r2
 8002898:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800289a:	69bb      	ldr	r3, [r7, #24]
 800289c:	2b00      	cmp	r3, #0
 800289e:	d109      	bne.n	80028b4 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	6a1b      	ldr	r3, [r3, #32]
 80028a4:	4618      	mov	r0, r3
 80028a6:	f000 fcff 	bl	80032a8 <RCC_SetFlashLatencyFromMSIRange>
 80028aa:	4603      	mov	r3, r0
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d001      	beq.n	80028b4 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80028b0:	2301      	movs	r3, #1
 80028b2:	e34d      	b.n	8002f50 <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80028b4:	f000 fc36 	bl	8003124 <HAL_RCC_GetSysClockFreq>
 80028b8:	4601      	mov	r1, r0
 80028ba:	4b5c      	ldr	r3, [pc, #368]	; (8002a2c <HAL_RCC_OscConfig+0x298>)
 80028bc:	689b      	ldr	r3, [r3, #8]
 80028be:	091b      	lsrs	r3, r3, #4
 80028c0:	f003 030f 	and.w	r3, r3, #15
 80028c4:	4a5a      	ldr	r2, [pc, #360]	; (8002a30 <HAL_RCC_OscConfig+0x29c>)
 80028c6:	5cd3      	ldrb	r3, [r2, r3]
 80028c8:	f003 031f 	and.w	r3, r3, #31
 80028cc:	fa21 f303 	lsr.w	r3, r1, r3
 80028d0:	4a58      	ldr	r2, [pc, #352]	; (8002a34 <HAL_RCC_OscConfig+0x2a0>)
 80028d2:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80028d4:	4b58      	ldr	r3, [pc, #352]	; (8002a38 <HAL_RCC_OscConfig+0x2a4>)
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	4618      	mov	r0, r3
 80028da:	f7fe f8fd 	bl	8000ad8 <HAL_InitTick>
 80028de:	4603      	mov	r3, r0
 80028e0:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80028e2:	7bfb      	ldrb	r3, [r7, #15]
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d052      	beq.n	800298e <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80028e8:	7bfb      	ldrb	r3, [r7, #15]
 80028ea:	e331      	b.n	8002f50 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	699b      	ldr	r3, [r3, #24]
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d032      	beq.n	800295a <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80028f4:	4b4d      	ldr	r3, [pc, #308]	; (8002a2c <HAL_RCC_OscConfig+0x298>)
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	4a4c      	ldr	r2, [pc, #304]	; (8002a2c <HAL_RCC_OscConfig+0x298>)
 80028fa:	f043 0301 	orr.w	r3, r3, #1
 80028fe:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002900:	f7fe f93a 	bl	8000b78 <HAL_GetTick>
 8002904:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002906:	e008      	b.n	800291a <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002908:	f7fe f936 	bl	8000b78 <HAL_GetTick>
 800290c:	4602      	mov	r2, r0
 800290e:	693b      	ldr	r3, [r7, #16]
 8002910:	1ad3      	subs	r3, r2, r3
 8002912:	2b02      	cmp	r3, #2
 8002914:	d901      	bls.n	800291a <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8002916:	2303      	movs	r3, #3
 8002918:	e31a      	b.n	8002f50 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800291a:	4b44      	ldr	r3, [pc, #272]	; (8002a2c <HAL_RCC_OscConfig+0x298>)
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	f003 0302 	and.w	r3, r3, #2
 8002922:	2b00      	cmp	r3, #0
 8002924:	d0f0      	beq.n	8002908 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002926:	4b41      	ldr	r3, [pc, #260]	; (8002a2c <HAL_RCC_OscConfig+0x298>)
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	4a40      	ldr	r2, [pc, #256]	; (8002a2c <HAL_RCC_OscConfig+0x298>)
 800292c:	f043 0308 	orr.w	r3, r3, #8
 8002930:	6013      	str	r3, [r2, #0]
 8002932:	4b3e      	ldr	r3, [pc, #248]	; (8002a2c <HAL_RCC_OscConfig+0x298>)
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	6a1b      	ldr	r3, [r3, #32]
 800293e:	493b      	ldr	r1, [pc, #236]	; (8002a2c <HAL_RCC_OscConfig+0x298>)
 8002940:	4313      	orrs	r3, r2
 8002942:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002944:	4b39      	ldr	r3, [pc, #228]	; (8002a2c <HAL_RCC_OscConfig+0x298>)
 8002946:	685b      	ldr	r3, [r3, #4]
 8002948:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	69db      	ldr	r3, [r3, #28]
 8002950:	021b      	lsls	r3, r3, #8
 8002952:	4936      	ldr	r1, [pc, #216]	; (8002a2c <HAL_RCC_OscConfig+0x298>)
 8002954:	4313      	orrs	r3, r2
 8002956:	604b      	str	r3, [r1, #4]
 8002958:	e01a      	b.n	8002990 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800295a:	4b34      	ldr	r3, [pc, #208]	; (8002a2c <HAL_RCC_OscConfig+0x298>)
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	4a33      	ldr	r2, [pc, #204]	; (8002a2c <HAL_RCC_OscConfig+0x298>)
 8002960:	f023 0301 	bic.w	r3, r3, #1
 8002964:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002966:	f7fe f907 	bl	8000b78 <HAL_GetTick>
 800296a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800296c:	e008      	b.n	8002980 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800296e:	f7fe f903 	bl	8000b78 <HAL_GetTick>
 8002972:	4602      	mov	r2, r0
 8002974:	693b      	ldr	r3, [r7, #16]
 8002976:	1ad3      	subs	r3, r2, r3
 8002978:	2b02      	cmp	r3, #2
 800297a:	d901      	bls.n	8002980 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 800297c:	2303      	movs	r3, #3
 800297e:	e2e7      	b.n	8002f50 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002980:	4b2a      	ldr	r3, [pc, #168]	; (8002a2c <HAL_RCC_OscConfig+0x298>)
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	f003 0302 	and.w	r3, r3, #2
 8002988:	2b00      	cmp	r3, #0
 800298a:	d1f0      	bne.n	800296e <HAL_RCC_OscConfig+0x1da>
 800298c:	e000      	b.n	8002990 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800298e:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	f003 0301 	and.w	r3, r3, #1
 8002998:	2b00      	cmp	r3, #0
 800299a:	d074      	beq.n	8002a86 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800299c:	69bb      	ldr	r3, [r7, #24]
 800299e:	2b08      	cmp	r3, #8
 80029a0:	d005      	beq.n	80029ae <HAL_RCC_OscConfig+0x21a>
 80029a2:	69bb      	ldr	r3, [r7, #24]
 80029a4:	2b0c      	cmp	r3, #12
 80029a6:	d10e      	bne.n	80029c6 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80029a8:	697b      	ldr	r3, [r7, #20]
 80029aa:	2b03      	cmp	r3, #3
 80029ac:	d10b      	bne.n	80029c6 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80029ae:	4b1f      	ldr	r3, [pc, #124]	; (8002a2c <HAL_RCC_OscConfig+0x298>)
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d064      	beq.n	8002a84 <HAL_RCC_OscConfig+0x2f0>
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	685b      	ldr	r3, [r3, #4]
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d160      	bne.n	8002a84 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80029c2:	2301      	movs	r3, #1
 80029c4:	e2c4      	b.n	8002f50 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	685b      	ldr	r3, [r3, #4]
 80029ca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80029ce:	d106      	bne.n	80029de <HAL_RCC_OscConfig+0x24a>
 80029d0:	4b16      	ldr	r3, [pc, #88]	; (8002a2c <HAL_RCC_OscConfig+0x298>)
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	4a15      	ldr	r2, [pc, #84]	; (8002a2c <HAL_RCC_OscConfig+0x298>)
 80029d6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80029da:	6013      	str	r3, [r2, #0]
 80029dc:	e01d      	b.n	8002a1a <HAL_RCC_OscConfig+0x286>
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	685b      	ldr	r3, [r3, #4]
 80029e2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80029e6:	d10c      	bne.n	8002a02 <HAL_RCC_OscConfig+0x26e>
 80029e8:	4b10      	ldr	r3, [pc, #64]	; (8002a2c <HAL_RCC_OscConfig+0x298>)
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	4a0f      	ldr	r2, [pc, #60]	; (8002a2c <HAL_RCC_OscConfig+0x298>)
 80029ee:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80029f2:	6013      	str	r3, [r2, #0]
 80029f4:	4b0d      	ldr	r3, [pc, #52]	; (8002a2c <HAL_RCC_OscConfig+0x298>)
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	4a0c      	ldr	r2, [pc, #48]	; (8002a2c <HAL_RCC_OscConfig+0x298>)
 80029fa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80029fe:	6013      	str	r3, [r2, #0]
 8002a00:	e00b      	b.n	8002a1a <HAL_RCC_OscConfig+0x286>
 8002a02:	4b0a      	ldr	r3, [pc, #40]	; (8002a2c <HAL_RCC_OscConfig+0x298>)
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	4a09      	ldr	r2, [pc, #36]	; (8002a2c <HAL_RCC_OscConfig+0x298>)
 8002a08:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002a0c:	6013      	str	r3, [r2, #0]
 8002a0e:	4b07      	ldr	r3, [pc, #28]	; (8002a2c <HAL_RCC_OscConfig+0x298>)
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	4a06      	ldr	r2, [pc, #24]	; (8002a2c <HAL_RCC_OscConfig+0x298>)
 8002a14:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002a18:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	685b      	ldr	r3, [r3, #4]
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d01c      	beq.n	8002a5c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a22:	f7fe f8a9 	bl	8000b78 <HAL_GetTick>
 8002a26:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002a28:	e011      	b.n	8002a4e <HAL_RCC_OscConfig+0x2ba>
 8002a2a:	bf00      	nop
 8002a2c:	40021000 	.word	0x40021000
 8002a30:	08004724 	.word	0x08004724
 8002a34:	20000000 	.word	0x20000000
 8002a38:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002a3c:	f7fe f89c 	bl	8000b78 <HAL_GetTick>
 8002a40:	4602      	mov	r2, r0
 8002a42:	693b      	ldr	r3, [r7, #16]
 8002a44:	1ad3      	subs	r3, r2, r3
 8002a46:	2b64      	cmp	r3, #100	; 0x64
 8002a48:	d901      	bls.n	8002a4e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002a4a:	2303      	movs	r3, #3
 8002a4c:	e280      	b.n	8002f50 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002a4e:	4baf      	ldr	r3, [pc, #700]	; (8002d0c <HAL_RCC_OscConfig+0x578>)
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d0f0      	beq.n	8002a3c <HAL_RCC_OscConfig+0x2a8>
 8002a5a:	e014      	b.n	8002a86 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a5c:	f7fe f88c 	bl	8000b78 <HAL_GetTick>
 8002a60:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002a62:	e008      	b.n	8002a76 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002a64:	f7fe f888 	bl	8000b78 <HAL_GetTick>
 8002a68:	4602      	mov	r2, r0
 8002a6a:	693b      	ldr	r3, [r7, #16]
 8002a6c:	1ad3      	subs	r3, r2, r3
 8002a6e:	2b64      	cmp	r3, #100	; 0x64
 8002a70:	d901      	bls.n	8002a76 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002a72:	2303      	movs	r3, #3
 8002a74:	e26c      	b.n	8002f50 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002a76:	4ba5      	ldr	r3, [pc, #660]	; (8002d0c <HAL_RCC_OscConfig+0x578>)
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d1f0      	bne.n	8002a64 <HAL_RCC_OscConfig+0x2d0>
 8002a82:	e000      	b.n	8002a86 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a84:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	f003 0302 	and.w	r3, r3, #2
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d060      	beq.n	8002b54 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002a92:	69bb      	ldr	r3, [r7, #24]
 8002a94:	2b04      	cmp	r3, #4
 8002a96:	d005      	beq.n	8002aa4 <HAL_RCC_OscConfig+0x310>
 8002a98:	69bb      	ldr	r3, [r7, #24]
 8002a9a:	2b0c      	cmp	r3, #12
 8002a9c:	d119      	bne.n	8002ad2 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002a9e:	697b      	ldr	r3, [r7, #20]
 8002aa0:	2b02      	cmp	r3, #2
 8002aa2:	d116      	bne.n	8002ad2 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002aa4:	4b99      	ldr	r3, [pc, #612]	; (8002d0c <HAL_RCC_OscConfig+0x578>)
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d005      	beq.n	8002abc <HAL_RCC_OscConfig+0x328>
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	68db      	ldr	r3, [r3, #12]
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d101      	bne.n	8002abc <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002ab8:	2301      	movs	r3, #1
 8002aba:	e249      	b.n	8002f50 <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002abc:	4b93      	ldr	r3, [pc, #588]	; (8002d0c <HAL_RCC_OscConfig+0x578>)
 8002abe:	685b      	ldr	r3, [r3, #4]
 8002ac0:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	691b      	ldr	r3, [r3, #16]
 8002ac8:	061b      	lsls	r3, r3, #24
 8002aca:	4990      	ldr	r1, [pc, #576]	; (8002d0c <HAL_RCC_OscConfig+0x578>)
 8002acc:	4313      	orrs	r3, r2
 8002ace:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002ad0:	e040      	b.n	8002b54 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	68db      	ldr	r3, [r3, #12]
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d023      	beq.n	8002b22 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002ada:	4b8c      	ldr	r3, [pc, #560]	; (8002d0c <HAL_RCC_OscConfig+0x578>)
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	4a8b      	ldr	r2, [pc, #556]	; (8002d0c <HAL_RCC_OscConfig+0x578>)
 8002ae0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ae4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ae6:	f7fe f847 	bl	8000b78 <HAL_GetTick>
 8002aea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002aec:	e008      	b.n	8002b00 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002aee:	f7fe f843 	bl	8000b78 <HAL_GetTick>
 8002af2:	4602      	mov	r2, r0
 8002af4:	693b      	ldr	r3, [r7, #16]
 8002af6:	1ad3      	subs	r3, r2, r3
 8002af8:	2b02      	cmp	r3, #2
 8002afa:	d901      	bls.n	8002b00 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002afc:	2303      	movs	r3, #3
 8002afe:	e227      	b.n	8002f50 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002b00:	4b82      	ldr	r3, [pc, #520]	; (8002d0c <HAL_RCC_OscConfig+0x578>)
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d0f0      	beq.n	8002aee <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b0c:	4b7f      	ldr	r3, [pc, #508]	; (8002d0c <HAL_RCC_OscConfig+0x578>)
 8002b0e:	685b      	ldr	r3, [r3, #4]
 8002b10:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	691b      	ldr	r3, [r3, #16]
 8002b18:	061b      	lsls	r3, r3, #24
 8002b1a:	497c      	ldr	r1, [pc, #496]	; (8002d0c <HAL_RCC_OscConfig+0x578>)
 8002b1c:	4313      	orrs	r3, r2
 8002b1e:	604b      	str	r3, [r1, #4]
 8002b20:	e018      	b.n	8002b54 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002b22:	4b7a      	ldr	r3, [pc, #488]	; (8002d0c <HAL_RCC_OscConfig+0x578>)
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	4a79      	ldr	r2, [pc, #484]	; (8002d0c <HAL_RCC_OscConfig+0x578>)
 8002b28:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002b2c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b2e:	f7fe f823 	bl	8000b78 <HAL_GetTick>
 8002b32:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002b34:	e008      	b.n	8002b48 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002b36:	f7fe f81f 	bl	8000b78 <HAL_GetTick>
 8002b3a:	4602      	mov	r2, r0
 8002b3c:	693b      	ldr	r3, [r7, #16]
 8002b3e:	1ad3      	subs	r3, r2, r3
 8002b40:	2b02      	cmp	r3, #2
 8002b42:	d901      	bls.n	8002b48 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002b44:	2303      	movs	r3, #3
 8002b46:	e203      	b.n	8002f50 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002b48:	4b70      	ldr	r3, [pc, #448]	; (8002d0c <HAL_RCC_OscConfig+0x578>)
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d1f0      	bne.n	8002b36 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	f003 0308 	and.w	r3, r3, #8
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d03c      	beq.n	8002bda <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	695b      	ldr	r3, [r3, #20]
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d01c      	beq.n	8002ba2 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002b68:	4b68      	ldr	r3, [pc, #416]	; (8002d0c <HAL_RCC_OscConfig+0x578>)
 8002b6a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002b6e:	4a67      	ldr	r2, [pc, #412]	; (8002d0c <HAL_RCC_OscConfig+0x578>)
 8002b70:	f043 0301 	orr.w	r3, r3, #1
 8002b74:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b78:	f7fd fffe 	bl	8000b78 <HAL_GetTick>
 8002b7c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002b7e:	e008      	b.n	8002b92 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002b80:	f7fd fffa 	bl	8000b78 <HAL_GetTick>
 8002b84:	4602      	mov	r2, r0
 8002b86:	693b      	ldr	r3, [r7, #16]
 8002b88:	1ad3      	subs	r3, r2, r3
 8002b8a:	2b02      	cmp	r3, #2
 8002b8c:	d901      	bls.n	8002b92 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002b8e:	2303      	movs	r3, #3
 8002b90:	e1de      	b.n	8002f50 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002b92:	4b5e      	ldr	r3, [pc, #376]	; (8002d0c <HAL_RCC_OscConfig+0x578>)
 8002b94:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002b98:	f003 0302 	and.w	r3, r3, #2
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d0ef      	beq.n	8002b80 <HAL_RCC_OscConfig+0x3ec>
 8002ba0:	e01b      	b.n	8002bda <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002ba2:	4b5a      	ldr	r3, [pc, #360]	; (8002d0c <HAL_RCC_OscConfig+0x578>)
 8002ba4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002ba8:	4a58      	ldr	r2, [pc, #352]	; (8002d0c <HAL_RCC_OscConfig+0x578>)
 8002baa:	f023 0301 	bic.w	r3, r3, #1
 8002bae:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002bb2:	f7fd ffe1 	bl	8000b78 <HAL_GetTick>
 8002bb6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002bb8:	e008      	b.n	8002bcc <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002bba:	f7fd ffdd 	bl	8000b78 <HAL_GetTick>
 8002bbe:	4602      	mov	r2, r0
 8002bc0:	693b      	ldr	r3, [r7, #16]
 8002bc2:	1ad3      	subs	r3, r2, r3
 8002bc4:	2b02      	cmp	r3, #2
 8002bc6:	d901      	bls.n	8002bcc <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002bc8:	2303      	movs	r3, #3
 8002bca:	e1c1      	b.n	8002f50 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002bcc:	4b4f      	ldr	r3, [pc, #316]	; (8002d0c <HAL_RCC_OscConfig+0x578>)
 8002bce:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002bd2:	f003 0302 	and.w	r3, r3, #2
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d1ef      	bne.n	8002bba <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	f003 0304 	and.w	r3, r3, #4
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	f000 80a6 	beq.w	8002d34 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002be8:	2300      	movs	r3, #0
 8002bea:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002bec:	4b47      	ldr	r3, [pc, #284]	; (8002d0c <HAL_RCC_OscConfig+0x578>)
 8002bee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bf0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d10d      	bne.n	8002c14 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002bf8:	4b44      	ldr	r3, [pc, #272]	; (8002d0c <HAL_RCC_OscConfig+0x578>)
 8002bfa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bfc:	4a43      	ldr	r2, [pc, #268]	; (8002d0c <HAL_RCC_OscConfig+0x578>)
 8002bfe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c02:	6593      	str	r3, [r2, #88]	; 0x58
 8002c04:	4b41      	ldr	r3, [pc, #260]	; (8002d0c <HAL_RCC_OscConfig+0x578>)
 8002c06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c08:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c0c:	60bb      	str	r3, [r7, #8]
 8002c0e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002c10:	2301      	movs	r3, #1
 8002c12:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002c14:	4b3e      	ldr	r3, [pc, #248]	; (8002d10 <HAL_RCC_OscConfig+0x57c>)
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d118      	bne.n	8002c52 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002c20:	4b3b      	ldr	r3, [pc, #236]	; (8002d10 <HAL_RCC_OscConfig+0x57c>)
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	4a3a      	ldr	r2, [pc, #232]	; (8002d10 <HAL_RCC_OscConfig+0x57c>)
 8002c26:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c2a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002c2c:	f7fd ffa4 	bl	8000b78 <HAL_GetTick>
 8002c30:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002c32:	e008      	b.n	8002c46 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c34:	f7fd ffa0 	bl	8000b78 <HAL_GetTick>
 8002c38:	4602      	mov	r2, r0
 8002c3a:	693b      	ldr	r3, [r7, #16]
 8002c3c:	1ad3      	subs	r3, r2, r3
 8002c3e:	2b02      	cmp	r3, #2
 8002c40:	d901      	bls.n	8002c46 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002c42:	2303      	movs	r3, #3
 8002c44:	e184      	b.n	8002f50 <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002c46:	4b32      	ldr	r3, [pc, #200]	; (8002d10 <HAL_RCC_OscConfig+0x57c>)
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d0f0      	beq.n	8002c34 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	689b      	ldr	r3, [r3, #8]
 8002c56:	2b01      	cmp	r3, #1
 8002c58:	d108      	bne.n	8002c6c <HAL_RCC_OscConfig+0x4d8>
 8002c5a:	4b2c      	ldr	r3, [pc, #176]	; (8002d0c <HAL_RCC_OscConfig+0x578>)
 8002c5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c60:	4a2a      	ldr	r2, [pc, #168]	; (8002d0c <HAL_RCC_OscConfig+0x578>)
 8002c62:	f043 0301 	orr.w	r3, r3, #1
 8002c66:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002c6a:	e024      	b.n	8002cb6 <HAL_RCC_OscConfig+0x522>
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	689b      	ldr	r3, [r3, #8]
 8002c70:	2b05      	cmp	r3, #5
 8002c72:	d110      	bne.n	8002c96 <HAL_RCC_OscConfig+0x502>
 8002c74:	4b25      	ldr	r3, [pc, #148]	; (8002d0c <HAL_RCC_OscConfig+0x578>)
 8002c76:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c7a:	4a24      	ldr	r2, [pc, #144]	; (8002d0c <HAL_RCC_OscConfig+0x578>)
 8002c7c:	f043 0304 	orr.w	r3, r3, #4
 8002c80:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002c84:	4b21      	ldr	r3, [pc, #132]	; (8002d0c <HAL_RCC_OscConfig+0x578>)
 8002c86:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c8a:	4a20      	ldr	r2, [pc, #128]	; (8002d0c <HAL_RCC_OscConfig+0x578>)
 8002c8c:	f043 0301 	orr.w	r3, r3, #1
 8002c90:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002c94:	e00f      	b.n	8002cb6 <HAL_RCC_OscConfig+0x522>
 8002c96:	4b1d      	ldr	r3, [pc, #116]	; (8002d0c <HAL_RCC_OscConfig+0x578>)
 8002c98:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c9c:	4a1b      	ldr	r2, [pc, #108]	; (8002d0c <HAL_RCC_OscConfig+0x578>)
 8002c9e:	f023 0301 	bic.w	r3, r3, #1
 8002ca2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002ca6:	4b19      	ldr	r3, [pc, #100]	; (8002d0c <HAL_RCC_OscConfig+0x578>)
 8002ca8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002cac:	4a17      	ldr	r2, [pc, #92]	; (8002d0c <HAL_RCC_OscConfig+0x578>)
 8002cae:	f023 0304 	bic.w	r3, r3, #4
 8002cb2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	689b      	ldr	r3, [r3, #8]
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d016      	beq.n	8002cec <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002cbe:	f7fd ff5b 	bl	8000b78 <HAL_GetTick>
 8002cc2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002cc4:	e00a      	b.n	8002cdc <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002cc6:	f7fd ff57 	bl	8000b78 <HAL_GetTick>
 8002cca:	4602      	mov	r2, r0
 8002ccc:	693b      	ldr	r3, [r7, #16]
 8002cce:	1ad3      	subs	r3, r2, r3
 8002cd0:	f241 3288 	movw	r2, #5000	; 0x1388
 8002cd4:	4293      	cmp	r3, r2
 8002cd6:	d901      	bls.n	8002cdc <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8002cd8:	2303      	movs	r3, #3
 8002cda:	e139      	b.n	8002f50 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002cdc:	4b0b      	ldr	r3, [pc, #44]	; (8002d0c <HAL_RCC_OscConfig+0x578>)
 8002cde:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ce2:	f003 0302 	and.w	r3, r3, #2
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d0ed      	beq.n	8002cc6 <HAL_RCC_OscConfig+0x532>
 8002cea:	e01a      	b.n	8002d22 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002cec:	f7fd ff44 	bl	8000b78 <HAL_GetTick>
 8002cf0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002cf2:	e00f      	b.n	8002d14 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002cf4:	f7fd ff40 	bl	8000b78 <HAL_GetTick>
 8002cf8:	4602      	mov	r2, r0
 8002cfa:	693b      	ldr	r3, [r7, #16]
 8002cfc:	1ad3      	subs	r3, r2, r3
 8002cfe:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d02:	4293      	cmp	r3, r2
 8002d04:	d906      	bls.n	8002d14 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002d06:	2303      	movs	r3, #3
 8002d08:	e122      	b.n	8002f50 <HAL_RCC_OscConfig+0x7bc>
 8002d0a:	bf00      	nop
 8002d0c:	40021000 	.word	0x40021000
 8002d10:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002d14:	4b90      	ldr	r3, [pc, #576]	; (8002f58 <HAL_RCC_OscConfig+0x7c4>)
 8002d16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d1a:	f003 0302 	and.w	r3, r3, #2
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d1e8      	bne.n	8002cf4 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002d22:	7ffb      	ldrb	r3, [r7, #31]
 8002d24:	2b01      	cmp	r3, #1
 8002d26:	d105      	bne.n	8002d34 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d28:	4b8b      	ldr	r3, [pc, #556]	; (8002f58 <HAL_RCC_OscConfig+0x7c4>)
 8002d2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d2c:	4a8a      	ldr	r2, [pc, #552]	; (8002f58 <HAL_RCC_OscConfig+0x7c4>)
 8002d2e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002d32:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	f000 8108 	beq.w	8002f4e <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d42:	2b02      	cmp	r3, #2
 8002d44:	f040 80d0 	bne.w	8002ee8 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002d48:	4b83      	ldr	r3, [pc, #524]	; (8002f58 <HAL_RCC_OscConfig+0x7c4>)
 8002d4a:	68db      	ldr	r3, [r3, #12]
 8002d4c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d4e:	697b      	ldr	r3, [r7, #20]
 8002d50:	f003 0203 	and.w	r2, r3, #3
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d58:	429a      	cmp	r2, r3
 8002d5a:	d130      	bne.n	8002dbe <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002d5c:	697b      	ldr	r3, [r7, #20]
 8002d5e:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d66:	3b01      	subs	r3, #1
 8002d68:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d6a:	429a      	cmp	r2, r3
 8002d6c:	d127      	bne.n	8002dbe <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002d6e:	697b      	ldr	r3, [r7, #20]
 8002d70:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d78:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002d7a:	429a      	cmp	r2, r3
 8002d7c:	d11f      	bne.n	8002dbe <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002d7e:	697b      	ldr	r3, [r7, #20]
 8002d80:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d84:	687a      	ldr	r2, [r7, #4]
 8002d86:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002d88:	2a07      	cmp	r2, #7
 8002d8a:	bf14      	ite	ne
 8002d8c:	2201      	movne	r2, #1
 8002d8e:	2200      	moveq	r2, #0
 8002d90:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002d92:	4293      	cmp	r3, r2
 8002d94:	d113      	bne.n	8002dbe <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002d96:	697b      	ldr	r3, [r7, #20]
 8002d98:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002da0:	085b      	lsrs	r3, r3, #1
 8002da2:	3b01      	subs	r3, #1
 8002da4:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002da6:	429a      	cmp	r2, r3
 8002da8:	d109      	bne.n	8002dbe <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002daa:	697b      	ldr	r3, [r7, #20]
 8002dac:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002db4:	085b      	lsrs	r3, r3, #1
 8002db6:	3b01      	subs	r3, #1
 8002db8:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002dba:	429a      	cmp	r2, r3
 8002dbc:	d06e      	beq.n	8002e9c <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002dbe:	69bb      	ldr	r3, [r7, #24]
 8002dc0:	2b0c      	cmp	r3, #12
 8002dc2:	d069      	beq.n	8002e98 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002dc4:	4b64      	ldr	r3, [pc, #400]	; (8002f58 <HAL_RCC_OscConfig+0x7c4>)
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d105      	bne.n	8002ddc <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002dd0:	4b61      	ldr	r3, [pc, #388]	; (8002f58 <HAL_RCC_OscConfig+0x7c4>)
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d001      	beq.n	8002de0 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8002ddc:	2301      	movs	r3, #1
 8002dde:	e0b7      	b.n	8002f50 <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002de0:	4b5d      	ldr	r3, [pc, #372]	; (8002f58 <HAL_RCC_OscConfig+0x7c4>)
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	4a5c      	ldr	r2, [pc, #368]	; (8002f58 <HAL_RCC_OscConfig+0x7c4>)
 8002de6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002dea:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002dec:	f7fd fec4 	bl	8000b78 <HAL_GetTick>
 8002df0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002df2:	e008      	b.n	8002e06 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002df4:	f7fd fec0 	bl	8000b78 <HAL_GetTick>
 8002df8:	4602      	mov	r2, r0
 8002dfa:	693b      	ldr	r3, [r7, #16]
 8002dfc:	1ad3      	subs	r3, r2, r3
 8002dfe:	2b02      	cmp	r3, #2
 8002e00:	d901      	bls.n	8002e06 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8002e02:	2303      	movs	r3, #3
 8002e04:	e0a4      	b.n	8002f50 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002e06:	4b54      	ldr	r3, [pc, #336]	; (8002f58 <HAL_RCC_OscConfig+0x7c4>)
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d1f0      	bne.n	8002df4 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002e12:	4b51      	ldr	r3, [pc, #324]	; (8002f58 <HAL_RCC_OscConfig+0x7c4>)
 8002e14:	68da      	ldr	r2, [r3, #12]
 8002e16:	4b51      	ldr	r3, [pc, #324]	; (8002f5c <HAL_RCC_OscConfig+0x7c8>)
 8002e18:	4013      	ands	r3, r2
 8002e1a:	687a      	ldr	r2, [r7, #4]
 8002e1c:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002e1e:	687a      	ldr	r2, [r7, #4]
 8002e20:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002e22:	3a01      	subs	r2, #1
 8002e24:	0112      	lsls	r2, r2, #4
 8002e26:	4311      	orrs	r1, r2
 8002e28:	687a      	ldr	r2, [r7, #4]
 8002e2a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002e2c:	0212      	lsls	r2, r2, #8
 8002e2e:	4311      	orrs	r1, r2
 8002e30:	687a      	ldr	r2, [r7, #4]
 8002e32:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002e34:	0852      	lsrs	r2, r2, #1
 8002e36:	3a01      	subs	r2, #1
 8002e38:	0552      	lsls	r2, r2, #21
 8002e3a:	4311      	orrs	r1, r2
 8002e3c:	687a      	ldr	r2, [r7, #4]
 8002e3e:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002e40:	0852      	lsrs	r2, r2, #1
 8002e42:	3a01      	subs	r2, #1
 8002e44:	0652      	lsls	r2, r2, #25
 8002e46:	4311      	orrs	r1, r2
 8002e48:	687a      	ldr	r2, [r7, #4]
 8002e4a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002e4c:	0912      	lsrs	r2, r2, #4
 8002e4e:	0452      	lsls	r2, r2, #17
 8002e50:	430a      	orrs	r2, r1
 8002e52:	4941      	ldr	r1, [pc, #260]	; (8002f58 <HAL_RCC_OscConfig+0x7c4>)
 8002e54:	4313      	orrs	r3, r2
 8002e56:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002e58:	4b3f      	ldr	r3, [pc, #252]	; (8002f58 <HAL_RCC_OscConfig+0x7c4>)
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	4a3e      	ldr	r2, [pc, #248]	; (8002f58 <HAL_RCC_OscConfig+0x7c4>)
 8002e5e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002e62:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002e64:	4b3c      	ldr	r3, [pc, #240]	; (8002f58 <HAL_RCC_OscConfig+0x7c4>)
 8002e66:	68db      	ldr	r3, [r3, #12]
 8002e68:	4a3b      	ldr	r2, [pc, #236]	; (8002f58 <HAL_RCC_OscConfig+0x7c4>)
 8002e6a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002e6e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002e70:	f7fd fe82 	bl	8000b78 <HAL_GetTick>
 8002e74:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002e76:	e008      	b.n	8002e8a <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e78:	f7fd fe7e 	bl	8000b78 <HAL_GetTick>
 8002e7c:	4602      	mov	r2, r0
 8002e7e:	693b      	ldr	r3, [r7, #16]
 8002e80:	1ad3      	subs	r3, r2, r3
 8002e82:	2b02      	cmp	r3, #2
 8002e84:	d901      	bls.n	8002e8a <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8002e86:	2303      	movs	r3, #3
 8002e88:	e062      	b.n	8002f50 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002e8a:	4b33      	ldr	r3, [pc, #204]	; (8002f58 <HAL_RCC_OscConfig+0x7c4>)
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d0f0      	beq.n	8002e78 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002e96:	e05a      	b.n	8002f4e <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002e98:	2301      	movs	r3, #1
 8002e9a:	e059      	b.n	8002f50 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002e9c:	4b2e      	ldr	r3, [pc, #184]	; (8002f58 <HAL_RCC_OscConfig+0x7c4>)
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d152      	bne.n	8002f4e <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002ea8:	4b2b      	ldr	r3, [pc, #172]	; (8002f58 <HAL_RCC_OscConfig+0x7c4>)
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	4a2a      	ldr	r2, [pc, #168]	; (8002f58 <HAL_RCC_OscConfig+0x7c4>)
 8002eae:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002eb2:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002eb4:	4b28      	ldr	r3, [pc, #160]	; (8002f58 <HAL_RCC_OscConfig+0x7c4>)
 8002eb6:	68db      	ldr	r3, [r3, #12]
 8002eb8:	4a27      	ldr	r2, [pc, #156]	; (8002f58 <HAL_RCC_OscConfig+0x7c4>)
 8002eba:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002ebe:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002ec0:	f7fd fe5a 	bl	8000b78 <HAL_GetTick>
 8002ec4:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002ec6:	e008      	b.n	8002eda <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ec8:	f7fd fe56 	bl	8000b78 <HAL_GetTick>
 8002ecc:	4602      	mov	r2, r0
 8002ece:	693b      	ldr	r3, [r7, #16]
 8002ed0:	1ad3      	subs	r3, r2, r3
 8002ed2:	2b02      	cmp	r3, #2
 8002ed4:	d901      	bls.n	8002eda <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8002ed6:	2303      	movs	r3, #3
 8002ed8:	e03a      	b.n	8002f50 <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002eda:	4b1f      	ldr	r3, [pc, #124]	; (8002f58 <HAL_RCC_OscConfig+0x7c4>)
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d0f0      	beq.n	8002ec8 <HAL_RCC_OscConfig+0x734>
 8002ee6:	e032      	b.n	8002f4e <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002ee8:	69bb      	ldr	r3, [r7, #24]
 8002eea:	2b0c      	cmp	r3, #12
 8002eec:	d02d      	beq.n	8002f4a <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002eee:	4b1a      	ldr	r3, [pc, #104]	; (8002f58 <HAL_RCC_OscConfig+0x7c4>)
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	4a19      	ldr	r2, [pc, #100]	; (8002f58 <HAL_RCC_OscConfig+0x7c4>)
 8002ef4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002ef8:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8002efa:	4b17      	ldr	r3, [pc, #92]	; (8002f58 <HAL_RCC_OscConfig+0x7c4>)
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d105      	bne.n	8002f12 <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8002f06:	4b14      	ldr	r3, [pc, #80]	; (8002f58 <HAL_RCC_OscConfig+0x7c4>)
 8002f08:	68db      	ldr	r3, [r3, #12]
 8002f0a:	4a13      	ldr	r2, [pc, #76]	; (8002f58 <HAL_RCC_OscConfig+0x7c4>)
 8002f0c:	f023 0303 	bic.w	r3, r3, #3
 8002f10:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002f12:	4b11      	ldr	r3, [pc, #68]	; (8002f58 <HAL_RCC_OscConfig+0x7c4>)
 8002f14:	68db      	ldr	r3, [r3, #12]
 8002f16:	4a10      	ldr	r2, [pc, #64]	; (8002f58 <HAL_RCC_OscConfig+0x7c4>)
 8002f18:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8002f1c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f20:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f22:	f7fd fe29 	bl	8000b78 <HAL_GetTick>
 8002f26:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002f28:	e008      	b.n	8002f3c <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f2a:	f7fd fe25 	bl	8000b78 <HAL_GetTick>
 8002f2e:	4602      	mov	r2, r0
 8002f30:	693b      	ldr	r3, [r7, #16]
 8002f32:	1ad3      	subs	r3, r2, r3
 8002f34:	2b02      	cmp	r3, #2
 8002f36:	d901      	bls.n	8002f3c <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 8002f38:	2303      	movs	r3, #3
 8002f3a:	e009      	b.n	8002f50 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002f3c:	4b06      	ldr	r3, [pc, #24]	; (8002f58 <HAL_RCC_OscConfig+0x7c4>)
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d1f0      	bne.n	8002f2a <HAL_RCC_OscConfig+0x796>
 8002f48:	e001      	b.n	8002f4e <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002f4a:	2301      	movs	r3, #1
 8002f4c:	e000      	b.n	8002f50 <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 8002f4e:	2300      	movs	r3, #0
}
 8002f50:	4618      	mov	r0, r3
 8002f52:	3720      	adds	r7, #32
 8002f54:	46bd      	mov	sp, r7
 8002f56:	bd80      	pop	{r7, pc}
 8002f58:	40021000 	.word	0x40021000
 8002f5c:	f99d808c 	.word	0xf99d808c

08002f60 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002f60:	b580      	push	{r7, lr}
 8002f62:	b084      	sub	sp, #16
 8002f64:	af00      	add	r7, sp, #0
 8002f66:	6078      	str	r0, [r7, #4]
 8002f68:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d101      	bne.n	8002f74 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002f70:	2301      	movs	r3, #1
 8002f72:	e0c8      	b.n	8003106 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002f74:	4b66      	ldr	r3, [pc, #408]	; (8003110 <HAL_RCC_ClockConfig+0x1b0>)
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	f003 0307 	and.w	r3, r3, #7
 8002f7c:	683a      	ldr	r2, [r7, #0]
 8002f7e:	429a      	cmp	r2, r3
 8002f80:	d910      	bls.n	8002fa4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f82:	4b63      	ldr	r3, [pc, #396]	; (8003110 <HAL_RCC_ClockConfig+0x1b0>)
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	f023 0207 	bic.w	r2, r3, #7
 8002f8a:	4961      	ldr	r1, [pc, #388]	; (8003110 <HAL_RCC_ClockConfig+0x1b0>)
 8002f8c:	683b      	ldr	r3, [r7, #0]
 8002f8e:	4313      	orrs	r3, r2
 8002f90:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f92:	4b5f      	ldr	r3, [pc, #380]	; (8003110 <HAL_RCC_ClockConfig+0x1b0>)
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	f003 0307 	and.w	r3, r3, #7
 8002f9a:	683a      	ldr	r2, [r7, #0]
 8002f9c:	429a      	cmp	r2, r3
 8002f9e:	d001      	beq.n	8002fa4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002fa0:	2301      	movs	r3, #1
 8002fa2:	e0b0      	b.n	8003106 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	f003 0301 	and.w	r3, r3, #1
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d04c      	beq.n	800304a <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	685b      	ldr	r3, [r3, #4]
 8002fb4:	2b03      	cmp	r3, #3
 8002fb6:	d107      	bne.n	8002fc8 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002fb8:	4b56      	ldr	r3, [pc, #344]	; (8003114 <HAL_RCC_ClockConfig+0x1b4>)
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d121      	bne.n	8003008 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8002fc4:	2301      	movs	r3, #1
 8002fc6:	e09e      	b.n	8003106 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	685b      	ldr	r3, [r3, #4]
 8002fcc:	2b02      	cmp	r3, #2
 8002fce:	d107      	bne.n	8002fe0 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002fd0:	4b50      	ldr	r3, [pc, #320]	; (8003114 <HAL_RCC_ClockConfig+0x1b4>)
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d115      	bne.n	8003008 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002fdc:	2301      	movs	r3, #1
 8002fde:	e092      	b.n	8003106 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	685b      	ldr	r3, [r3, #4]
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d107      	bne.n	8002ff8 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002fe8:	4b4a      	ldr	r3, [pc, #296]	; (8003114 <HAL_RCC_ClockConfig+0x1b4>)
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	f003 0302 	and.w	r3, r3, #2
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d109      	bne.n	8003008 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002ff4:	2301      	movs	r3, #1
 8002ff6:	e086      	b.n	8003106 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002ff8:	4b46      	ldr	r3, [pc, #280]	; (8003114 <HAL_RCC_ClockConfig+0x1b4>)
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003000:	2b00      	cmp	r3, #0
 8003002:	d101      	bne.n	8003008 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8003004:	2301      	movs	r3, #1
 8003006:	e07e      	b.n	8003106 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003008:	4b42      	ldr	r3, [pc, #264]	; (8003114 <HAL_RCC_ClockConfig+0x1b4>)
 800300a:	689b      	ldr	r3, [r3, #8]
 800300c:	f023 0203 	bic.w	r2, r3, #3
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	685b      	ldr	r3, [r3, #4]
 8003014:	493f      	ldr	r1, [pc, #252]	; (8003114 <HAL_RCC_ClockConfig+0x1b4>)
 8003016:	4313      	orrs	r3, r2
 8003018:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800301a:	f7fd fdad 	bl	8000b78 <HAL_GetTick>
 800301e:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003020:	e00a      	b.n	8003038 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003022:	f7fd fda9 	bl	8000b78 <HAL_GetTick>
 8003026:	4602      	mov	r2, r0
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	1ad3      	subs	r3, r2, r3
 800302c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003030:	4293      	cmp	r3, r2
 8003032:	d901      	bls.n	8003038 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8003034:	2303      	movs	r3, #3
 8003036:	e066      	b.n	8003106 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003038:	4b36      	ldr	r3, [pc, #216]	; (8003114 <HAL_RCC_ClockConfig+0x1b4>)
 800303a:	689b      	ldr	r3, [r3, #8]
 800303c:	f003 020c 	and.w	r2, r3, #12
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	685b      	ldr	r3, [r3, #4]
 8003044:	009b      	lsls	r3, r3, #2
 8003046:	429a      	cmp	r2, r3
 8003048:	d1eb      	bne.n	8003022 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	f003 0302 	and.w	r3, r3, #2
 8003052:	2b00      	cmp	r3, #0
 8003054:	d008      	beq.n	8003068 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003056:	4b2f      	ldr	r3, [pc, #188]	; (8003114 <HAL_RCC_ClockConfig+0x1b4>)
 8003058:	689b      	ldr	r3, [r3, #8]
 800305a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	689b      	ldr	r3, [r3, #8]
 8003062:	492c      	ldr	r1, [pc, #176]	; (8003114 <HAL_RCC_ClockConfig+0x1b4>)
 8003064:	4313      	orrs	r3, r2
 8003066:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003068:	4b29      	ldr	r3, [pc, #164]	; (8003110 <HAL_RCC_ClockConfig+0x1b0>)
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	f003 0307 	and.w	r3, r3, #7
 8003070:	683a      	ldr	r2, [r7, #0]
 8003072:	429a      	cmp	r2, r3
 8003074:	d210      	bcs.n	8003098 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003076:	4b26      	ldr	r3, [pc, #152]	; (8003110 <HAL_RCC_ClockConfig+0x1b0>)
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	f023 0207 	bic.w	r2, r3, #7
 800307e:	4924      	ldr	r1, [pc, #144]	; (8003110 <HAL_RCC_ClockConfig+0x1b0>)
 8003080:	683b      	ldr	r3, [r7, #0]
 8003082:	4313      	orrs	r3, r2
 8003084:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003086:	4b22      	ldr	r3, [pc, #136]	; (8003110 <HAL_RCC_ClockConfig+0x1b0>)
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	f003 0307 	and.w	r3, r3, #7
 800308e:	683a      	ldr	r2, [r7, #0]
 8003090:	429a      	cmp	r2, r3
 8003092:	d001      	beq.n	8003098 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8003094:	2301      	movs	r3, #1
 8003096:	e036      	b.n	8003106 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	f003 0304 	and.w	r3, r3, #4
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d008      	beq.n	80030b6 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80030a4:	4b1b      	ldr	r3, [pc, #108]	; (8003114 <HAL_RCC_ClockConfig+0x1b4>)
 80030a6:	689b      	ldr	r3, [r3, #8]
 80030a8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	68db      	ldr	r3, [r3, #12]
 80030b0:	4918      	ldr	r1, [pc, #96]	; (8003114 <HAL_RCC_ClockConfig+0x1b4>)
 80030b2:	4313      	orrs	r3, r2
 80030b4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	f003 0308 	and.w	r3, r3, #8
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d009      	beq.n	80030d6 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80030c2:	4b14      	ldr	r3, [pc, #80]	; (8003114 <HAL_RCC_ClockConfig+0x1b4>)
 80030c4:	689b      	ldr	r3, [r3, #8]
 80030c6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	691b      	ldr	r3, [r3, #16]
 80030ce:	00db      	lsls	r3, r3, #3
 80030d0:	4910      	ldr	r1, [pc, #64]	; (8003114 <HAL_RCC_ClockConfig+0x1b4>)
 80030d2:	4313      	orrs	r3, r2
 80030d4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80030d6:	f000 f825 	bl	8003124 <HAL_RCC_GetSysClockFreq>
 80030da:	4601      	mov	r1, r0
 80030dc:	4b0d      	ldr	r3, [pc, #52]	; (8003114 <HAL_RCC_ClockConfig+0x1b4>)
 80030de:	689b      	ldr	r3, [r3, #8]
 80030e0:	091b      	lsrs	r3, r3, #4
 80030e2:	f003 030f 	and.w	r3, r3, #15
 80030e6:	4a0c      	ldr	r2, [pc, #48]	; (8003118 <HAL_RCC_ClockConfig+0x1b8>)
 80030e8:	5cd3      	ldrb	r3, [r2, r3]
 80030ea:	f003 031f 	and.w	r3, r3, #31
 80030ee:	fa21 f303 	lsr.w	r3, r1, r3
 80030f2:	4a0a      	ldr	r2, [pc, #40]	; (800311c <HAL_RCC_ClockConfig+0x1bc>)
 80030f4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80030f6:	4b0a      	ldr	r3, [pc, #40]	; (8003120 <HAL_RCC_ClockConfig+0x1c0>)
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	4618      	mov	r0, r3
 80030fc:	f7fd fcec 	bl	8000ad8 <HAL_InitTick>
 8003100:	4603      	mov	r3, r0
 8003102:	72fb      	strb	r3, [r7, #11]

  return status;
 8003104:	7afb      	ldrb	r3, [r7, #11]
}
 8003106:	4618      	mov	r0, r3
 8003108:	3710      	adds	r7, #16
 800310a:	46bd      	mov	sp, r7
 800310c:	bd80      	pop	{r7, pc}
 800310e:	bf00      	nop
 8003110:	40022000 	.word	0x40022000
 8003114:	40021000 	.word	0x40021000
 8003118:	08004724 	.word	0x08004724
 800311c:	20000000 	.word	0x20000000
 8003120:	20000004 	.word	0x20000004

08003124 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003124:	b480      	push	{r7}
 8003126:	b089      	sub	sp, #36	; 0x24
 8003128:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800312a:	2300      	movs	r3, #0
 800312c:	61fb      	str	r3, [r7, #28]
 800312e:	2300      	movs	r3, #0
 8003130:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003132:	4b3d      	ldr	r3, [pc, #244]	; (8003228 <HAL_RCC_GetSysClockFreq+0x104>)
 8003134:	689b      	ldr	r3, [r3, #8]
 8003136:	f003 030c 	and.w	r3, r3, #12
 800313a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800313c:	4b3a      	ldr	r3, [pc, #232]	; (8003228 <HAL_RCC_GetSysClockFreq+0x104>)
 800313e:	68db      	ldr	r3, [r3, #12]
 8003140:	f003 0303 	and.w	r3, r3, #3
 8003144:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003146:	693b      	ldr	r3, [r7, #16]
 8003148:	2b00      	cmp	r3, #0
 800314a:	d005      	beq.n	8003158 <HAL_RCC_GetSysClockFreq+0x34>
 800314c:	693b      	ldr	r3, [r7, #16]
 800314e:	2b0c      	cmp	r3, #12
 8003150:	d121      	bne.n	8003196 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	2b01      	cmp	r3, #1
 8003156:	d11e      	bne.n	8003196 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003158:	4b33      	ldr	r3, [pc, #204]	; (8003228 <HAL_RCC_GetSysClockFreq+0x104>)
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	f003 0308 	and.w	r3, r3, #8
 8003160:	2b00      	cmp	r3, #0
 8003162:	d107      	bne.n	8003174 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003164:	4b30      	ldr	r3, [pc, #192]	; (8003228 <HAL_RCC_GetSysClockFreq+0x104>)
 8003166:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800316a:	0a1b      	lsrs	r3, r3, #8
 800316c:	f003 030f 	and.w	r3, r3, #15
 8003170:	61fb      	str	r3, [r7, #28]
 8003172:	e005      	b.n	8003180 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003174:	4b2c      	ldr	r3, [pc, #176]	; (8003228 <HAL_RCC_GetSysClockFreq+0x104>)
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	091b      	lsrs	r3, r3, #4
 800317a:	f003 030f 	and.w	r3, r3, #15
 800317e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003180:	4a2a      	ldr	r2, [pc, #168]	; (800322c <HAL_RCC_GetSysClockFreq+0x108>)
 8003182:	69fb      	ldr	r3, [r7, #28]
 8003184:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003188:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800318a:	693b      	ldr	r3, [r7, #16]
 800318c:	2b00      	cmp	r3, #0
 800318e:	d10d      	bne.n	80031ac <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003190:	69fb      	ldr	r3, [r7, #28]
 8003192:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003194:	e00a      	b.n	80031ac <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003196:	693b      	ldr	r3, [r7, #16]
 8003198:	2b04      	cmp	r3, #4
 800319a:	d102      	bne.n	80031a2 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800319c:	4b24      	ldr	r3, [pc, #144]	; (8003230 <HAL_RCC_GetSysClockFreq+0x10c>)
 800319e:	61bb      	str	r3, [r7, #24]
 80031a0:	e004      	b.n	80031ac <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80031a2:	693b      	ldr	r3, [r7, #16]
 80031a4:	2b08      	cmp	r3, #8
 80031a6:	d101      	bne.n	80031ac <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80031a8:	4b22      	ldr	r3, [pc, #136]	; (8003234 <HAL_RCC_GetSysClockFreq+0x110>)
 80031aa:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80031ac:	693b      	ldr	r3, [r7, #16]
 80031ae:	2b0c      	cmp	r3, #12
 80031b0:	d133      	bne.n	800321a <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80031b2:	4b1d      	ldr	r3, [pc, #116]	; (8003228 <HAL_RCC_GetSysClockFreq+0x104>)
 80031b4:	68db      	ldr	r3, [r3, #12]
 80031b6:	f003 0303 	and.w	r3, r3, #3
 80031ba:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80031bc:	68bb      	ldr	r3, [r7, #8]
 80031be:	2b02      	cmp	r3, #2
 80031c0:	d002      	beq.n	80031c8 <HAL_RCC_GetSysClockFreq+0xa4>
 80031c2:	2b03      	cmp	r3, #3
 80031c4:	d003      	beq.n	80031ce <HAL_RCC_GetSysClockFreq+0xaa>
 80031c6:	e005      	b.n	80031d4 <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80031c8:	4b19      	ldr	r3, [pc, #100]	; (8003230 <HAL_RCC_GetSysClockFreq+0x10c>)
 80031ca:	617b      	str	r3, [r7, #20]
      break;
 80031cc:	e005      	b.n	80031da <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80031ce:	4b19      	ldr	r3, [pc, #100]	; (8003234 <HAL_RCC_GetSysClockFreq+0x110>)
 80031d0:	617b      	str	r3, [r7, #20]
      break;
 80031d2:	e002      	b.n	80031da <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80031d4:	69fb      	ldr	r3, [r7, #28]
 80031d6:	617b      	str	r3, [r7, #20]
      break;
 80031d8:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80031da:	4b13      	ldr	r3, [pc, #76]	; (8003228 <HAL_RCC_GetSysClockFreq+0x104>)
 80031dc:	68db      	ldr	r3, [r3, #12]
 80031de:	091b      	lsrs	r3, r3, #4
 80031e0:	f003 0307 	and.w	r3, r3, #7
 80031e4:	3301      	adds	r3, #1
 80031e6:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80031e8:	4b0f      	ldr	r3, [pc, #60]	; (8003228 <HAL_RCC_GetSysClockFreq+0x104>)
 80031ea:	68db      	ldr	r3, [r3, #12]
 80031ec:	0a1b      	lsrs	r3, r3, #8
 80031ee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80031f2:	697a      	ldr	r2, [r7, #20]
 80031f4:	fb02 f203 	mul.w	r2, r2, r3
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80031fe:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003200:	4b09      	ldr	r3, [pc, #36]	; (8003228 <HAL_RCC_GetSysClockFreq+0x104>)
 8003202:	68db      	ldr	r3, [r3, #12]
 8003204:	0e5b      	lsrs	r3, r3, #25
 8003206:	f003 0303 	and.w	r3, r3, #3
 800320a:	3301      	adds	r3, #1
 800320c:	005b      	lsls	r3, r3, #1
 800320e:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003210:	697a      	ldr	r2, [r7, #20]
 8003212:	683b      	ldr	r3, [r7, #0]
 8003214:	fbb2 f3f3 	udiv	r3, r2, r3
 8003218:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800321a:	69bb      	ldr	r3, [r7, #24]
}
 800321c:	4618      	mov	r0, r3
 800321e:	3724      	adds	r7, #36	; 0x24
 8003220:	46bd      	mov	sp, r7
 8003222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003226:	4770      	bx	lr
 8003228:	40021000 	.word	0x40021000
 800322c:	0800473c 	.word	0x0800473c
 8003230:	00f42400 	.word	0x00f42400
 8003234:	007a1200 	.word	0x007a1200

08003238 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003238:	b480      	push	{r7}
 800323a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800323c:	4b03      	ldr	r3, [pc, #12]	; (800324c <HAL_RCC_GetHCLKFreq+0x14>)
 800323e:	681b      	ldr	r3, [r3, #0]
}
 8003240:	4618      	mov	r0, r3
 8003242:	46bd      	mov	sp, r7
 8003244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003248:	4770      	bx	lr
 800324a:	bf00      	nop
 800324c:	20000000 	.word	0x20000000

08003250 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003250:	b580      	push	{r7, lr}
 8003252:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003254:	f7ff fff0 	bl	8003238 <HAL_RCC_GetHCLKFreq>
 8003258:	4601      	mov	r1, r0
 800325a:	4b06      	ldr	r3, [pc, #24]	; (8003274 <HAL_RCC_GetPCLK1Freq+0x24>)
 800325c:	689b      	ldr	r3, [r3, #8]
 800325e:	0a1b      	lsrs	r3, r3, #8
 8003260:	f003 0307 	and.w	r3, r3, #7
 8003264:	4a04      	ldr	r2, [pc, #16]	; (8003278 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003266:	5cd3      	ldrb	r3, [r2, r3]
 8003268:	f003 031f 	and.w	r3, r3, #31
 800326c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003270:	4618      	mov	r0, r3
 8003272:	bd80      	pop	{r7, pc}
 8003274:	40021000 	.word	0x40021000
 8003278:	08004734 	.word	0x08004734

0800327c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800327c:	b580      	push	{r7, lr}
 800327e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003280:	f7ff ffda 	bl	8003238 <HAL_RCC_GetHCLKFreq>
 8003284:	4601      	mov	r1, r0
 8003286:	4b06      	ldr	r3, [pc, #24]	; (80032a0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003288:	689b      	ldr	r3, [r3, #8]
 800328a:	0adb      	lsrs	r3, r3, #11
 800328c:	f003 0307 	and.w	r3, r3, #7
 8003290:	4a04      	ldr	r2, [pc, #16]	; (80032a4 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003292:	5cd3      	ldrb	r3, [r2, r3]
 8003294:	f003 031f 	and.w	r3, r3, #31
 8003298:	fa21 f303 	lsr.w	r3, r1, r3
}
 800329c:	4618      	mov	r0, r3
 800329e:	bd80      	pop	{r7, pc}
 80032a0:	40021000 	.word	0x40021000
 80032a4:	08004734 	.word	0x08004734

080032a8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80032a8:	b580      	push	{r7, lr}
 80032aa:	b086      	sub	sp, #24
 80032ac:	af00      	add	r7, sp, #0
 80032ae:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80032b0:	2300      	movs	r3, #0
 80032b2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80032b4:	4b2a      	ldr	r3, [pc, #168]	; (8003360 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80032b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d003      	beq.n	80032c8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80032c0:	f7ff fa04 	bl	80026cc <HAL_PWREx_GetVoltageRange>
 80032c4:	6178      	str	r0, [r7, #20]
 80032c6:	e014      	b.n	80032f2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80032c8:	4b25      	ldr	r3, [pc, #148]	; (8003360 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80032ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032cc:	4a24      	ldr	r2, [pc, #144]	; (8003360 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80032ce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80032d2:	6593      	str	r3, [r2, #88]	; 0x58
 80032d4:	4b22      	ldr	r3, [pc, #136]	; (8003360 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80032d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032dc:	60fb      	str	r3, [r7, #12]
 80032de:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80032e0:	f7ff f9f4 	bl	80026cc <HAL_PWREx_GetVoltageRange>
 80032e4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80032e6:	4b1e      	ldr	r3, [pc, #120]	; (8003360 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80032e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032ea:	4a1d      	ldr	r2, [pc, #116]	; (8003360 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80032ec:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80032f0:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80032f2:	697b      	ldr	r3, [r7, #20]
 80032f4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80032f8:	d10b      	bne.n	8003312 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	2b80      	cmp	r3, #128	; 0x80
 80032fe:	d919      	bls.n	8003334 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	2ba0      	cmp	r3, #160	; 0xa0
 8003304:	d902      	bls.n	800330c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003306:	2302      	movs	r3, #2
 8003308:	613b      	str	r3, [r7, #16]
 800330a:	e013      	b.n	8003334 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800330c:	2301      	movs	r3, #1
 800330e:	613b      	str	r3, [r7, #16]
 8003310:	e010      	b.n	8003334 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	2b80      	cmp	r3, #128	; 0x80
 8003316:	d902      	bls.n	800331e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003318:	2303      	movs	r3, #3
 800331a:	613b      	str	r3, [r7, #16]
 800331c:	e00a      	b.n	8003334 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	2b80      	cmp	r3, #128	; 0x80
 8003322:	d102      	bne.n	800332a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003324:	2302      	movs	r3, #2
 8003326:	613b      	str	r3, [r7, #16]
 8003328:	e004      	b.n	8003334 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	2b70      	cmp	r3, #112	; 0x70
 800332e:	d101      	bne.n	8003334 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003330:	2301      	movs	r3, #1
 8003332:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003334:	4b0b      	ldr	r3, [pc, #44]	; (8003364 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	f023 0207 	bic.w	r2, r3, #7
 800333c:	4909      	ldr	r1, [pc, #36]	; (8003364 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800333e:	693b      	ldr	r3, [r7, #16]
 8003340:	4313      	orrs	r3, r2
 8003342:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003344:	4b07      	ldr	r3, [pc, #28]	; (8003364 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	f003 0307 	and.w	r3, r3, #7
 800334c:	693a      	ldr	r2, [r7, #16]
 800334e:	429a      	cmp	r2, r3
 8003350:	d001      	beq.n	8003356 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8003352:	2301      	movs	r3, #1
 8003354:	e000      	b.n	8003358 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8003356:	2300      	movs	r3, #0
}
 8003358:	4618      	mov	r0, r3
 800335a:	3718      	adds	r7, #24
 800335c:	46bd      	mov	sp, r7
 800335e:	bd80      	pop	{r7, pc}
 8003360:	40021000 	.word	0x40021000
 8003364:	40022000 	.word	0x40022000

08003368 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003368:	b580      	push	{r7, lr}
 800336a:	b086      	sub	sp, #24
 800336c:	af00      	add	r7, sp, #0
 800336e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003370:	2300      	movs	r3, #0
 8003372:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003374:	2300      	movs	r3, #0
 8003376:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003380:	2b00      	cmp	r3, #0
 8003382:	d03f      	beq.n	8003404 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003388:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800338c:	d01c      	beq.n	80033c8 <HAL_RCCEx_PeriphCLKConfig+0x60>
 800338e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003392:	d802      	bhi.n	800339a <HAL_RCCEx_PeriphCLKConfig+0x32>
 8003394:	2b00      	cmp	r3, #0
 8003396:	d00e      	beq.n	80033b6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
 8003398:	e01f      	b.n	80033da <HAL_RCCEx_PeriphCLKConfig+0x72>
 800339a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800339e:	d003      	beq.n	80033a8 <HAL_RCCEx_PeriphCLKConfig+0x40>
 80033a0:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80033a4:	d01c      	beq.n	80033e0 <HAL_RCCEx_PeriphCLKConfig+0x78>
 80033a6:	e018      	b.n	80033da <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80033a8:	4b85      	ldr	r3, [pc, #532]	; (80035c0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80033aa:	68db      	ldr	r3, [r3, #12]
 80033ac:	4a84      	ldr	r2, [pc, #528]	; (80035c0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80033ae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80033b2:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80033b4:	e015      	b.n	80033e2 <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	3304      	adds	r3, #4
 80033ba:	2100      	movs	r1, #0
 80033bc:	4618      	mov	r0, r3
 80033be:	f000 fab9 	bl	8003934 <RCCEx_PLLSAI1_Config>
 80033c2:	4603      	mov	r3, r0
 80033c4:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80033c6:	e00c      	b.n	80033e2 <HAL_RCCEx_PeriphCLKConfig+0x7a>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	3320      	adds	r3, #32
 80033cc:	2100      	movs	r1, #0
 80033ce:	4618      	mov	r0, r3
 80033d0:	f000 fba0 	bl	8003b14 <RCCEx_PLLSAI2_Config>
 80033d4:	4603      	mov	r3, r0
 80033d6:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80033d8:	e003      	b.n	80033e2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80033da:	2301      	movs	r3, #1
 80033dc:	74fb      	strb	r3, [r7, #19]
      break;
 80033de:	e000      	b.n	80033e2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 80033e0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80033e2:	7cfb      	ldrb	r3, [r7, #19]
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d10b      	bne.n	8003400 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80033e8:	4b75      	ldr	r3, [pc, #468]	; (80035c0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80033ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033ee:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80033f6:	4972      	ldr	r1, [pc, #456]	; (80035c0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80033f8:	4313      	orrs	r3, r2
 80033fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80033fe:	e001      	b.n	8003404 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003400:	7cfb      	ldrb	r3, [r7, #19]
 8003402:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800340c:	2b00      	cmp	r3, #0
 800340e:	d03f      	beq.n	8003490 <HAL_RCCEx_PeriphCLKConfig+0x128>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003414:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003418:	d01c      	beq.n	8003454 <HAL_RCCEx_PeriphCLKConfig+0xec>
 800341a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800341e:	d802      	bhi.n	8003426 <HAL_RCCEx_PeriphCLKConfig+0xbe>
 8003420:	2b00      	cmp	r3, #0
 8003422:	d00e      	beq.n	8003442 <HAL_RCCEx_PeriphCLKConfig+0xda>
 8003424:	e01f      	b.n	8003466 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8003426:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800342a:	d003      	beq.n	8003434 <HAL_RCCEx_PeriphCLKConfig+0xcc>
 800342c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003430:	d01c      	beq.n	800346c <HAL_RCCEx_PeriphCLKConfig+0x104>
 8003432:	e018      	b.n	8003466 <HAL_RCCEx_PeriphCLKConfig+0xfe>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003434:	4b62      	ldr	r3, [pc, #392]	; (80035c0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003436:	68db      	ldr	r3, [r3, #12]
 8003438:	4a61      	ldr	r2, [pc, #388]	; (80035c0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800343a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800343e:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003440:	e015      	b.n	800346e <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	3304      	adds	r3, #4
 8003446:	2100      	movs	r1, #0
 8003448:	4618      	mov	r0, r3
 800344a:	f000 fa73 	bl	8003934 <RCCEx_PLLSAI1_Config>
 800344e:	4603      	mov	r3, r0
 8003450:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003452:	e00c      	b.n	800346e <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	3320      	adds	r3, #32
 8003458:	2100      	movs	r1, #0
 800345a:	4618      	mov	r0, r3
 800345c:	f000 fb5a 	bl	8003b14 <RCCEx_PLLSAI2_Config>
 8003460:	4603      	mov	r3, r0
 8003462:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003464:	e003      	b.n	800346e <HAL_RCCEx_PeriphCLKConfig+0x106>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003466:	2301      	movs	r3, #1
 8003468:	74fb      	strb	r3, [r7, #19]
      break;
 800346a:	e000      	b.n	800346e <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 800346c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800346e:	7cfb      	ldrb	r3, [r7, #19]
 8003470:	2b00      	cmp	r3, #0
 8003472:	d10b      	bne.n	800348c <HAL_RCCEx_PeriphCLKConfig+0x124>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003474:	4b52      	ldr	r3, [pc, #328]	; (80035c0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003476:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800347a:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003482:	494f      	ldr	r1, [pc, #316]	; (80035c0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003484:	4313      	orrs	r3, r2
 8003486:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800348a:	e001      	b.n	8003490 <HAL_RCCEx_PeriphCLKConfig+0x128>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800348c:	7cfb      	ldrb	r3, [r7, #19]
 800348e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003498:	2b00      	cmp	r3, #0
 800349a:	f000 80a0 	beq.w	80035de <HAL_RCCEx_PeriphCLKConfig+0x276>
  {
    FlagStatus       pwrclkchanged = RESET;
 800349e:	2300      	movs	r3, #0
 80034a0:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80034a2:	4b47      	ldr	r3, [pc, #284]	; (80035c0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80034a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d101      	bne.n	80034b2 <HAL_RCCEx_PeriphCLKConfig+0x14a>
 80034ae:	2301      	movs	r3, #1
 80034b0:	e000      	b.n	80034b4 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 80034b2:	2300      	movs	r3, #0
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d00d      	beq.n	80034d4 <HAL_RCCEx_PeriphCLKConfig+0x16c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80034b8:	4b41      	ldr	r3, [pc, #260]	; (80035c0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80034ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034bc:	4a40      	ldr	r2, [pc, #256]	; (80035c0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80034be:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80034c2:	6593      	str	r3, [r2, #88]	; 0x58
 80034c4:	4b3e      	ldr	r3, [pc, #248]	; (80035c0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80034c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034cc:	60bb      	str	r3, [r7, #8]
 80034ce:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80034d0:	2301      	movs	r3, #1
 80034d2:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80034d4:	4b3b      	ldr	r3, [pc, #236]	; (80035c4 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	4a3a      	ldr	r2, [pc, #232]	; (80035c4 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 80034da:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80034de:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80034e0:	f7fd fb4a 	bl	8000b78 <HAL_GetTick>
 80034e4:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80034e6:	e009      	b.n	80034fc <HAL_RCCEx_PeriphCLKConfig+0x194>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80034e8:	f7fd fb46 	bl	8000b78 <HAL_GetTick>
 80034ec:	4602      	mov	r2, r0
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	1ad3      	subs	r3, r2, r3
 80034f2:	2b02      	cmp	r3, #2
 80034f4:	d902      	bls.n	80034fc <HAL_RCCEx_PeriphCLKConfig+0x194>
      {
        ret = HAL_TIMEOUT;
 80034f6:	2303      	movs	r3, #3
 80034f8:	74fb      	strb	r3, [r7, #19]
        break;
 80034fa:	e005      	b.n	8003508 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80034fc:	4b31      	ldr	r3, [pc, #196]	; (80035c4 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003504:	2b00      	cmp	r3, #0
 8003506:	d0ef      	beq.n	80034e8 <HAL_RCCEx_PeriphCLKConfig+0x180>
      }
    }

    if(ret == HAL_OK)
 8003508:	7cfb      	ldrb	r3, [r7, #19]
 800350a:	2b00      	cmp	r3, #0
 800350c:	d15c      	bne.n	80035c8 <HAL_RCCEx_PeriphCLKConfig+0x260>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800350e:	4b2c      	ldr	r3, [pc, #176]	; (80035c0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003510:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003514:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003518:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800351a:	697b      	ldr	r3, [r7, #20]
 800351c:	2b00      	cmp	r3, #0
 800351e:	d01f      	beq.n	8003560 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003526:	697a      	ldr	r2, [r7, #20]
 8003528:	429a      	cmp	r2, r3
 800352a:	d019      	beq.n	8003560 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800352c:	4b24      	ldr	r3, [pc, #144]	; (80035c0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800352e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003532:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003536:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003538:	4b21      	ldr	r3, [pc, #132]	; (80035c0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800353a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800353e:	4a20      	ldr	r2, [pc, #128]	; (80035c0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003540:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003544:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003548:	4b1d      	ldr	r3, [pc, #116]	; (80035c0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800354a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800354e:	4a1c      	ldr	r2, [pc, #112]	; (80035c0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003550:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003554:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003558:	4a19      	ldr	r2, [pc, #100]	; (80035c0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800355a:	697b      	ldr	r3, [r7, #20]
 800355c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003560:	697b      	ldr	r3, [r7, #20]
 8003562:	f003 0301 	and.w	r3, r3, #1
 8003566:	2b00      	cmp	r3, #0
 8003568:	d016      	beq.n	8003598 <HAL_RCCEx_PeriphCLKConfig+0x230>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800356a:	f7fd fb05 	bl	8000b78 <HAL_GetTick>
 800356e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003570:	e00b      	b.n	800358a <HAL_RCCEx_PeriphCLKConfig+0x222>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003572:	f7fd fb01 	bl	8000b78 <HAL_GetTick>
 8003576:	4602      	mov	r2, r0
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	1ad3      	subs	r3, r2, r3
 800357c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003580:	4293      	cmp	r3, r2
 8003582:	d902      	bls.n	800358a <HAL_RCCEx_PeriphCLKConfig+0x222>
          {
            ret = HAL_TIMEOUT;
 8003584:	2303      	movs	r3, #3
 8003586:	74fb      	strb	r3, [r7, #19]
            break;
 8003588:	e006      	b.n	8003598 <HAL_RCCEx_PeriphCLKConfig+0x230>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800358a:	4b0d      	ldr	r3, [pc, #52]	; (80035c0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800358c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003590:	f003 0302 	and.w	r3, r3, #2
 8003594:	2b00      	cmp	r3, #0
 8003596:	d0ec      	beq.n	8003572 <HAL_RCCEx_PeriphCLKConfig+0x20a>
          }
        }
      }

      if(ret == HAL_OK)
 8003598:	7cfb      	ldrb	r3, [r7, #19]
 800359a:	2b00      	cmp	r3, #0
 800359c:	d10c      	bne.n	80035b8 <HAL_RCCEx_PeriphCLKConfig+0x250>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800359e:	4b08      	ldr	r3, [pc, #32]	; (80035c0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80035a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035a4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80035ae:	4904      	ldr	r1, [pc, #16]	; (80035c0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80035b0:	4313      	orrs	r3, r2
 80035b2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80035b6:	e009      	b.n	80035cc <HAL_RCCEx_PeriphCLKConfig+0x264>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80035b8:	7cfb      	ldrb	r3, [r7, #19]
 80035ba:	74bb      	strb	r3, [r7, #18]
 80035bc:	e006      	b.n	80035cc <HAL_RCCEx_PeriphCLKConfig+0x264>
 80035be:	bf00      	nop
 80035c0:	40021000 	.word	0x40021000
 80035c4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80035c8:	7cfb      	ldrb	r3, [r7, #19]
 80035ca:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80035cc:	7c7b      	ldrb	r3, [r7, #17]
 80035ce:	2b01      	cmp	r3, #1
 80035d0:	d105      	bne.n	80035de <HAL_RCCEx_PeriphCLKConfig+0x276>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80035d2:	4b9e      	ldr	r3, [pc, #632]	; (800384c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80035d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035d6:	4a9d      	ldr	r2, [pc, #628]	; (800384c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80035d8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80035dc:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	f003 0301 	and.w	r3, r3, #1
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d00a      	beq.n	8003600 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80035ea:	4b98      	ldr	r3, [pc, #608]	; (800384c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80035ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035f0:	f023 0203 	bic.w	r2, r3, #3
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035f8:	4994      	ldr	r1, [pc, #592]	; (800384c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80035fa:	4313      	orrs	r3, r2
 80035fc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	f003 0302 	and.w	r3, r3, #2
 8003608:	2b00      	cmp	r3, #0
 800360a:	d00a      	beq.n	8003622 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800360c:	4b8f      	ldr	r3, [pc, #572]	; (800384c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800360e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003612:	f023 020c 	bic.w	r2, r3, #12
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800361a:	498c      	ldr	r1, [pc, #560]	; (800384c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800361c:	4313      	orrs	r3, r2
 800361e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	f003 0304 	and.w	r3, r3, #4
 800362a:	2b00      	cmp	r3, #0
 800362c:	d00a      	beq.n	8003644 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800362e:	4b87      	ldr	r3, [pc, #540]	; (800384c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003630:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003634:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800363c:	4983      	ldr	r1, [pc, #524]	; (800384c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800363e:	4313      	orrs	r3, r2
 8003640:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	f003 0308 	and.w	r3, r3, #8
 800364c:	2b00      	cmp	r3, #0
 800364e:	d00a      	beq.n	8003666 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003650:	4b7e      	ldr	r3, [pc, #504]	; (800384c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003652:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003656:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800365e:	497b      	ldr	r1, [pc, #492]	; (800384c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003660:	4313      	orrs	r3, r2
 8003662:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	f003 0310 	and.w	r3, r3, #16
 800366e:	2b00      	cmp	r3, #0
 8003670:	d00a      	beq.n	8003688 <HAL_RCCEx_PeriphCLKConfig+0x320>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003672:	4b76      	ldr	r3, [pc, #472]	; (800384c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003674:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003678:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003680:	4972      	ldr	r1, [pc, #456]	; (800384c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003682:	4313      	orrs	r3, r2
 8003684:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	f003 0320 	and.w	r3, r3, #32
 8003690:	2b00      	cmp	r3, #0
 8003692:	d00a      	beq.n	80036aa <HAL_RCCEx_PeriphCLKConfig+0x342>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003694:	4b6d      	ldr	r3, [pc, #436]	; (800384c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003696:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800369a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80036a2:	496a      	ldr	r1, [pc, #424]	; (800384c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80036a4:	4313      	orrs	r3, r2
 80036a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d00a      	beq.n	80036cc <HAL_RCCEx_PeriphCLKConfig+0x364>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80036b6:	4b65      	ldr	r3, [pc, #404]	; (800384c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80036b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036bc:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036c4:	4961      	ldr	r1, [pc, #388]	; (800384c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80036c6:	4313      	orrs	r3, r2
 80036c8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d00a      	beq.n	80036ee <HAL_RCCEx_PeriphCLKConfig+0x386>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80036d8:	4b5c      	ldr	r3, [pc, #368]	; (800384c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80036da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036de:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80036e6:	4959      	ldr	r1, [pc, #356]	; (800384c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80036e8:	4313      	orrs	r3, r2
 80036ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d00a      	beq.n	8003710 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80036fa:	4b54      	ldr	r3, [pc, #336]	; (800384c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80036fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003700:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003708:	4950      	ldr	r1, [pc, #320]	; (800384c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800370a:	4313      	orrs	r3, r2
 800370c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003718:	2b00      	cmp	r3, #0
 800371a:	d00a      	beq.n	8003732 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800371c:	4b4b      	ldr	r3, [pc, #300]	; (800384c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800371e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003722:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800372a:	4948      	ldr	r1, [pc, #288]	; (800384c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800372c:	4313      	orrs	r3, r2
 800372e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800373a:	2b00      	cmp	r3, #0
 800373c:	d00a      	beq.n	8003754 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800373e:	4b43      	ldr	r3, [pc, #268]	; (800384c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003740:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003744:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800374c:	493f      	ldr	r1, [pc, #252]	; (800384c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800374e:	4313      	orrs	r3, r2
 8003750:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800375c:	2b00      	cmp	r3, #0
 800375e:	d028      	beq.n	80037b2 <HAL_RCCEx_PeriphCLKConfig+0x44a>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003760:	4b3a      	ldr	r3, [pc, #232]	; (800384c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003762:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003766:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800376e:	4937      	ldr	r1, [pc, #220]	; (800384c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003770:	4313      	orrs	r3, r2
 8003772:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800377a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800377e:	d106      	bne.n	800378e <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003780:	4b32      	ldr	r3, [pc, #200]	; (800384c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003782:	68db      	ldr	r3, [r3, #12]
 8003784:	4a31      	ldr	r2, [pc, #196]	; (800384c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003786:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800378a:	60d3      	str	r3, [r2, #12]
 800378c:	e011      	b.n	80037b2 <HAL_RCCEx_PeriphCLKConfig+0x44a>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003792:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003796:	d10c      	bne.n	80037b2 <HAL_RCCEx_PeriphCLKConfig+0x44a>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	3304      	adds	r3, #4
 800379c:	2101      	movs	r1, #1
 800379e:	4618      	mov	r0, r3
 80037a0:	f000 f8c8 	bl	8003934 <RCCEx_PLLSAI1_Config>
 80037a4:	4603      	mov	r3, r0
 80037a6:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80037a8:	7cfb      	ldrb	r3, [r7, #19]
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d001      	beq.n	80037b2 <HAL_RCCEx_PeriphCLKConfig+0x44a>
        {
          /* set overall return value */
          status = ret;
 80037ae:	7cfb      	ldrb	r3, [r7, #19]
 80037b0:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d028      	beq.n	8003810 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80037be:	4b23      	ldr	r3, [pc, #140]	; (800384c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80037c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037c4:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037cc:	491f      	ldr	r1, [pc, #124]	; (800384c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80037ce:	4313      	orrs	r3, r2
 80037d0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037d8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80037dc:	d106      	bne.n	80037ec <HAL_RCCEx_PeriphCLKConfig+0x484>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80037de:	4b1b      	ldr	r3, [pc, #108]	; (800384c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80037e0:	68db      	ldr	r3, [r3, #12]
 80037e2:	4a1a      	ldr	r2, [pc, #104]	; (800384c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80037e4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80037e8:	60d3      	str	r3, [r2, #12]
 80037ea:	e011      	b.n	8003810 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037f0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80037f4:	d10c      	bne.n	8003810 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	3304      	adds	r3, #4
 80037fa:	2101      	movs	r1, #1
 80037fc:	4618      	mov	r0, r3
 80037fe:	f000 f899 	bl	8003934 <RCCEx_PLLSAI1_Config>
 8003802:	4603      	mov	r3, r0
 8003804:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003806:	7cfb      	ldrb	r3, [r7, #19]
 8003808:	2b00      	cmp	r3, #0
 800380a:	d001      	beq.n	8003810 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* set overall return value */
        status = ret;
 800380c:	7cfb      	ldrb	r3, [r7, #19]
 800380e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003818:	2b00      	cmp	r3, #0
 800381a:	d02b      	beq.n	8003874 <HAL_RCCEx_PeriphCLKConfig+0x50c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800381c:	4b0b      	ldr	r3, [pc, #44]	; (800384c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800381e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003822:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800382a:	4908      	ldr	r1, [pc, #32]	; (800384c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800382c:	4313      	orrs	r3, r2
 800382e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003836:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800383a:	d109      	bne.n	8003850 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800383c:	4b03      	ldr	r3, [pc, #12]	; (800384c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800383e:	68db      	ldr	r3, [r3, #12]
 8003840:	4a02      	ldr	r2, [pc, #8]	; (800384c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003842:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003846:	60d3      	str	r3, [r2, #12]
 8003848:	e014      	b.n	8003874 <HAL_RCCEx_PeriphCLKConfig+0x50c>
 800384a:	bf00      	nop
 800384c:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003854:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003858:	d10c      	bne.n	8003874 <HAL_RCCEx_PeriphCLKConfig+0x50c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	3304      	adds	r3, #4
 800385e:	2101      	movs	r1, #1
 8003860:	4618      	mov	r0, r3
 8003862:	f000 f867 	bl	8003934 <RCCEx_PLLSAI1_Config>
 8003866:	4603      	mov	r3, r0
 8003868:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800386a:	7cfb      	ldrb	r3, [r7, #19]
 800386c:	2b00      	cmp	r3, #0
 800386e:	d001      	beq.n	8003874 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      {
        /* set overall return value */
        status = ret;
 8003870:	7cfb      	ldrb	r3, [r7, #19]
 8003872:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800387c:	2b00      	cmp	r3, #0
 800387e:	d02f      	beq.n	80038e0 <HAL_RCCEx_PeriphCLKConfig+0x578>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003880:	4b2b      	ldr	r3, [pc, #172]	; (8003930 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003882:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003886:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800388e:	4928      	ldr	r1, [pc, #160]	; (8003930 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003890:	4313      	orrs	r3, r2
 8003892:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800389a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800389e:	d10d      	bne.n	80038bc <HAL_RCCEx_PeriphCLKConfig+0x554>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	3304      	adds	r3, #4
 80038a4:	2102      	movs	r1, #2
 80038a6:	4618      	mov	r0, r3
 80038a8:	f000 f844 	bl	8003934 <RCCEx_PLLSAI1_Config>
 80038ac:	4603      	mov	r3, r0
 80038ae:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80038b0:	7cfb      	ldrb	r3, [r7, #19]
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d014      	beq.n	80038e0 <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 80038b6:	7cfb      	ldrb	r3, [r7, #19]
 80038b8:	74bb      	strb	r3, [r7, #18]
 80038ba:	e011      	b.n	80038e0 <HAL_RCCEx_PeriphCLKConfig+0x578>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80038c0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80038c4:	d10c      	bne.n	80038e0 <HAL_RCCEx_PeriphCLKConfig+0x578>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	3320      	adds	r3, #32
 80038ca:	2102      	movs	r1, #2
 80038cc:	4618      	mov	r0, r3
 80038ce:	f000 f921 	bl	8003b14 <RCCEx_PLLSAI2_Config>
 80038d2:	4603      	mov	r3, r0
 80038d4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80038d6:	7cfb      	ldrb	r3, [r7, #19]
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d001      	beq.n	80038e0 <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 80038dc:	7cfb      	ldrb	r3, [r7, #19]
 80038de:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d00a      	beq.n	8003902 <HAL_RCCEx_PeriphCLKConfig+0x59a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80038ec:	4b10      	ldr	r3, [pc, #64]	; (8003930 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80038ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038f2:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80038fa:	490d      	ldr	r1, [pc, #52]	; (8003930 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80038fc:	4313      	orrs	r3, r2
 80038fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800390a:	2b00      	cmp	r3, #0
 800390c:	d00b      	beq.n	8003926 <HAL_RCCEx_PeriphCLKConfig+0x5be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800390e:	4b08      	ldr	r3, [pc, #32]	; (8003930 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003910:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003914:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800391e:	4904      	ldr	r1, [pc, #16]	; (8003930 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003920:	4313      	orrs	r3, r2
 8003922:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003926:	7cbb      	ldrb	r3, [r7, #18]
}
 8003928:	4618      	mov	r0, r3
 800392a:	3718      	adds	r7, #24
 800392c:	46bd      	mov	sp, r7
 800392e:	bd80      	pop	{r7, pc}
 8003930:	40021000 	.word	0x40021000

08003934 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003934:	b580      	push	{r7, lr}
 8003936:	b084      	sub	sp, #16
 8003938:	af00      	add	r7, sp, #0
 800393a:	6078      	str	r0, [r7, #4]
 800393c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800393e:	2300      	movs	r3, #0
 8003940:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003942:	4b73      	ldr	r3, [pc, #460]	; (8003b10 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003944:	68db      	ldr	r3, [r3, #12]
 8003946:	f003 0303 	and.w	r3, r3, #3
 800394a:	2b00      	cmp	r3, #0
 800394c:	d018      	beq.n	8003980 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800394e:	4b70      	ldr	r3, [pc, #448]	; (8003b10 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003950:	68db      	ldr	r3, [r3, #12]
 8003952:	f003 0203 	and.w	r2, r3, #3
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	429a      	cmp	r2, r3
 800395c:	d10d      	bne.n	800397a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
       ||
 8003962:	2b00      	cmp	r3, #0
 8003964:	d009      	beq.n	800397a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003966:	4b6a      	ldr	r3, [pc, #424]	; (8003b10 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003968:	68db      	ldr	r3, [r3, #12]
 800396a:	091b      	lsrs	r3, r3, #4
 800396c:	f003 0307 	and.w	r3, r3, #7
 8003970:	1c5a      	adds	r2, r3, #1
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	685b      	ldr	r3, [r3, #4]
       ||
 8003976:	429a      	cmp	r2, r3
 8003978:	d044      	beq.n	8003a04 <RCCEx_PLLSAI1_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 800397a:	2301      	movs	r3, #1
 800397c:	73fb      	strb	r3, [r7, #15]
 800397e:	e041      	b.n	8003a04 <RCCEx_PLLSAI1_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	2b02      	cmp	r3, #2
 8003986:	d00c      	beq.n	80039a2 <RCCEx_PLLSAI1_Config+0x6e>
 8003988:	2b03      	cmp	r3, #3
 800398a:	d013      	beq.n	80039b4 <RCCEx_PLLSAI1_Config+0x80>
 800398c:	2b01      	cmp	r3, #1
 800398e:	d120      	bne.n	80039d2 <RCCEx_PLLSAI1_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003990:	4b5f      	ldr	r3, [pc, #380]	; (8003b10 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	f003 0302 	and.w	r3, r3, #2
 8003998:	2b00      	cmp	r3, #0
 800399a:	d11d      	bne.n	80039d8 <RCCEx_PLLSAI1_Config+0xa4>
      {
        status = HAL_ERROR;
 800399c:	2301      	movs	r3, #1
 800399e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80039a0:	e01a      	b.n	80039d8 <RCCEx_PLLSAI1_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80039a2:	4b5b      	ldr	r3, [pc, #364]	; (8003b10 <RCCEx_PLLSAI1_Config+0x1dc>)
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d116      	bne.n	80039dc <RCCEx_PLLSAI1_Config+0xa8>
      {
        status = HAL_ERROR;
 80039ae:	2301      	movs	r3, #1
 80039b0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80039b2:	e013      	b.n	80039dc <RCCEx_PLLSAI1_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80039b4:	4b56      	ldr	r3, [pc, #344]	; (8003b10 <RCCEx_PLLSAI1_Config+0x1dc>)
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d10f      	bne.n	80039e0 <RCCEx_PLLSAI1_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80039c0:	4b53      	ldr	r3, [pc, #332]	; (8003b10 <RCCEx_PLLSAI1_Config+0x1dc>)
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d109      	bne.n	80039e0 <RCCEx_PLLSAI1_Config+0xac>
        {
          status = HAL_ERROR;
 80039cc:	2301      	movs	r3, #1
 80039ce:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80039d0:	e006      	b.n	80039e0 <RCCEx_PLLSAI1_Config+0xac>
    default:
      status = HAL_ERROR;
 80039d2:	2301      	movs	r3, #1
 80039d4:	73fb      	strb	r3, [r7, #15]
      break;
 80039d6:	e004      	b.n	80039e2 <RCCEx_PLLSAI1_Config+0xae>
      break;
 80039d8:	bf00      	nop
 80039da:	e002      	b.n	80039e2 <RCCEx_PLLSAI1_Config+0xae>
      break;
 80039dc:	bf00      	nop
 80039de:	e000      	b.n	80039e2 <RCCEx_PLLSAI1_Config+0xae>
      break;
 80039e0:	bf00      	nop
    }

    if(status == HAL_OK)
 80039e2:	7bfb      	ldrb	r3, [r7, #15]
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d10d      	bne.n	8003a04 <RCCEx_PLLSAI1_Config+0xd0>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80039e8:	4b49      	ldr	r3, [pc, #292]	; (8003b10 <RCCEx_PLLSAI1_Config+0x1dc>)
 80039ea:	68db      	ldr	r3, [r3, #12]
 80039ec:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	6819      	ldr	r1, [r3, #0]
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	685b      	ldr	r3, [r3, #4]
 80039f8:	3b01      	subs	r3, #1
 80039fa:	011b      	lsls	r3, r3, #4
 80039fc:	430b      	orrs	r3, r1
 80039fe:	4944      	ldr	r1, [pc, #272]	; (8003b10 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003a00:	4313      	orrs	r3, r2
 8003a02:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003a04:	7bfb      	ldrb	r3, [r7, #15]
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d17d      	bne.n	8003b06 <RCCEx_PLLSAI1_Config+0x1d2>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003a0a:	4b41      	ldr	r3, [pc, #260]	; (8003b10 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	4a40      	ldr	r2, [pc, #256]	; (8003b10 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003a10:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003a14:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003a16:	f7fd f8af 	bl	8000b78 <HAL_GetTick>
 8003a1a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003a1c:	e009      	b.n	8003a32 <RCCEx_PLLSAI1_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003a1e:	f7fd f8ab 	bl	8000b78 <HAL_GetTick>
 8003a22:	4602      	mov	r2, r0
 8003a24:	68bb      	ldr	r3, [r7, #8]
 8003a26:	1ad3      	subs	r3, r2, r3
 8003a28:	2b02      	cmp	r3, #2
 8003a2a:	d902      	bls.n	8003a32 <RCCEx_PLLSAI1_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 8003a2c:	2303      	movs	r3, #3
 8003a2e:	73fb      	strb	r3, [r7, #15]
        break;
 8003a30:	e005      	b.n	8003a3e <RCCEx_PLLSAI1_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003a32:	4b37      	ldr	r3, [pc, #220]	; (8003b10 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d1ef      	bne.n	8003a1e <RCCEx_PLLSAI1_Config+0xea>
      }
    }

    if(status == HAL_OK)
 8003a3e:	7bfb      	ldrb	r3, [r7, #15]
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d160      	bne.n	8003b06 <RCCEx_PLLSAI1_Config+0x1d2>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003a44:	683b      	ldr	r3, [r7, #0]
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d111      	bne.n	8003a6e <RCCEx_PLLSAI1_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003a4a:	4b31      	ldr	r3, [pc, #196]	; (8003b10 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003a4c:	691b      	ldr	r3, [r3, #16]
 8003a4e:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003a52:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003a56:	687a      	ldr	r2, [r7, #4]
 8003a58:	6892      	ldr	r2, [r2, #8]
 8003a5a:	0211      	lsls	r1, r2, #8
 8003a5c:	687a      	ldr	r2, [r7, #4]
 8003a5e:	68d2      	ldr	r2, [r2, #12]
 8003a60:	0912      	lsrs	r2, r2, #4
 8003a62:	0452      	lsls	r2, r2, #17
 8003a64:	430a      	orrs	r2, r1
 8003a66:	492a      	ldr	r1, [pc, #168]	; (8003b10 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003a68:	4313      	orrs	r3, r2
 8003a6a:	610b      	str	r3, [r1, #16]
 8003a6c:	e027      	b.n	8003abe <RCCEx_PLLSAI1_Config+0x18a>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003a6e:	683b      	ldr	r3, [r7, #0]
 8003a70:	2b01      	cmp	r3, #1
 8003a72:	d112      	bne.n	8003a9a <RCCEx_PLLSAI1_Config+0x166>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003a74:	4b26      	ldr	r3, [pc, #152]	; (8003b10 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003a76:	691b      	ldr	r3, [r3, #16]
 8003a78:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8003a7c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003a80:	687a      	ldr	r2, [r7, #4]
 8003a82:	6892      	ldr	r2, [r2, #8]
 8003a84:	0211      	lsls	r1, r2, #8
 8003a86:	687a      	ldr	r2, [r7, #4]
 8003a88:	6912      	ldr	r2, [r2, #16]
 8003a8a:	0852      	lsrs	r2, r2, #1
 8003a8c:	3a01      	subs	r2, #1
 8003a8e:	0552      	lsls	r2, r2, #21
 8003a90:	430a      	orrs	r2, r1
 8003a92:	491f      	ldr	r1, [pc, #124]	; (8003b10 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003a94:	4313      	orrs	r3, r2
 8003a96:	610b      	str	r3, [r1, #16]
 8003a98:	e011      	b.n	8003abe <RCCEx_PLLSAI1_Config+0x18a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003a9a:	4b1d      	ldr	r3, [pc, #116]	; (8003b10 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003a9c:	691b      	ldr	r3, [r3, #16]
 8003a9e:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003aa2:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003aa6:	687a      	ldr	r2, [r7, #4]
 8003aa8:	6892      	ldr	r2, [r2, #8]
 8003aaa:	0211      	lsls	r1, r2, #8
 8003aac:	687a      	ldr	r2, [r7, #4]
 8003aae:	6952      	ldr	r2, [r2, #20]
 8003ab0:	0852      	lsrs	r2, r2, #1
 8003ab2:	3a01      	subs	r2, #1
 8003ab4:	0652      	lsls	r2, r2, #25
 8003ab6:	430a      	orrs	r2, r1
 8003ab8:	4915      	ldr	r1, [pc, #84]	; (8003b10 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003aba:	4313      	orrs	r3, r2
 8003abc:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003abe:	4b14      	ldr	r3, [pc, #80]	; (8003b10 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	4a13      	ldr	r2, [pc, #76]	; (8003b10 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003ac4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003ac8:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003aca:	f7fd f855 	bl	8000b78 <HAL_GetTick>
 8003ace:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003ad0:	e009      	b.n	8003ae6 <RCCEx_PLLSAI1_Config+0x1b2>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003ad2:	f7fd f851 	bl	8000b78 <HAL_GetTick>
 8003ad6:	4602      	mov	r2, r0
 8003ad8:	68bb      	ldr	r3, [r7, #8]
 8003ada:	1ad3      	subs	r3, r2, r3
 8003adc:	2b02      	cmp	r3, #2
 8003ade:	d902      	bls.n	8003ae6 <RCCEx_PLLSAI1_Config+0x1b2>
        {
          status = HAL_TIMEOUT;
 8003ae0:	2303      	movs	r3, #3
 8003ae2:	73fb      	strb	r3, [r7, #15]
          break;
 8003ae4:	e005      	b.n	8003af2 <RCCEx_PLLSAI1_Config+0x1be>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003ae6:	4b0a      	ldr	r3, [pc, #40]	; (8003b10 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d0ef      	beq.n	8003ad2 <RCCEx_PLLSAI1_Config+0x19e>
        }
      }

      if(status == HAL_OK)
 8003af2:	7bfb      	ldrb	r3, [r7, #15]
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d106      	bne.n	8003b06 <RCCEx_PLLSAI1_Config+0x1d2>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003af8:	4b05      	ldr	r3, [pc, #20]	; (8003b10 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003afa:	691a      	ldr	r2, [r3, #16]
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	699b      	ldr	r3, [r3, #24]
 8003b00:	4903      	ldr	r1, [pc, #12]	; (8003b10 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003b02:	4313      	orrs	r3, r2
 8003b04:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003b06:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b08:	4618      	mov	r0, r3
 8003b0a:	3710      	adds	r7, #16
 8003b0c:	46bd      	mov	sp, r7
 8003b0e:	bd80      	pop	{r7, pc}
 8003b10:	40021000 	.word	0x40021000

08003b14 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003b14:	b580      	push	{r7, lr}
 8003b16:	b084      	sub	sp, #16
 8003b18:	af00      	add	r7, sp, #0
 8003b1a:	6078      	str	r0, [r7, #4]
 8003b1c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003b1e:	2300      	movs	r3, #0
 8003b20:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003b22:	4b68      	ldr	r3, [pc, #416]	; (8003cc4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003b24:	68db      	ldr	r3, [r3, #12]
 8003b26:	f003 0303 	and.w	r3, r3, #3
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d018      	beq.n	8003b60 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8003b2e:	4b65      	ldr	r3, [pc, #404]	; (8003cc4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003b30:	68db      	ldr	r3, [r3, #12]
 8003b32:	f003 0203 	and.w	r2, r3, #3
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	429a      	cmp	r2, r3
 8003b3c:	d10d      	bne.n	8003b5a <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
       ||
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d009      	beq.n	8003b5a <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8003b46:	4b5f      	ldr	r3, [pc, #380]	; (8003cc4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003b48:	68db      	ldr	r3, [r3, #12]
 8003b4a:	091b      	lsrs	r3, r3, #4
 8003b4c:	f003 0307 	and.w	r3, r3, #7
 8003b50:	1c5a      	adds	r2, r3, #1
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	685b      	ldr	r3, [r3, #4]
       ||
 8003b56:	429a      	cmp	r2, r3
 8003b58:	d044      	beq.n	8003be4 <RCCEx_PLLSAI2_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 8003b5a:	2301      	movs	r3, #1
 8003b5c:	73fb      	strb	r3, [r7, #15]
 8003b5e:	e041      	b.n	8003be4 <RCCEx_PLLSAI2_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	2b02      	cmp	r3, #2
 8003b66:	d00c      	beq.n	8003b82 <RCCEx_PLLSAI2_Config+0x6e>
 8003b68:	2b03      	cmp	r3, #3
 8003b6a:	d013      	beq.n	8003b94 <RCCEx_PLLSAI2_Config+0x80>
 8003b6c:	2b01      	cmp	r3, #1
 8003b6e:	d120      	bne.n	8003bb2 <RCCEx_PLLSAI2_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003b70:	4b54      	ldr	r3, [pc, #336]	; (8003cc4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	f003 0302 	and.w	r3, r3, #2
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d11d      	bne.n	8003bb8 <RCCEx_PLLSAI2_Config+0xa4>
      {
        status = HAL_ERROR;
 8003b7c:	2301      	movs	r3, #1
 8003b7e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003b80:	e01a      	b.n	8003bb8 <RCCEx_PLLSAI2_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003b82:	4b50      	ldr	r3, [pc, #320]	; (8003cc4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d116      	bne.n	8003bbc <RCCEx_PLLSAI2_Config+0xa8>
      {
        status = HAL_ERROR;
 8003b8e:	2301      	movs	r3, #1
 8003b90:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003b92:	e013      	b.n	8003bbc <RCCEx_PLLSAI2_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003b94:	4b4b      	ldr	r3, [pc, #300]	; (8003cc4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d10f      	bne.n	8003bc0 <RCCEx_PLLSAI2_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003ba0:	4b48      	ldr	r3, [pc, #288]	; (8003cc4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d109      	bne.n	8003bc0 <RCCEx_PLLSAI2_Config+0xac>
        {
          status = HAL_ERROR;
 8003bac:	2301      	movs	r3, #1
 8003bae:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003bb0:	e006      	b.n	8003bc0 <RCCEx_PLLSAI2_Config+0xac>
    default:
      status = HAL_ERROR;
 8003bb2:	2301      	movs	r3, #1
 8003bb4:	73fb      	strb	r3, [r7, #15]
      break;
 8003bb6:	e004      	b.n	8003bc2 <RCCEx_PLLSAI2_Config+0xae>
      break;
 8003bb8:	bf00      	nop
 8003bba:	e002      	b.n	8003bc2 <RCCEx_PLLSAI2_Config+0xae>
      break;
 8003bbc:	bf00      	nop
 8003bbe:	e000      	b.n	8003bc2 <RCCEx_PLLSAI2_Config+0xae>
      break;
 8003bc0:	bf00      	nop
    }

    if(status == HAL_OK)
 8003bc2:	7bfb      	ldrb	r3, [r7, #15]
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d10d      	bne.n	8003be4 <RCCEx_PLLSAI2_Config+0xd0>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003bc8:	4b3e      	ldr	r3, [pc, #248]	; (8003cc4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003bca:	68db      	ldr	r3, [r3, #12]
 8003bcc:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	6819      	ldr	r1, [r3, #0]
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	685b      	ldr	r3, [r3, #4]
 8003bd8:	3b01      	subs	r3, #1
 8003bda:	011b      	lsls	r3, r3, #4
 8003bdc:	430b      	orrs	r3, r1
 8003bde:	4939      	ldr	r1, [pc, #228]	; (8003cc4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003be0:	4313      	orrs	r3, r2
 8003be2:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003be4:	7bfb      	ldrb	r3, [r7, #15]
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d167      	bne.n	8003cba <RCCEx_PLLSAI2_Config+0x1a6>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003bea:	4b36      	ldr	r3, [pc, #216]	; (8003cc4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	4a35      	ldr	r2, [pc, #212]	; (8003cc4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003bf0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003bf4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003bf6:	f7fc ffbf 	bl	8000b78 <HAL_GetTick>
 8003bfa:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003bfc:	e009      	b.n	8003c12 <RCCEx_PLLSAI2_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003bfe:	f7fc ffbb 	bl	8000b78 <HAL_GetTick>
 8003c02:	4602      	mov	r2, r0
 8003c04:	68bb      	ldr	r3, [r7, #8]
 8003c06:	1ad3      	subs	r3, r2, r3
 8003c08:	2b02      	cmp	r3, #2
 8003c0a:	d902      	bls.n	8003c12 <RCCEx_PLLSAI2_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 8003c0c:	2303      	movs	r3, #3
 8003c0e:	73fb      	strb	r3, [r7, #15]
        break;
 8003c10:	e005      	b.n	8003c1e <RCCEx_PLLSAI2_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003c12:	4b2c      	ldr	r3, [pc, #176]	; (8003cc4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d1ef      	bne.n	8003bfe <RCCEx_PLLSAI2_Config+0xea>
      }
    }

    if(status == HAL_OK)
 8003c1e:	7bfb      	ldrb	r3, [r7, #15]
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d14a      	bne.n	8003cba <RCCEx_PLLSAI2_Config+0x1a6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003c24:	683b      	ldr	r3, [r7, #0]
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d111      	bne.n	8003c4e <RCCEx_PLLSAI2_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003c2a:	4b26      	ldr	r3, [pc, #152]	; (8003cc4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003c2c:	695b      	ldr	r3, [r3, #20]
 8003c2e:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003c32:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003c36:	687a      	ldr	r2, [r7, #4]
 8003c38:	6892      	ldr	r2, [r2, #8]
 8003c3a:	0211      	lsls	r1, r2, #8
 8003c3c:	687a      	ldr	r2, [r7, #4]
 8003c3e:	68d2      	ldr	r2, [r2, #12]
 8003c40:	0912      	lsrs	r2, r2, #4
 8003c42:	0452      	lsls	r2, r2, #17
 8003c44:	430a      	orrs	r2, r1
 8003c46:	491f      	ldr	r1, [pc, #124]	; (8003cc4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003c48:	4313      	orrs	r3, r2
 8003c4a:	614b      	str	r3, [r1, #20]
 8003c4c:	e011      	b.n	8003c72 <RCCEx_PLLSAI2_Config+0x15e>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003c4e:	4b1d      	ldr	r3, [pc, #116]	; (8003cc4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003c50:	695b      	ldr	r3, [r3, #20]
 8003c52:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003c56:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003c5a:	687a      	ldr	r2, [r7, #4]
 8003c5c:	6892      	ldr	r2, [r2, #8]
 8003c5e:	0211      	lsls	r1, r2, #8
 8003c60:	687a      	ldr	r2, [r7, #4]
 8003c62:	6912      	ldr	r2, [r2, #16]
 8003c64:	0852      	lsrs	r2, r2, #1
 8003c66:	3a01      	subs	r2, #1
 8003c68:	0652      	lsls	r2, r2, #25
 8003c6a:	430a      	orrs	r2, r1
 8003c6c:	4915      	ldr	r1, [pc, #84]	; (8003cc4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003c6e:	4313      	orrs	r3, r2
 8003c70:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003c72:	4b14      	ldr	r3, [pc, #80]	; (8003cc4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	4a13      	ldr	r2, [pc, #76]	; (8003cc4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003c78:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003c7c:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c7e:	f7fc ff7b 	bl	8000b78 <HAL_GetTick>
 8003c82:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003c84:	e009      	b.n	8003c9a <RCCEx_PLLSAI2_Config+0x186>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003c86:	f7fc ff77 	bl	8000b78 <HAL_GetTick>
 8003c8a:	4602      	mov	r2, r0
 8003c8c:	68bb      	ldr	r3, [r7, #8]
 8003c8e:	1ad3      	subs	r3, r2, r3
 8003c90:	2b02      	cmp	r3, #2
 8003c92:	d902      	bls.n	8003c9a <RCCEx_PLLSAI2_Config+0x186>
        {
          status = HAL_TIMEOUT;
 8003c94:	2303      	movs	r3, #3
 8003c96:	73fb      	strb	r3, [r7, #15]
          break;
 8003c98:	e005      	b.n	8003ca6 <RCCEx_PLLSAI2_Config+0x192>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003c9a:	4b0a      	ldr	r3, [pc, #40]	; (8003cc4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d0ef      	beq.n	8003c86 <RCCEx_PLLSAI2_Config+0x172>
        }
      }

      if(status == HAL_OK)
 8003ca6:	7bfb      	ldrb	r3, [r7, #15]
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d106      	bne.n	8003cba <RCCEx_PLLSAI2_Config+0x1a6>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003cac:	4b05      	ldr	r3, [pc, #20]	; (8003cc4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003cae:	695a      	ldr	r2, [r3, #20]
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	695b      	ldr	r3, [r3, #20]
 8003cb4:	4903      	ldr	r1, [pc, #12]	; (8003cc4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003cb6:	4313      	orrs	r3, r2
 8003cb8:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003cba:	7bfb      	ldrb	r3, [r7, #15]
}
 8003cbc:	4618      	mov	r0, r3
 8003cbe:	3710      	adds	r7, #16
 8003cc0:	46bd      	mov	sp, r7
 8003cc2:	bd80      	pop	{r7, pc}
 8003cc4:	40021000 	.word	0x40021000

08003cc8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003cc8:	b580      	push	{r7, lr}
 8003cca:	b082      	sub	sp, #8
 8003ccc:	af00      	add	r7, sp, #0
 8003cce:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d101      	bne.n	8003cda <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003cd6:	2301      	movs	r3, #1
 8003cd8:	e040      	b.n	8003d5c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d106      	bne.n	8003cf0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	2200      	movs	r2, #0
 8003ce6:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003cea:	6878      	ldr	r0, [r7, #4]
 8003cec:	f7fc fdf4 	bl	80008d8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	2224      	movs	r2, #36	; 0x24
 8003cf4:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	681a      	ldr	r2, [r3, #0]
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	f022 0201 	bic.w	r2, r2, #1
 8003d04:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003d06:	6878      	ldr	r0, [r7, #4]
 8003d08:	f000 f8c0 	bl	8003e8c <UART_SetConfig>
 8003d0c:	4603      	mov	r3, r0
 8003d0e:	2b01      	cmp	r3, #1
 8003d10:	d101      	bne.n	8003d16 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003d12:	2301      	movs	r3, #1
 8003d14:	e022      	b.n	8003d5c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d002      	beq.n	8003d24 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003d1e:	6878      	ldr	r0, [r7, #4]
 8003d20:	f000 fb3e 	bl	80043a0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	685a      	ldr	r2, [r3, #4]
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003d32:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	689a      	ldr	r2, [r3, #8]
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003d42:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	681a      	ldr	r2, [r3, #0]
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	f042 0201 	orr.w	r2, r2, #1
 8003d52:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003d54:	6878      	ldr	r0, [r7, #4]
 8003d56:	f000 fbc5 	bl	80044e4 <UART_CheckIdleState>
 8003d5a:	4603      	mov	r3, r0
}
 8003d5c:	4618      	mov	r0, r3
 8003d5e:	3708      	adds	r7, #8
 8003d60:	46bd      	mov	sp, r7
 8003d62:	bd80      	pop	{r7, pc}

08003d64 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003d64:	b580      	push	{r7, lr}
 8003d66:	b08a      	sub	sp, #40	; 0x28
 8003d68:	af02      	add	r7, sp, #8
 8003d6a:	60f8      	str	r0, [r7, #12]
 8003d6c:	60b9      	str	r1, [r7, #8]
 8003d6e:	603b      	str	r3, [r7, #0]
 8003d70:	4613      	mov	r3, r2
 8003d72:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d78:	2b20      	cmp	r3, #32
 8003d7a:	f040 8081 	bne.w	8003e80 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003d7e:	68bb      	ldr	r3, [r7, #8]
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d002      	beq.n	8003d8a <HAL_UART_Transmit+0x26>
 8003d84:	88fb      	ldrh	r3, [r7, #6]
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d101      	bne.n	8003d8e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8003d8a:	2301      	movs	r3, #1
 8003d8c:	e079      	b.n	8003e82 <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8003d94:	2b01      	cmp	r3, #1
 8003d96:	d101      	bne.n	8003d9c <HAL_UART_Transmit+0x38>
 8003d98:	2302      	movs	r3, #2
 8003d9a:	e072      	b.n	8003e82 <HAL_UART_Transmit+0x11e>
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	2201      	movs	r2, #1
 8003da0:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	2200      	movs	r2, #0
 8003da8:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	2221      	movs	r2, #33	; 0x21
 8003dae:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8003db0:	f7fc fee2 	bl	8000b78 <HAL_GetTick>
 8003db4:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	88fa      	ldrh	r2, [r7, #6]
 8003dba:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	88fa      	ldrh	r2, [r7, #6]
 8003dc2:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	689b      	ldr	r3, [r3, #8]
 8003dca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003dce:	d108      	bne.n	8003de2 <HAL_UART_Transmit+0x7e>
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	691b      	ldr	r3, [r3, #16]
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d104      	bne.n	8003de2 <HAL_UART_Transmit+0x7e>
    {
      pdata8bits  = NULL;
 8003dd8:	2300      	movs	r3, #0
 8003dda:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003ddc:	68bb      	ldr	r3, [r7, #8]
 8003dde:	61bb      	str	r3, [r7, #24]
 8003de0:	e003      	b.n	8003dea <HAL_UART_Transmit+0x86>
    }
    else
    {
      pdata8bits  = pData;
 8003de2:	68bb      	ldr	r3, [r7, #8]
 8003de4:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003de6:	2300      	movs	r3, #0
 8003de8:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	2200      	movs	r2, #0
 8003dee:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    while (huart->TxXferCount > 0U)
 8003df2:	e02d      	b.n	8003e50 <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003df4:	683b      	ldr	r3, [r7, #0]
 8003df6:	9300      	str	r3, [sp, #0]
 8003df8:	697b      	ldr	r3, [r7, #20]
 8003dfa:	2200      	movs	r2, #0
 8003dfc:	2180      	movs	r1, #128	; 0x80
 8003dfe:	68f8      	ldr	r0, [r7, #12]
 8003e00:	f000 fbb5 	bl	800456e <UART_WaitOnFlagUntilTimeout>
 8003e04:	4603      	mov	r3, r0
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d001      	beq.n	8003e0e <HAL_UART_Transmit+0xaa>
      {
        return HAL_TIMEOUT;
 8003e0a:	2303      	movs	r3, #3
 8003e0c:	e039      	b.n	8003e82 <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 8003e0e:	69fb      	ldr	r3, [r7, #28]
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d10b      	bne.n	8003e2c <HAL_UART_Transmit+0xc8>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003e14:	69bb      	ldr	r3, [r7, #24]
 8003e16:	881a      	ldrh	r2, [r3, #0]
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003e20:	b292      	uxth	r2, r2
 8003e22:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003e24:	69bb      	ldr	r3, [r7, #24]
 8003e26:	3302      	adds	r3, #2
 8003e28:	61bb      	str	r3, [r7, #24]
 8003e2a:	e008      	b.n	8003e3e <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003e2c:	69fb      	ldr	r3, [r7, #28]
 8003e2e:	781a      	ldrb	r2, [r3, #0]
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	b292      	uxth	r2, r2
 8003e36:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003e38:	69fb      	ldr	r3, [r7, #28]
 8003e3a:	3301      	adds	r3, #1
 8003e3c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003e44:	b29b      	uxth	r3, r3
 8003e46:	3b01      	subs	r3, #1
 8003e48:	b29a      	uxth	r2, r3
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003e56:	b29b      	uxth	r3, r3
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d1cb      	bne.n	8003df4 <HAL_UART_Transmit+0x90>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003e5c:	683b      	ldr	r3, [r7, #0]
 8003e5e:	9300      	str	r3, [sp, #0]
 8003e60:	697b      	ldr	r3, [r7, #20]
 8003e62:	2200      	movs	r2, #0
 8003e64:	2140      	movs	r1, #64	; 0x40
 8003e66:	68f8      	ldr	r0, [r7, #12]
 8003e68:	f000 fb81 	bl	800456e <UART_WaitOnFlagUntilTimeout>
 8003e6c:	4603      	mov	r3, r0
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d001      	beq.n	8003e76 <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 8003e72:	2303      	movs	r3, #3
 8003e74:	e005      	b.n	8003e82 <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	2220      	movs	r2, #32
 8003e7a:	675a      	str	r2, [r3, #116]	; 0x74

    return HAL_OK;
 8003e7c:	2300      	movs	r3, #0
 8003e7e:	e000      	b.n	8003e82 <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 8003e80:	2302      	movs	r3, #2
  }
}
 8003e82:	4618      	mov	r0, r3
 8003e84:	3720      	adds	r7, #32
 8003e86:	46bd      	mov	sp, r7
 8003e88:	bd80      	pop	{r7, pc}
	...

08003e8c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003e8c:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8003e90:	b088      	sub	sp, #32
 8003e92:	af00      	add	r7, sp, #0
 8003e94:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003e96:	2300      	movs	r3, #0
 8003e98:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	689a      	ldr	r2, [r3, #8]
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	691b      	ldr	r3, [r3, #16]
 8003ea2:	431a      	orrs	r2, r3
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	695b      	ldr	r3, [r3, #20]
 8003ea8:	431a      	orrs	r2, r3
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	69db      	ldr	r3, [r3, #28]
 8003eae:	4313      	orrs	r3, r2
 8003eb0:	61fb      	str	r3, [r7, #28]
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	681a      	ldr	r2, [r3, #0]
 8003eb8:	4bac      	ldr	r3, [pc, #688]	; (800416c <UART_SetConfig+0x2e0>)
 8003eba:	4013      	ands	r3, r2
 8003ebc:	687a      	ldr	r2, [r7, #4]
 8003ebe:	6812      	ldr	r2, [r2, #0]
 8003ec0:	69f9      	ldr	r1, [r7, #28]
 8003ec2:	430b      	orrs	r3, r1
 8003ec4:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	685b      	ldr	r3, [r3, #4]
 8003ecc:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	68da      	ldr	r2, [r3, #12]
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	430a      	orrs	r2, r1
 8003eda:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	699b      	ldr	r3, [r3, #24]
 8003ee0:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	4aa2      	ldr	r2, [pc, #648]	; (8004170 <UART_SetConfig+0x2e4>)
 8003ee8:	4293      	cmp	r3, r2
 8003eea:	d004      	beq.n	8003ef6 <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	6a1b      	ldr	r3, [r3, #32]
 8003ef0:	69fa      	ldr	r2, [r7, #28]
 8003ef2:	4313      	orrs	r3, r2
 8003ef4:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	689b      	ldr	r3, [r3, #8]
 8003efc:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	69fa      	ldr	r2, [r7, #28]
 8003f06:	430a      	orrs	r2, r1
 8003f08:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	4a99      	ldr	r2, [pc, #612]	; (8004174 <UART_SetConfig+0x2e8>)
 8003f10:	4293      	cmp	r3, r2
 8003f12:	d121      	bne.n	8003f58 <UART_SetConfig+0xcc>
 8003f14:	4b98      	ldr	r3, [pc, #608]	; (8004178 <UART_SetConfig+0x2ec>)
 8003f16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f1a:	f003 0303 	and.w	r3, r3, #3
 8003f1e:	2b03      	cmp	r3, #3
 8003f20:	d816      	bhi.n	8003f50 <UART_SetConfig+0xc4>
 8003f22:	a201      	add	r2, pc, #4	; (adr r2, 8003f28 <UART_SetConfig+0x9c>)
 8003f24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f28:	08003f39 	.word	0x08003f39
 8003f2c:	08003f45 	.word	0x08003f45
 8003f30:	08003f3f 	.word	0x08003f3f
 8003f34:	08003f4b 	.word	0x08003f4b
 8003f38:	2301      	movs	r3, #1
 8003f3a:	76fb      	strb	r3, [r7, #27]
 8003f3c:	e0e8      	b.n	8004110 <UART_SetConfig+0x284>
 8003f3e:	2302      	movs	r3, #2
 8003f40:	76fb      	strb	r3, [r7, #27]
 8003f42:	e0e5      	b.n	8004110 <UART_SetConfig+0x284>
 8003f44:	2304      	movs	r3, #4
 8003f46:	76fb      	strb	r3, [r7, #27]
 8003f48:	e0e2      	b.n	8004110 <UART_SetConfig+0x284>
 8003f4a:	2308      	movs	r3, #8
 8003f4c:	76fb      	strb	r3, [r7, #27]
 8003f4e:	e0df      	b.n	8004110 <UART_SetConfig+0x284>
 8003f50:	2310      	movs	r3, #16
 8003f52:	76fb      	strb	r3, [r7, #27]
 8003f54:	bf00      	nop
 8003f56:	e0db      	b.n	8004110 <UART_SetConfig+0x284>
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	4a87      	ldr	r2, [pc, #540]	; (800417c <UART_SetConfig+0x2f0>)
 8003f5e:	4293      	cmp	r3, r2
 8003f60:	d134      	bne.n	8003fcc <UART_SetConfig+0x140>
 8003f62:	4b85      	ldr	r3, [pc, #532]	; (8004178 <UART_SetConfig+0x2ec>)
 8003f64:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f68:	f003 030c 	and.w	r3, r3, #12
 8003f6c:	2b0c      	cmp	r3, #12
 8003f6e:	d829      	bhi.n	8003fc4 <UART_SetConfig+0x138>
 8003f70:	a201      	add	r2, pc, #4	; (adr r2, 8003f78 <UART_SetConfig+0xec>)
 8003f72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f76:	bf00      	nop
 8003f78:	08003fad 	.word	0x08003fad
 8003f7c:	08003fc5 	.word	0x08003fc5
 8003f80:	08003fc5 	.word	0x08003fc5
 8003f84:	08003fc5 	.word	0x08003fc5
 8003f88:	08003fb9 	.word	0x08003fb9
 8003f8c:	08003fc5 	.word	0x08003fc5
 8003f90:	08003fc5 	.word	0x08003fc5
 8003f94:	08003fc5 	.word	0x08003fc5
 8003f98:	08003fb3 	.word	0x08003fb3
 8003f9c:	08003fc5 	.word	0x08003fc5
 8003fa0:	08003fc5 	.word	0x08003fc5
 8003fa4:	08003fc5 	.word	0x08003fc5
 8003fa8:	08003fbf 	.word	0x08003fbf
 8003fac:	2300      	movs	r3, #0
 8003fae:	76fb      	strb	r3, [r7, #27]
 8003fb0:	e0ae      	b.n	8004110 <UART_SetConfig+0x284>
 8003fb2:	2302      	movs	r3, #2
 8003fb4:	76fb      	strb	r3, [r7, #27]
 8003fb6:	e0ab      	b.n	8004110 <UART_SetConfig+0x284>
 8003fb8:	2304      	movs	r3, #4
 8003fba:	76fb      	strb	r3, [r7, #27]
 8003fbc:	e0a8      	b.n	8004110 <UART_SetConfig+0x284>
 8003fbe:	2308      	movs	r3, #8
 8003fc0:	76fb      	strb	r3, [r7, #27]
 8003fc2:	e0a5      	b.n	8004110 <UART_SetConfig+0x284>
 8003fc4:	2310      	movs	r3, #16
 8003fc6:	76fb      	strb	r3, [r7, #27]
 8003fc8:	bf00      	nop
 8003fca:	e0a1      	b.n	8004110 <UART_SetConfig+0x284>
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	4a6b      	ldr	r2, [pc, #428]	; (8004180 <UART_SetConfig+0x2f4>)
 8003fd2:	4293      	cmp	r3, r2
 8003fd4:	d120      	bne.n	8004018 <UART_SetConfig+0x18c>
 8003fd6:	4b68      	ldr	r3, [pc, #416]	; (8004178 <UART_SetConfig+0x2ec>)
 8003fd8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fdc:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003fe0:	2b10      	cmp	r3, #16
 8003fe2:	d00f      	beq.n	8004004 <UART_SetConfig+0x178>
 8003fe4:	2b10      	cmp	r3, #16
 8003fe6:	d802      	bhi.n	8003fee <UART_SetConfig+0x162>
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d005      	beq.n	8003ff8 <UART_SetConfig+0x16c>
 8003fec:	e010      	b.n	8004010 <UART_SetConfig+0x184>
 8003fee:	2b20      	cmp	r3, #32
 8003ff0:	d005      	beq.n	8003ffe <UART_SetConfig+0x172>
 8003ff2:	2b30      	cmp	r3, #48	; 0x30
 8003ff4:	d009      	beq.n	800400a <UART_SetConfig+0x17e>
 8003ff6:	e00b      	b.n	8004010 <UART_SetConfig+0x184>
 8003ff8:	2300      	movs	r3, #0
 8003ffa:	76fb      	strb	r3, [r7, #27]
 8003ffc:	e088      	b.n	8004110 <UART_SetConfig+0x284>
 8003ffe:	2302      	movs	r3, #2
 8004000:	76fb      	strb	r3, [r7, #27]
 8004002:	e085      	b.n	8004110 <UART_SetConfig+0x284>
 8004004:	2304      	movs	r3, #4
 8004006:	76fb      	strb	r3, [r7, #27]
 8004008:	e082      	b.n	8004110 <UART_SetConfig+0x284>
 800400a:	2308      	movs	r3, #8
 800400c:	76fb      	strb	r3, [r7, #27]
 800400e:	e07f      	b.n	8004110 <UART_SetConfig+0x284>
 8004010:	2310      	movs	r3, #16
 8004012:	76fb      	strb	r3, [r7, #27]
 8004014:	bf00      	nop
 8004016:	e07b      	b.n	8004110 <UART_SetConfig+0x284>
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	4a59      	ldr	r2, [pc, #356]	; (8004184 <UART_SetConfig+0x2f8>)
 800401e:	4293      	cmp	r3, r2
 8004020:	d120      	bne.n	8004064 <UART_SetConfig+0x1d8>
 8004022:	4b55      	ldr	r3, [pc, #340]	; (8004178 <UART_SetConfig+0x2ec>)
 8004024:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004028:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800402c:	2b40      	cmp	r3, #64	; 0x40
 800402e:	d00f      	beq.n	8004050 <UART_SetConfig+0x1c4>
 8004030:	2b40      	cmp	r3, #64	; 0x40
 8004032:	d802      	bhi.n	800403a <UART_SetConfig+0x1ae>
 8004034:	2b00      	cmp	r3, #0
 8004036:	d005      	beq.n	8004044 <UART_SetConfig+0x1b8>
 8004038:	e010      	b.n	800405c <UART_SetConfig+0x1d0>
 800403a:	2b80      	cmp	r3, #128	; 0x80
 800403c:	d005      	beq.n	800404a <UART_SetConfig+0x1be>
 800403e:	2bc0      	cmp	r3, #192	; 0xc0
 8004040:	d009      	beq.n	8004056 <UART_SetConfig+0x1ca>
 8004042:	e00b      	b.n	800405c <UART_SetConfig+0x1d0>
 8004044:	2300      	movs	r3, #0
 8004046:	76fb      	strb	r3, [r7, #27]
 8004048:	e062      	b.n	8004110 <UART_SetConfig+0x284>
 800404a:	2302      	movs	r3, #2
 800404c:	76fb      	strb	r3, [r7, #27]
 800404e:	e05f      	b.n	8004110 <UART_SetConfig+0x284>
 8004050:	2304      	movs	r3, #4
 8004052:	76fb      	strb	r3, [r7, #27]
 8004054:	e05c      	b.n	8004110 <UART_SetConfig+0x284>
 8004056:	2308      	movs	r3, #8
 8004058:	76fb      	strb	r3, [r7, #27]
 800405a:	e059      	b.n	8004110 <UART_SetConfig+0x284>
 800405c:	2310      	movs	r3, #16
 800405e:	76fb      	strb	r3, [r7, #27]
 8004060:	bf00      	nop
 8004062:	e055      	b.n	8004110 <UART_SetConfig+0x284>
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	4a47      	ldr	r2, [pc, #284]	; (8004188 <UART_SetConfig+0x2fc>)
 800406a:	4293      	cmp	r3, r2
 800406c:	d124      	bne.n	80040b8 <UART_SetConfig+0x22c>
 800406e:	4b42      	ldr	r3, [pc, #264]	; (8004178 <UART_SetConfig+0x2ec>)
 8004070:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004074:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004078:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800407c:	d012      	beq.n	80040a4 <UART_SetConfig+0x218>
 800407e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004082:	d802      	bhi.n	800408a <UART_SetConfig+0x1fe>
 8004084:	2b00      	cmp	r3, #0
 8004086:	d007      	beq.n	8004098 <UART_SetConfig+0x20c>
 8004088:	e012      	b.n	80040b0 <UART_SetConfig+0x224>
 800408a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800408e:	d006      	beq.n	800409e <UART_SetConfig+0x212>
 8004090:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004094:	d009      	beq.n	80040aa <UART_SetConfig+0x21e>
 8004096:	e00b      	b.n	80040b0 <UART_SetConfig+0x224>
 8004098:	2300      	movs	r3, #0
 800409a:	76fb      	strb	r3, [r7, #27]
 800409c:	e038      	b.n	8004110 <UART_SetConfig+0x284>
 800409e:	2302      	movs	r3, #2
 80040a0:	76fb      	strb	r3, [r7, #27]
 80040a2:	e035      	b.n	8004110 <UART_SetConfig+0x284>
 80040a4:	2304      	movs	r3, #4
 80040a6:	76fb      	strb	r3, [r7, #27]
 80040a8:	e032      	b.n	8004110 <UART_SetConfig+0x284>
 80040aa:	2308      	movs	r3, #8
 80040ac:	76fb      	strb	r3, [r7, #27]
 80040ae:	e02f      	b.n	8004110 <UART_SetConfig+0x284>
 80040b0:	2310      	movs	r3, #16
 80040b2:	76fb      	strb	r3, [r7, #27]
 80040b4:	bf00      	nop
 80040b6:	e02b      	b.n	8004110 <UART_SetConfig+0x284>
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	4a2c      	ldr	r2, [pc, #176]	; (8004170 <UART_SetConfig+0x2e4>)
 80040be:	4293      	cmp	r3, r2
 80040c0:	d124      	bne.n	800410c <UART_SetConfig+0x280>
 80040c2:	4b2d      	ldr	r3, [pc, #180]	; (8004178 <UART_SetConfig+0x2ec>)
 80040c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040c8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80040cc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80040d0:	d012      	beq.n	80040f8 <UART_SetConfig+0x26c>
 80040d2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80040d6:	d802      	bhi.n	80040de <UART_SetConfig+0x252>
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d007      	beq.n	80040ec <UART_SetConfig+0x260>
 80040dc:	e012      	b.n	8004104 <UART_SetConfig+0x278>
 80040de:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80040e2:	d006      	beq.n	80040f2 <UART_SetConfig+0x266>
 80040e4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80040e8:	d009      	beq.n	80040fe <UART_SetConfig+0x272>
 80040ea:	e00b      	b.n	8004104 <UART_SetConfig+0x278>
 80040ec:	2300      	movs	r3, #0
 80040ee:	76fb      	strb	r3, [r7, #27]
 80040f0:	e00e      	b.n	8004110 <UART_SetConfig+0x284>
 80040f2:	2302      	movs	r3, #2
 80040f4:	76fb      	strb	r3, [r7, #27]
 80040f6:	e00b      	b.n	8004110 <UART_SetConfig+0x284>
 80040f8:	2304      	movs	r3, #4
 80040fa:	76fb      	strb	r3, [r7, #27]
 80040fc:	e008      	b.n	8004110 <UART_SetConfig+0x284>
 80040fe:	2308      	movs	r3, #8
 8004100:	76fb      	strb	r3, [r7, #27]
 8004102:	e005      	b.n	8004110 <UART_SetConfig+0x284>
 8004104:	2310      	movs	r3, #16
 8004106:	76fb      	strb	r3, [r7, #27]
 8004108:	bf00      	nop
 800410a:	e001      	b.n	8004110 <UART_SetConfig+0x284>
 800410c:	2310      	movs	r3, #16
 800410e:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	4a16      	ldr	r2, [pc, #88]	; (8004170 <UART_SetConfig+0x2e4>)
 8004116:	4293      	cmp	r3, r2
 8004118:	f040 8087 	bne.w	800422a <UART_SetConfig+0x39e>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800411c:	7efb      	ldrb	r3, [r7, #27]
 800411e:	2b08      	cmp	r3, #8
 8004120:	d836      	bhi.n	8004190 <UART_SetConfig+0x304>
 8004122:	a201      	add	r2, pc, #4	; (adr r2, 8004128 <UART_SetConfig+0x29c>)
 8004124:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004128:	0800414d 	.word	0x0800414d
 800412c:	08004191 	.word	0x08004191
 8004130:	08004155 	.word	0x08004155
 8004134:	08004191 	.word	0x08004191
 8004138:	0800415b 	.word	0x0800415b
 800413c:	08004191 	.word	0x08004191
 8004140:	08004191 	.word	0x08004191
 8004144:	08004191 	.word	0x08004191
 8004148:	08004163 	.word	0x08004163
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800414c:	f7ff f880 	bl	8003250 <HAL_RCC_GetPCLK1Freq>
 8004150:	6178      	str	r0, [r7, #20]
        break;
 8004152:	e022      	b.n	800419a <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004154:	4b0d      	ldr	r3, [pc, #52]	; (800418c <UART_SetConfig+0x300>)
 8004156:	617b      	str	r3, [r7, #20]
        break;
 8004158:	e01f      	b.n	800419a <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800415a:	f7fe ffe3 	bl	8003124 <HAL_RCC_GetSysClockFreq>
 800415e:	6178      	str	r0, [r7, #20]
        break;
 8004160:	e01b      	b.n	800419a <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004162:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004166:	617b      	str	r3, [r7, #20]
        break;
 8004168:	e017      	b.n	800419a <UART_SetConfig+0x30e>
 800416a:	bf00      	nop
 800416c:	efff69f3 	.word	0xefff69f3
 8004170:	40008000 	.word	0x40008000
 8004174:	40013800 	.word	0x40013800
 8004178:	40021000 	.word	0x40021000
 800417c:	40004400 	.word	0x40004400
 8004180:	40004800 	.word	0x40004800
 8004184:	40004c00 	.word	0x40004c00
 8004188:	40005000 	.word	0x40005000
 800418c:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8004190:	2300      	movs	r3, #0
 8004192:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8004194:	2301      	movs	r3, #1
 8004196:	76bb      	strb	r3, [r7, #26]
        break;
 8004198:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800419a:	697b      	ldr	r3, [r7, #20]
 800419c:	2b00      	cmp	r3, #0
 800419e:	f000 80f1 	beq.w	8004384 <UART_SetConfig+0x4f8>
        }
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	685a      	ldr	r2, [r3, #4]
 80041a6:	4613      	mov	r3, r2
 80041a8:	005b      	lsls	r3, r3, #1
 80041aa:	4413      	add	r3, r2
 80041ac:	697a      	ldr	r2, [r7, #20]
 80041ae:	429a      	cmp	r2, r3
 80041b0:	d305      	bcc.n	80041be <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	685b      	ldr	r3, [r3, #4]
 80041b6:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80041b8:	697a      	ldr	r2, [r7, #20]
 80041ba:	429a      	cmp	r2, r3
 80041bc:	d902      	bls.n	80041c4 <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 80041be:	2301      	movs	r3, #1
 80041c0:	76bb      	strb	r3, [r7, #26]
 80041c2:	e0df      	b.n	8004384 <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate));
 80041c4:	697b      	ldr	r3, [r7, #20]
 80041c6:	4619      	mov	r1, r3
 80041c8:	f04f 0200 	mov.w	r2, #0
 80041cc:	f04f 0300 	mov.w	r3, #0
 80041d0:	f04f 0400 	mov.w	r4, #0
 80041d4:	0214      	lsls	r4, r2, #8
 80041d6:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 80041da:	020b      	lsls	r3, r1, #8
 80041dc:	687a      	ldr	r2, [r7, #4]
 80041de:	6852      	ldr	r2, [r2, #4]
 80041e0:	0852      	lsrs	r2, r2, #1
 80041e2:	4611      	mov	r1, r2
 80041e4:	f04f 0200 	mov.w	r2, #0
 80041e8:	eb13 0b01 	adds.w	fp, r3, r1
 80041ec:	eb44 0c02 	adc.w	ip, r4, r2
 80041f0:	4658      	mov	r0, fp
 80041f2:	4661      	mov	r1, ip
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	685b      	ldr	r3, [r3, #4]
 80041f8:	f04f 0400 	mov.w	r4, #0
 80041fc:	461a      	mov	r2, r3
 80041fe:	4623      	mov	r3, r4
 8004200:	f7fb ffe2 	bl	80001c8 <__aeabi_uldivmod>
 8004204:	4603      	mov	r3, r0
 8004206:	460c      	mov	r4, r1
 8004208:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800420a:	693b      	ldr	r3, [r7, #16]
 800420c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004210:	d308      	bcc.n	8004224 <UART_SetConfig+0x398>
 8004212:	693b      	ldr	r3, [r7, #16]
 8004214:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004218:	d204      	bcs.n	8004224 <UART_SetConfig+0x398>
        {
          huart->Instance->BRR = usartdiv;
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	693a      	ldr	r2, [r7, #16]
 8004220:	60da      	str	r2, [r3, #12]
 8004222:	e0af      	b.n	8004384 <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 8004224:	2301      	movs	r3, #1
 8004226:	76bb      	strb	r3, [r7, #26]
 8004228:	e0ac      	b.n	8004384 <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	69db      	ldr	r3, [r3, #28]
 800422e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004232:	d15b      	bne.n	80042ec <UART_SetConfig+0x460>
  {
    switch (clocksource)
 8004234:	7efb      	ldrb	r3, [r7, #27]
 8004236:	2b08      	cmp	r3, #8
 8004238:	d827      	bhi.n	800428a <UART_SetConfig+0x3fe>
 800423a:	a201      	add	r2, pc, #4	; (adr r2, 8004240 <UART_SetConfig+0x3b4>)
 800423c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004240:	08004265 	.word	0x08004265
 8004244:	0800426d 	.word	0x0800426d
 8004248:	08004275 	.word	0x08004275
 800424c:	0800428b 	.word	0x0800428b
 8004250:	0800427b 	.word	0x0800427b
 8004254:	0800428b 	.word	0x0800428b
 8004258:	0800428b 	.word	0x0800428b
 800425c:	0800428b 	.word	0x0800428b
 8004260:	08004283 	.word	0x08004283
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004264:	f7fe fff4 	bl	8003250 <HAL_RCC_GetPCLK1Freq>
 8004268:	6178      	str	r0, [r7, #20]
        break;
 800426a:	e013      	b.n	8004294 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800426c:	f7ff f806 	bl	800327c <HAL_RCC_GetPCLK2Freq>
 8004270:	6178      	str	r0, [r7, #20]
        break;
 8004272:	e00f      	b.n	8004294 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004274:	4b49      	ldr	r3, [pc, #292]	; (800439c <UART_SetConfig+0x510>)
 8004276:	617b      	str	r3, [r7, #20]
        break;
 8004278:	e00c      	b.n	8004294 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800427a:	f7fe ff53 	bl	8003124 <HAL_RCC_GetSysClockFreq>
 800427e:	6178      	str	r0, [r7, #20]
        break;
 8004280:	e008      	b.n	8004294 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004282:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004286:	617b      	str	r3, [r7, #20]
        break;
 8004288:	e004      	b.n	8004294 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 800428a:	2300      	movs	r3, #0
 800428c:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800428e:	2301      	movs	r3, #1
 8004290:	76bb      	strb	r3, [r7, #26]
        break;
 8004292:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004294:	697b      	ldr	r3, [r7, #20]
 8004296:	2b00      	cmp	r3, #0
 8004298:	d074      	beq.n	8004384 <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800429a:	697b      	ldr	r3, [r7, #20]
 800429c:	005a      	lsls	r2, r3, #1
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	685b      	ldr	r3, [r3, #4]
 80042a2:	085b      	lsrs	r3, r3, #1
 80042a4:	441a      	add	r2, r3
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	685b      	ldr	r3, [r3, #4]
 80042aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80042ae:	b29b      	uxth	r3, r3
 80042b0:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80042b2:	693b      	ldr	r3, [r7, #16]
 80042b4:	2b0f      	cmp	r3, #15
 80042b6:	d916      	bls.n	80042e6 <UART_SetConfig+0x45a>
 80042b8:	693b      	ldr	r3, [r7, #16]
 80042ba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80042be:	d212      	bcs.n	80042e6 <UART_SetConfig+0x45a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80042c0:	693b      	ldr	r3, [r7, #16]
 80042c2:	b29b      	uxth	r3, r3
 80042c4:	f023 030f 	bic.w	r3, r3, #15
 80042c8:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80042ca:	693b      	ldr	r3, [r7, #16]
 80042cc:	085b      	lsrs	r3, r3, #1
 80042ce:	b29b      	uxth	r3, r3
 80042d0:	f003 0307 	and.w	r3, r3, #7
 80042d4:	b29a      	uxth	r2, r3
 80042d6:	89fb      	ldrh	r3, [r7, #14]
 80042d8:	4313      	orrs	r3, r2
 80042da:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	89fa      	ldrh	r2, [r7, #14]
 80042e2:	60da      	str	r2, [r3, #12]
 80042e4:	e04e      	b.n	8004384 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 80042e6:	2301      	movs	r3, #1
 80042e8:	76bb      	strb	r3, [r7, #26]
 80042ea:	e04b      	b.n	8004384 <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 80042ec:	7efb      	ldrb	r3, [r7, #27]
 80042ee:	2b08      	cmp	r3, #8
 80042f0:	d827      	bhi.n	8004342 <UART_SetConfig+0x4b6>
 80042f2:	a201      	add	r2, pc, #4	; (adr r2, 80042f8 <UART_SetConfig+0x46c>)
 80042f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042f8:	0800431d 	.word	0x0800431d
 80042fc:	08004325 	.word	0x08004325
 8004300:	0800432d 	.word	0x0800432d
 8004304:	08004343 	.word	0x08004343
 8004308:	08004333 	.word	0x08004333
 800430c:	08004343 	.word	0x08004343
 8004310:	08004343 	.word	0x08004343
 8004314:	08004343 	.word	0x08004343
 8004318:	0800433b 	.word	0x0800433b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800431c:	f7fe ff98 	bl	8003250 <HAL_RCC_GetPCLK1Freq>
 8004320:	6178      	str	r0, [r7, #20]
        break;
 8004322:	e013      	b.n	800434c <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004324:	f7fe ffaa 	bl	800327c <HAL_RCC_GetPCLK2Freq>
 8004328:	6178      	str	r0, [r7, #20]
        break;
 800432a:	e00f      	b.n	800434c <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800432c:	4b1b      	ldr	r3, [pc, #108]	; (800439c <UART_SetConfig+0x510>)
 800432e:	617b      	str	r3, [r7, #20]
        break;
 8004330:	e00c      	b.n	800434c <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004332:	f7fe fef7 	bl	8003124 <HAL_RCC_GetSysClockFreq>
 8004336:	6178      	str	r0, [r7, #20]
        break;
 8004338:	e008      	b.n	800434c <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800433a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800433e:	617b      	str	r3, [r7, #20]
        break;
 8004340:	e004      	b.n	800434c <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 8004342:	2300      	movs	r3, #0
 8004344:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8004346:	2301      	movs	r3, #1
 8004348:	76bb      	strb	r3, [r7, #26]
        break;
 800434a:	bf00      	nop
    }

    if (pclk != 0U)
 800434c:	697b      	ldr	r3, [r7, #20]
 800434e:	2b00      	cmp	r3, #0
 8004350:	d018      	beq.n	8004384 <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	685b      	ldr	r3, [r3, #4]
 8004356:	085a      	lsrs	r2, r3, #1
 8004358:	697b      	ldr	r3, [r7, #20]
 800435a:	441a      	add	r2, r3
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	685b      	ldr	r3, [r3, #4]
 8004360:	fbb2 f3f3 	udiv	r3, r2, r3
 8004364:	b29b      	uxth	r3, r3
 8004366:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004368:	693b      	ldr	r3, [r7, #16]
 800436a:	2b0f      	cmp	r3, #15
 800436c:	d908      	bls.n	8004380 <UART_SetConfig+0x4f4>
 800436e:	693b      	ldr	r3, [r7, #16]
 8004370:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004374:	d204      	bcs.n	8004380 <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = usartdiv;
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	693a      	ldr	r2, [r7, #16]
 800437c:	60da      	str	r2, [r3, #12]
 800437e:	e001      	b.n	8004384 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8004380:	2301      	movs	r3, #1
 8004382:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	2200      	movs	r2, #0
 8004388:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	2200      	movs	r2, #0
 800438e:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8004390:	7ebb      	ldrb	r3, [r7, #26]
}
 8004392:	4618      	mov	r0, r3
 8004394:	3720      	adds	r7, #32
 8004396:	46bd      	mov	sp, r7
 8004398:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 800439c:	00f42400 	.word	0x00f42400

080043a0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80043a0:	b480      	push	{r7}
 80043a2:	b083      	sub	sp, #12
 80043a4:	af00      	add	r7, sp, #0
 80043a6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043ac:	f003 0301 	and.w	r3, r3, #1
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d00a      	beq.n	80043ca <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	685b      	ldr	r3, [r3, #4]
 80043ba:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	430a      	orrs	r2, r1
 80043c8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043ce:	f003 0302 	and.w	r3, r3, #2
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d00a      	beq.n	80043ec <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	685b      	ldr	r3, [r3, #4]
 80043dc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	430a      	orrs	r2, r1
 80043ea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043f0:	f003 0304 	and.w	r3, r3, #4
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d00a      	beq.n	800440e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	685b      	ldr	r3, [r3, #4]
 80043fe:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	430a      	orrs	r2, r1
 800440c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004412:	f003 0308 	and.w	r3, r3, #8
 8004416:	2b00      	cmp	r3, #0
 8004418:	d00a      	beq.n	8004430 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	685b      	ldr	r3, [r3, #4]
 8004420:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	430a      	orrs	r2, r1
 800442e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004434:	f003 0310 	and.w	r3, r3, #16
 8004438:	2b00      	cmp	r3, #0
 800443a:	d00a      	beq.n	8004452 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	689b      	ldr	r3, [r3, #8]
 8004442:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	430a      	orrs	r2, r1
 8004450:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004456:	f003 0320 	and.w	r3, r3, #32
 800445a:	2b00      	cmp	r3, #0
 800445c:	d00a      	beq.n	8004474 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	689b      	ldr	r3, [r3, #8]
 8004464:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	430a      	orrs	r2, r1
 8004472:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004478:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800447c:	2b00      	cmp	r3, #0
 800447e:	d01a      	beq.n	80044b6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	685b      	ldr	r3, [r3, #4]
 8004486:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	430a      	orrs	r2, r1
 8004494:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800449a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800449e:	d10a      	bne.n	80044b6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	685b      	ldr	r3, [r3, #4]
 80044a6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	430a      	orrs	r2, r1
 80044b4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d00a      	beq.n	80044d8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	685b      	ldr	r3, [r3, #4]
 80044c8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	430a      	orrs	r2, r1
 80044d6:	605a      	str	r2, [r3, #4]
  }
}
 80044d8:	bf00      	nop
 80044da:	370c      	adds	r7, #12
 80044dc:	46bd      	mov	sp, r7
 80044de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e2:	4770      	bx	lr

080044e4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80044e4:	b580      	push	{r7, lr}
 80044e6:	b086      	sub	sp, #24
 80044e8:	af02      	add	r7, sp, #8
 80044ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	2200      	movs	r2, #0
 80044f0:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 80044f2:	f7fc fb41 	bl	8000b78 <HAL_GetTick>
 80044f6:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	f003 0308 	and.w	r3, r3, #8
 8004502:	2b08      	cmp	r3, #8
 8004504:	d10e      	bne.n	8004524 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004506:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800450a:	9300      	str	r3, [sp, #0]
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	2200      	movs	r2, #0
 8004510:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004514:	6878      	ldr	r0, [r7, #4]
 8004516:	f000 f82a 	bl	800456e <UART_WaitOnFlagUntilTimeout>
 800451a:	4603      	mov	r3, r0
 800451c:	2b00      	cmp	r3, #0
 800451e:	d001      	beq.n	8004524 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004520:	2303      	movs	r3, #3
 8004522:	e020      	b.n	8004566 <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	f003 0304 	and.w	r3, r3, #4
 800452e:	2b04      	cmp	r3, #4
 8004530:	d10e      	bne.n	8004550 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004532:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004536:	9300      	str	r3, [sp, #0]
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	2200      	movs	r2, #0
 800453c:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004540:	6878      	ldr	r0, [r7, #4]
 8004542:	f000 f814 	bl	800456e <UART_WaitOnFlagUntilTimeout>
 8004546:	4603      	mov	r3, r0
 8004548:	2b00      	cmp	r3, #0
 800454a:	d001      	beq.n	8004550 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800454c:	2303      	movs	r3, #3
 800454e:	e00a      	b.n	8004566 <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	2220      	movs	r2, #32
 8004554:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	2220      	movs	r2, #32
 800455a:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	2200      	movs	r2, #0
 8004560:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8004564:	2300      	movs	r3, #0
}
 8004566:	4618      	mov	r0, r3
 8004568:	3710      	adds	r7, #16
 800456a:	46bd      	mov	sp, r7
 800456c:	bd80      	pop	{r7, pc}

0800456e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800456e:	b580      	push	{r7, lr}
 8004570:	b084      	sub	sp, #16
 8004572:	af00      	add	r7, sp, #0
 8004574:	60f8      	str	r0, [r7, #12]
 8004576:	60b9      	str	r1, [r7, #8]
 8004578:	603b      	str	r3, [r7, #0]
 800457a:	4613      	mov	r3, r2
 800457c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800457e:	e05d      	b.n	800463c <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004580:	69bb      	ldr	r3, [r7, #24]
 8004582:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004586:	d059      	beq.n	800463c <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004588:	f7fc faf6 	bl	8000b78 <HAL_GetTick>
 800458c:	4602      	mov	r2, r0
 800458e:	683b      	ldr	r3, [r7, #0]
 8004590:	1ad3      	subs	r3, r2, r3
 8004592:	69ba      	ldr	r2, [r7, #24]
 8004594:	429a      	cmp	r2, r3
 8004596:	d302      	bcc.n	800459e <UART_WaitOnFlagUntilTimeout+0x30>
 8004598:	69bb      	ldr	r3, [r7, #24]
 800459a:	2b00      	cmp	r3, #0
 800459c:	d11b      	bne.n	80045d6 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	681a      	ldr	r2, [r3, #0]
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80045ac:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	689a      	ldr	r2, [r3, #8]
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	f022 0201 	bic.w	r2, r2, #1
 80045bc:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	2220      	movs	r2, #32
 80045c2:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	2220      	movs	r2, #32
 80045c8:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	2200      	movs	r2, #0
 80045ce:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 80045d2:	2303      	movs	r3, #3
 80045d4:	e042      	b.n	800465c <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	f003 0304 	and.w	r3, r3, #4
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d02b      	beq.n	800463c <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	69db      	ldr	r3, [r3, #28]
 80045ea:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80045ee:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80045f2:	d123      	bne.n	800463c <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80045fc:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	681a      	ldr	r2, [r3, #0]
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800460c:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	689a      	ldr	r2, [r3, #8]
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	f022 0201 	bic.w	r2, r2, #1
 800461c:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	2220      	movs	r2, #32
 8004622:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	2220      	movs	r2, #32
 8004628:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	2220      	movs	r2, #32
 800462e:	67da      	str	r2, [r3, #124]	; 0x7c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	2200      	movs	r2, #0
 8004634:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

          return HAL_TIMEOUT;
 8004638:	2303      	movs	r3, #3
 800463a:	e00f      	b.n	800465c <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	69da      	ldr	r2, [r3, #28]
 8004642:	68bb      	ldr	r3, [r7, #8]
 8004644:	4013      	ands	r3, r2
 8004646:	68ba      	ldr	r2, [r7, #8]
 8004648:	429a      	cmp	r2, r3
 800464a:	bf0c      	ite	eq
 800464c:	2301      	moveq	r3, #1
 800464e:	2300      	movne	r3, #0
 8004650:	b2db      	uxtb	r3, r3
 8004652:	461a      	mov	r2, r3
 8004654:	79fb      	ldrb	r3, [r7, #7]
 8004656:	429a      	cmp	r2, r3
 8004658:	d092      	beq.n	8004580 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800465a:	2300      	movs	r3, #0
}
 800465c:	4618      	mov	r0, r3
 800465e:	3710      	adds	r7, #16
 8004660:	46bd      	mov	sp, r7
 8004662:	bd80      	pop	{r7, pc}

08004664 <__libc_init_array>:
 8004664:	b570      	push	{r4, r5, r6, lr}
 8004666:	4e0d      	ldr	r6, [pc, #52]	; (800469c <__libc_init_array+0x38>)
 8004668:	4c0d      	ldr	r4, [pc, #52]	; (80046a0 <__libc_init_array+0x3c>)
 800466a:	1ba4      	subs	r4, r4, r6
 800466c:	10a4      	asrs	r4, r4, #2
 800466e:	2500      	movs	r5, #0
 8004670:	42a5      	cmp	r5, r4
 8004672:	d109      	bne.n	8004688 <__libc_init_array+0x24>
 8004674:	4e0b      	ldr	r6, [pc, #44]	; (80046a4 <__libc_init_array+0x40>)
 8004676:	4c0c      	ldr	r4, [pc, #48]	; (80046a8 <__libc_init_array+0x44>)
 8004678:	f000 f820 	bl	80046bc <_init>
 800467c:	1ba4      	subs	r4, r4, r6
 800467e:	10a4      	asrs	r4, r4, #2
 8004680:	2500      	movs	r5, #0
 8004682:	42a5      	cmp	r5, r4
 8004684:	d105      	bne.n	8004692 <__libc_init_array+0x2e>
 8004686:	bd70      	pop	{r4, r5, r6, pc}
 8004688:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800468c:	4798      	blx	r3
 800468e:	3501      	adds	r5, #1
 8004690:	e7ee      	b.n	8004670 <__libc_init_array+0xc>
 8004692:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004696:	4798      	blx	r3
 8004698:	3501      	adds	r5, #1
 800469a:	e7f2      	b.n	8004682 <__libc_init_array+0x1e>
 800469c:	08004774 	.word	0x08004774
 80046a0:	08004774 	.word	0x08004774
 80046a4:	08004774 	.word	0x08004774
 80046a8:	08004778 	.word	0x08004778

080046ac <memset>:
 80046ac:	4402      	add	r2, r0
 80046ae:	4603      	mov	r3, r0
 80046b0:	4293      	cmp	r3, r2
 80046b2:	d100      	bne.n	80046b6 <memset+0xa>
 80046b4:	4770      	bx	lr
 80046b6:	f803 1b01 	strb.w	r1, [r3], #1
 80046ba:	e7f9      	b.n	80046b0 <memset+0x4>

080046bc <_init>:
 80046bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80046be:	bf00      	nop
 80046c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80046c2:	bc08      	pop	{r3}
 80046c4:	469e      	mov	lr, r3
 80046c6:	4770      	bx	lr

080046c8 <_fini>:
 80046c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80046ca:	bf00      	nop
 80046cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80046ce:	bc08      	pop	{r3}
 80046d0:	469e      	mov	lr, r3
 80046d2:	4770      	bx	lr
